
i2c_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029b0  080029b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b0  080029b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080029c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080029c4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000639f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001207  00000000  00000000  000263d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  000275e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00027c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015da0  00000000  00000000  000282b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000806c  00000000  00000000  0003e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007df56  00000000  00000000  000460bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae0  00000000  00000000  000c4068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002970 	.word	0x08002970

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002970 	.word	0x08002970

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fa8f 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f923 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f993 	bl	8000940 <MX_GPIO_Init>
  MX_I2C1_Init();
 800061a:	f000 f963 	bl	80008e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Baslat();
 800061e:	f000 f899 	bl	8000754 <MPU6050_Baslat>
  //Gyro kalibrasyon hatalarını hesapla.
  float gyro_e_x = GyroErr(GYRO_X_ADDR);
 8000622:	2043      	movs	r0, #67	; 0x43
 8000624:	f000 f8ec 	bl	8000800 <GyroErr>
 8000628:	60f8      	str	r0, [r7, #12]
  float gyro_e_y = GyroErr(GYRO_Y_ADDR);
 800062a:	2045      	movs	r0, #69	; 0x45
 800062c:	f000 f8e8 	bl	8000800 <GyroErr>
 8000630:	60b8      	str	r0, [r7, #8]
  float gyro_e_z = GyroErr(GYRO_Z_ADDR);
 8000632:	2047      	movs	r0, #71	; 0x47
 8000634:	f000 f8e4 	bl	8000800 <GyroErr>
 8000638:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  gyroX = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
 800063a:	2043      	movs	r0, #67	; 0x43
 800063c:	f000 f8be 	bl	80007bc <GyroOku>
 8000640:	4603      	mov	r3, r0
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe3c 	bl	80002c0 <__aeabi_i2f>
 8000648:	4603      	mov	r3, r0
 800064a:	68f9      	ldr	r1, [r7, #12]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fd81 	bl	8000154 <__aeabi_fsub>
 8000652:	4603      	mov	r3, r0
 8000654:	4937      	ldr	r1, [pc, #220]	; (8000734 <main+0x12c>)
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff3a 	bl	80004d0 <__aeabi_fdiv>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	4b35      	ldr	r3, [pc, #212]	; (8000738 <main+0x130>)
 8000662:	601a      	str	r2, [r3, #0]
	  gyroY = (GyroOku(GYRO_Y_ADDR)-gyro_e_y)/65.5;
 8000664:	2045      	movs	r0, #69	; 0x45
 8000666:	f000 f8a9 	bl	80007bc <GyroOku>
 800066a:	4603      	mov	r3, r0
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fe27 	bl	80002c0 <__aeabi_i2f>
 8000672:	4603      	mov	r3, r0
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fd6c 	bl	8000154 <__aeabi_fsub>
 800067c:	4603      	mov	r3, r0
 800067e:	492d      	ldr	r1, [pc, #180]	; (8000734 <main+0x12c>)
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff25 	bl	80004d0 <__aeabi_fdiv>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <main+0x134>)
 800068c:	601a      	str	r2, [r3, #0]
	  gyroZ = (GyroOku(GYRO_Z_ADDR)-gyro_e_z)/65.5;
 800068e:	2047      	movs	r0, #71	; 0x47
 8000690:	f000 f894 	bl	80007bc <GyroOku>
 8000694:	4603      	mov	r3, r0
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fe12 	bl	80002c0 <__aeabi_i2f>
 800069c:	4603      	mov	r3, r0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fd57 	bl	8000154 <__aeabi_fsub>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4922      	ldr	r1, [pc, #136]	; (8000734 <main+0x12c>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff10 	bl	80004d0 <__aeabi_fdiv>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <main+0x138>)
 80006b6:	601a      	str	r2, [r3, #0]
	  gyroa_x += gyroX * st; gyroa_y += gyroY * st; gyroa_z += gyroZ * st;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <main+0x130>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <main+0x13c>)
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fe51 	bl	8000368 <__aeabi_fmul>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <main+0x140>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4610      	mov	r0, r2
 80006d2:	f7ff fd41 	bl	8000158 <__addsf3>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <main+0x140>)
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <main+0x134>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <main+0x13c>)
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe3e 	bl	8000368 <__aeabi_fmul>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <main+0x144>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	4610      	mov	r0, r2
 80006f8:	f7ff fd2e 	bl	8000158 <__addsf3>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <main+0x144>)
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <main+0x138>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <main+0x13c>)
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fe2b 	bl	8000368 <__aeabi_fmul>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <main+0x148>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4619      	mov	r1, r3
 800071c:	4610      	mov	r0, r2
 800071e:	f7ff fd1b 	bl	8000158 <__addsf3>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <main+0x148>)
 8000728:	601a      	str	r2, [r3, #0]
	  HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f000 fa62 	bl	8000bf4 <HAL_Delay>
	  gyroX = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
 8000730:	e783      	b.n	800063a <main+0x32>
 8000732:	bf00      	nop
 8000734:	42830000 	.word	0x42830000
 8000738:	20000080 	.word	0x20000080
 800073c:	20000090 	.word	0x20000090
 8000740:	20000084 	.word	0x20000084
 8000744:	3d4ccccd 	.word	0x3d4ccccd
 8000748:	2000008c 	.word	0x2000008c
 800074c:	2000007c 	.word	0x2000007c
 8000750:	20000088 	.word	0x20000088

08000754 <MPU6050_Baslat>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void MPU6050_Baslat(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 50); //Güç registerını aktif et
 800075e:	2332      	movs	r3, #50	; 0x32
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	2301      	movs	r3, #1
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	226b      	movs	r2, #107	; 0x6b
 800076e:	21d0      	movs	r1, #208	; 0xd0
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MPU6050_Baslat+0x64>)
 8000772:	f000 fe0f 	bl	8001394 <HAL_I2C_Mem_Write>
	config = 0x08;
 8000776:	2308      	movs	r3, #8
 8000778:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 50); //Gyro 500 d/s'ye ayarlandi.
 800077a:	2332      	movs	r3, #50	; 0x32
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2301      	movs	r3, #1
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2301      	movs	r3, #1
 8000788:	221b      	movs	r2, #27
 800078a:	21d0      	movs	r1, #208	; 0xd0
 800078c:	480a      	ldr	r0, [pc, #40]	; (80007b8 <MPU6050_Baslat+0x64>)
 800078e:	f000 fe01 	bl	8001394 <HAL_I2C_Mem_Write>
	config = 0x10;
 8000792:	2310      	movs	r3, #16
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 50); //Acc +-8g'ye ayarlandi.
 8000796:	2332      	movs	r3, #50	; 0x32
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	2301      	movs	r3, #1
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	221c      	movs	r2, #28
 80007a6:	21d0      	movs	r1, #208	; 0xd0
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MPU6050_Baslat+0x64>)
 80007aa:	f000 fdf3 	bl	8001394 <HAL_I2C_Mem_Write>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028

080007bc <GyroOku>:

int16_t GyroOku (uint8_t addr) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af04      	add	r7, sp, #16
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 50);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2332      	movs	r3, #50	; 0x32
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	2302      	movs	r3, #2
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	21d1      	movs	r1, #209	; 0xd1
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <GyroOku+0x40>)
 80007de:	f000 fed3 	bl	8001588 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 80007e2:	7b3b      	ldrb	r3, [r7, #12]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	81fb      	strh	r3, [r7, #14]
	return gyro;
 80007f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000028 	.word	0x20000028

08000800 <GyroErr>:

float GyroErr(uint8_t addr) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	float GyroXe=0;
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
	//2000 ornek al ve kayma degerini kaydet.
	for (int i=0; i<2000; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	e011      	b.n	800083a <GyroErr+0x3a>
	{
		GyroXe += (float)GyroOku(addr);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffcf 	bl	80007bc <GyroOku>
 800081e:	4603      	mov	r3, r0
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fd4d 	bl	80002c0 <__aeabi_i2f>
 8000826:	4603      	mov	r3, r0
 8000828:	4619      	mov	r1, r3
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff fc94 	bl	8000158 <__addsf3>
 8000830:	4603      	mov	r3, r0
 8000832:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3301      	adds	r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000840:	dbe9      	blt.n	8000816 <GyroErr+0x16>

		} //Haberleşmeyi durdur.
	GyroXe=GyroXe/2000; //Son okunan değeri 2000'e böl.
 8000842:	4905      	ldr	r1, [pc, #20]	; (8000858 <GyroErr+0x58>)
 8000844:	68f8      	ldr	r0, [r7, #12]
 8000846:	f7ff fe43 	bl	80004d0 <__aeabi_fdiv>
 800084a:	4603      	mov	r3, r0
 800084c:	60fb      	str	r3, [r7, #12]
	return GyroXe;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	44fa0000 	.word	0x44fa0000

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0318 	add.w	r3, r7, #24
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f002 f878 	bl	8002960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000898:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800089a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fc31 	bl	800210c <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008b0:	f000 f874 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fe9d 	bl	800260c <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008d8:	f000 f860 	bl	800099c <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3740      	adds	r7, #64	; 0x40
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_I2C1_Init+0x54>)
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <MX_I2C1_Init+0x58>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 32768;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C1_Init+0x54>)
 80008f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_I2C1_Init+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_I2C1_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <MX_I2C1_Init+0x54>)
 8000904:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000908:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_I2C1_Init+0x54>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_I2C1_Init+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_I2C1_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_I2C1_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_I2C1_Init+0x54>)
 8000924:	f000 fbf2 	bl	800110c <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800092e:	f000 f835 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000028 	.word	0x20000028
 800093c:	40005400 	.word	0x40005400

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_GPIO_Init+0x58>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a13      	ldr	r2, [pc, #76]	; (8000998 <MX_GPIO_Init+0x58>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_GPIO_Init+0x58>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0320 	and.w	r3, r3, #32
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_GPIO_Init+0x58>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <MX_GPIO_Init+0x58>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_GPIO_Init+0x58>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_GPIO_Init+0x58>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <MX_GPIO_Init+0x58>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_GPIO_Init+0x58>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_MspInit+0x5c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_MspInit+0x5c>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x5c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x5c>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_MspInit+0x60>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_MspInit+0x60>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010000 	.word	0x40010000

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a15      	ldr	r2, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x70>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d123      	bne.n	8000a74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a44:	23c0      	movs	r3, #192	; 0xc0
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <HAL_I2C_MspInit+0x78>)
 8000a58:	f000 f9d4 	bl	8000e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a66:	61d3      	str	r3, [r2, #28]
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_I2C_MspInit+0x74>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f875 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
	...

08000ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ae4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ae6:	e003      	b.n	8000af0 <LoopCopyDataInit>

08000ae8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000aea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000aec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aee:	3104      	adds	r1, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000af4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000af6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af8:	d3f6      	bcc.n	8000ae8 <CopyDataInit>
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000afc:	e002      	b.n	8000b04 <LoopFillZerobss>

08000afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b00:	f842 3b04 	str.w	r3, [r2], #4

08000b04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b08:	d3f9      	bcc.n	8000afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b0a:	f7ff ffe4 	bl	8000ad6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f001 ff03 	bl	8002918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b12:	f7ff fd79 	bl	8000608 <main>
  bx lr
 8000b16:	4770      	bx	lr
  ldr r3, =_sidata
 8000b18:	080029b8 	.word	0x080029b8
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b24:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b28:	20000098 	.word	0x20000098

08000b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_2_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x28>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x28>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f92b 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff ff2c 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f935 	bl	8000dea <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f90b 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000094 	.word	0x20000094

08000be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000094 	.word	0x20000094

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff fff0 	bl	8000be0 <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Delay+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffe0 	bl	8000be0 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff90 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff49 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff5e 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff90 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5f 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffb0 	bl	8000d58 <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b08b      	sub	sp, #44	; 0x2c
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e169      	b.n	80010ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8158 	bne.w	80010e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4a9a      	ldr	r2, [pc, #616]	; (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d05e      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e40:	4a98      	ldr	r2, [pc, #608]	; (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d875      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e46:	4a98      	ldr	r2, [pc, #608]	; (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d058      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e4c:	4a96      	ldr	r2, [pc, #600]	; (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d86f      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e52:	4a96      	ldr	r2, [pc, #600]	; (80010ac <HAL_GPIO_Init+0x2a8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d052      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e58:	4a94      	ldr	r2, [pc, #592]	; (80010ac <HAL_GPIO_Init+0x2a8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d869      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e5e:	4a94      	ldr	r2, [pc, #592]	; (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d04c      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e64:	4a92      	ldr	r2, [pc, #584]	; (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d863      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e6a:	4a92      	ldr	r2, [pc, #584]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d046      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
 8000e70:	4a90      	ldr	r2, [pc, #576]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d85d      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d82a      	bhi.n	8000ed0 <HAL_GPIO_Init+0xcc>
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d859      	bhi.n	8000f32 <HAL_GPIO_Init+0x12e>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <HAL_GPIO_Init+0x80>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000eff 	.word	0x08000eff
 8000e88:	08000ed9 	.word	0x08000ed9
 8000e8c:	08000eeb 	.word	0x08000eeb
 8000e90:	08000f2d 	.word	0x08000f2d
 8000e94:	08000f33 	.word	0x08000f33
 8000e98:	08000f33 	.word	0x08000f33
 8000e9c:	08000f33 	.word	0x08000f33
 8000ea0:	08000f33 	.word	0x08000f33
 8000ea4:	08000f33 	.word	0x08000f33
 8000ea8:	08000f33 	.word	0x08000f33
 8000eac:	08000f33 	.word	0x08000f33
 8000eb0:	08000f33 	.word	0x08000f33
 8000eb4:	08000f33 	.word	0x08000f33
 8000eb8:	08000f33 	.word	0x08000f33
 8000ebc:	08000f33 	.word	0x08000f33
 8000ec0:	08000f33 	.word	0x08000f33
 8000ec4:	08000f33 	.word	0x08000f33
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000ef5 	.word	0x08000ef5
 8000ed0:	4a79      	ldr	r2, [pc, #484]	; (80010b8 <HAL_GPIO_Init+0x2b4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed6:	e02c      	b.n	8000f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e029      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e024      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e01f      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	330c      	adds	r3, #12
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e01a      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f06:	2304      	movs	r3, #4
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e013      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	611a      	str	r2, [r3, #16]
          break;
 8000f1e:	e009      	b.n	8000f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2308      	movs	r3, #8
 8000f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	615a      	str	r2, [r3, #20]
          break;
 8000f2a:	e003      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x130>
          break;
 8000f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d801      	bhi.n	8000f3e <HAL_GPIO_Init+0x13a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	e001      	b.n	8000f42 <HAL_GPIO_Init+0x13e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3304      	adds	r3, #4
 8000f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d802      	bhi.n	8000f50 <HAL_GPIO_Init+0x14c>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	e002      	b.n	8000f56 <HAL_GPIO_Init+0x152>
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	3b08      	subs	r3, #8
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	401a      	ands	r2, r3
 8000f68:	6a39      	ldr	r1, [r7, #32]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 80b1 	beq.w	80010e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f84:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x2b8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f9c:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x2bc>)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <HAL_GPIO_Init+0x2c0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_Init+0x1ec>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a3f      	ldr	r2, [pc, #252]	; (80010c8 <HAL_GPIO_Init+0x2c4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_Init+0x1e8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <HAL_GPIO_Init+0x2c8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3d      	ldr	r2, [pc, #244]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_Init+0x1e0>
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001002:	492f      	ldr	r1, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x2bc>)
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d006      	beq.n	800102a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	492c      	ldr	r1, [pc, #176]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	600b      	str	r3, [r1, #0]
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	43db      	mvns	r3, r3
 8001032:	4928      	ldr	r1, [pc, #160]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001034:	4013      	ands	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	4922      	ldr	r1, [pc, #136]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	43db      	mvns	r3, r3
 800105a:	491e      	ldr	r1, [pc, #120]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800105c:	4013      	ands	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	4918      	ldr	r1, [pc, #96]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	608b      	str	r3, [r1, #8]
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	43db      	mvns	r3, r3
 8001082:	4914      	ldr	r1, [pc, #80]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001084:	4013      	ands	r3, r2
 8001086:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d021      	beq.n	80010d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	60cb      	str	r3, [r1, #12]
 80010a0:	e021      	b.n	80010e6 <HAL_GPIO_Init+0x2e2>
 80010a2:	bf00      	nop
 80010a4:	10320000 	.word	0x10320000
 80010a8:	10310000 	.word	0x10310000
 80010ac:	10220000 	.word	0x10220000
 80010b0:	10210000 	.word	0x10210000
 80010b4:	10120000 	.word	0x10120000
 80010b8:	10110000 	.word	0x10110000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010000 	.word	0x40010000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40011400 	.word	0x40011400
 80010d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	43db      	mvns	r3, r3
 80010e0:	4909      	ldr	r1, [pc, #36]	; (8001108 <HAL_GPIO_Init+0x304>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae8e 	bne.w	8000e18 <HAL_GPIO_Init+0x14>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	372c      	adds	r7, #44	; 0x2c
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e12b      	b.n	8001376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fc6a 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2224      	movs	r2, #36	; 0x24
 800113c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800115e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800116e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001170:	f001 fba0 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8001174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a81      	ldr	r2, [pc, #516]	; (8001380 <HAL_I2C_Init+0x274>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d807      	bhi.n	8001190 <HAL_I2C_Init+0x84>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a80      	ldr	r2, [pc, #512]	; (8001384 <HAL_I2C_Init+0x278>)
 8001184:	4293      	cmp	r3, r2
 8001186:	bf94      	ite	ls
 8001188:	2301      	movls	r3, #1
 800118a:	2300      	movhi	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e006      	b.n	800119e <HAL_I2C_Init+0x92>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4a7d      	ldr	r2, [pc, #500]	; (8001388 <HAL_I2C_Init+0x27c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	bf94      	ite	ls
 8001198:	2301      	movls	r3, #1
 800119a:	2300      	movhi	r3, #0
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0e7      	b.n	8001376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4a78      	ldr	r2, [pc, #480]	; (800138c <HAL_I2C_Init+0x280>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a6a      	ldr	r2, [pc, #424]	; (8001380 <HAL_I2C_Init+0x274>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d802      	bhi.n	80011e0 <HAL_I2C_Init+0xd4>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	e009      	b.n	80011f4 <HAL_I2C_Init+0xe8>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011e6:	fb02 f303 	mul.w	r3, r2, r3
 80011ea:	4a69      	ldr	r2, [pc, #420]	; (8001390 <HAL_I2C_Init+0x284>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	099b      	lsrs	r3, r3, #6
 80011f2:	3301      	adds	r3, #1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	495c      	ldr	r1, [pc, #368]	; (8001380 <HAL_I2C_Init+0x274>)
 8001210:	428b      	cmp	r3, r1
 8001212:	d819      	bhi.n	8001248 <HAL_I2C_Init+0x13c>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1e59      	subs	r1, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001228:	400b      	ands	r3, r1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00a      	beq.n	8001244 <HAL_I2C_Init+0x138>
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e59      	subs	r1, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fbb1 f3f3 	udiv	r3, r1, r3
 800123c:	3301      	adds	r3, #1
 800123e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001242:	e051      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 8001244:	2304      	movs	r3, #4
 8001246:	e04f      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d111      	bne.n	8001274 <HAL_I2C_Init+0x168>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e58      	subs	r0, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	440b      	add	r3, r1
 800125e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001262:	3301      	adds	r3, #1
 8001264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	e012      	b.n	800129a <HAL_I2C_Init+0x18e>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1e58      	subs	r0, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6859      	ldr	r1, [r3, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	0099      	lsls	r1, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_Init+0x196>
 800129e:	2301      	movs	r3, #1
 80012a0:	e022      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <HAL_I2C_Init+0x1bc>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1e58      	subs	r0, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6859      	ldr	r1, [r3, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	440b      	add	r3, r1
 80012b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c6:	e00f      	b.n	80012e8 <HAL_I2C_Init+0x1dc>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e58      	subs	r0, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	0099      	lsls	r1, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	fbb0 f3f3 	udiv	r3, r0, r3
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	6809      	ldr	r1, [r1, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001316:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6911      	ldr	r1, [r2, #16]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68d2      	ldr	r2, [r2, #12]
 8001322:	4311      	orrs	r1, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	430b      	orrs	r3, r1
 800132a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2220      	movs	r2, #32
 8001362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	000186a0 	.word	0x000186a0
 8001384:	001e847f 	.word	0x001e847f
 8001388:	003d08ff 	.word	0x003d08ff
 800138c:	431bde83 	.word	0x431bde83
 8001390:	10624dd3 	.word	0x10624dd3

08001394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	4608      	mov	r0, r1
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	817b      	strh	r3, [r7, #10]
 80013a6:	460b      	mov	r3, r1
 80013a8:	813b      	strh	r3, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013ae:	f7ff fc17 	bl	8000be0 <HAL_GetTick>
 80013b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b20      	cmp	r3, #32
 80013be:	f040 80d9 	bne.w	8001574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2319      	movs	r3, #25
 80013c8:	2201      	movs	r2, #1
 80013ca:	496d      	ldr	r1, [pc, #436]	; (8001580 <HAL_I2C_Mem_Write+0x1ec>)
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 fcc1 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80013d8:	2302      	movs	r3, #2
 80013da:	e0cc      	b.n	8001576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Mem_Write+0x56>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0c5      	b.n	8001576 <HAL_I2C_Mem_Write+0x1e2>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d007      	beq.n	8001410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800141e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2221      	movs	r2, #33	; 0x21
 8001424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001440:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a4d      	ldr	r2, [pc, #308]	; (8001584 <HAL_I2C_Mem_Write+0x1f0>)
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001452:	88f8      	ldrh	r0, [r7, #6]
 8001454:	893a      	ldrh	r2, [r7, #8]
 8001456:	8979      	ldrh	r1, [r7, #10]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4603      	mov	r3, r0
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 faf8 	bl	8001a58 <I2C_RequestMemoryWrite>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d052      	beq.n	8001514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e081      	b.n	8001576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 fd42 	bl	8001f00 <I2C_WaitOnTXEFlagUntilTimeout>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00d      	beq.n	800149e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	2b04      	cmp	r3, #4
 8001488:	d107      	bne.n	800149a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06b      	b.n	8001576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d11b      	bne.n	8001514 <HAL_I2C_Mem_Write+0x180>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d017      	beq.n	8001514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1aa      	bne.n	8001472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 fd2e 	bl	8001f82 <I2C_WaitOnBTFFlagUntilTimeout>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00d      	beq.n	8001548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	2b04      	cmp	r3, #4
 8001532:	d107      	bne.n	8001544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e016      	b.n	8001576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2220      	movs	r2, #32
 800155c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e000      	b.n	8001576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001574:	2302      	movs	r3, #2
  }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	00100002 	.word	0x00100002
 8001584:	ffff0000 	.word	0xffff0000

08001588 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	817b      	strh	r3, [r7, #10]
 800159a:	460b      	mov	r3, r1
 800159c:	813b      	strh	r3, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015a6:	f7ff fb1b 	bl	8000be0 <HAL_GetTick>
 80015aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b20      	cmp	r3, #32
 80015b6:	f040 8244 	bne.w	8001a42 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2319      	movs	r3, #25
 80015c0:	2201      	movs	r2, #1
 80015c2:	4982      	ldr	r1, [pc, #520]	; (80017cc <HAL_I2C_Mem_Read+0x244>)
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 fbc5 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
 80015d2:	e237      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_I2C_Mem_Read+0x5a>
 80015de:	2302      	movs	r3, #2
 80015e0:	e230      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d007      	beq.n	8001608 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2222      	movs	r2, #34	; 0x22
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4a62      	ldr	r2, [pc, #392]	; (80017d0 <HAL_I2C_Mem_Read+0x248>)
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800164a:	88f8      	ldrh	r0, [r7, #6]
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	8979      	ldrh	r1, [r7, #10]
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4603      	mov	r3, r0
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fa92 	bl	8001b84 <I2C_RequestMemoryRead>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1ec      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	2b00      	cmp	r3, #0
 8001670:	d113      	bne.n	800169a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e1c0      	b.n	8001a1c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d11e      	bne.n	80016e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016b2:	b672      	cpsid	i
}
 80016b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016dc:	b662      	cpsie	i
}
 80016de:	e035      	b.n	800174c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d11e      	bne.n	8001726 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001722:	b662      	cpsie	i
}
 8001724:	e012      	b.n	800174c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001734:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800174c:	e166      	b.n	8001a1c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	2b03      	cmp	r3, #3
 8001754:	f200 811f 	bhi.w	8001996 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b01      	cmp	r3, #1
 800175e:	d123      	bne.n	80017a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001762:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fc4d 	bl	8002004 <I2C_WaitOnRXNEFlagUntilTimeout>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e167      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017a6:	e139      	b.n	8001a1c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d152      	bne.n	8001856 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	2200      	movs	r2, #0
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <HAL_I2C_Mem_Read+0x24c>)
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 faca 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e13c      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
 80017ca:	bf00      	nop
 80017cc:	00100002 	.word	0x00100002
 80017d0:	ffff0000 	.word	0xffff0000
 80017d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800181e:	b662      	cpsie	i
}
 8001820:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001854:	e0e2      	b.n	8001a1c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185c:	2200      	movs	r2, #0
 800185e:	497b      	ldr	r1, [pc, #492]	; (8001a4c <HAL_I2C_Mem_Read+0x4c4>)
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fa77 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0e9      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80018b6:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_I2C_Mem_Read+0x4c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_I2C_Mem_Read+0x4cc>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a1a      	lsrs	r2, r3, #8
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00da      	lsls	r2, r3, #3
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d118      	bne.n	800190e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2220      	movs	r2, #32
 80018e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80018fe:	b662      	cpsie	i
}
 8001900:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e09a      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b04      	cmp	r3, #4
 800191a:	d1d9      	bne.n	80018d0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800195e:	b662      	cpsie	i
}
 8001960:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001994:	e042      	b.n	8001a1c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fb32 	bl	8002004 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e04c      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d118      	bne.n	8001a1c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f47f ae94 	bne.w	800174e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	00010004 	.word	0x00010004
 8001a50:	20000000 	.word	0x20000000
 8001a54:	14f8b589 	.word	0x14f8b589

08001a58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	817b      	strh	r3, [r7, #10]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	813b      	strh	r3, [r7, #8]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f960 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aa8:	d103      	bne.n	8001ab2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e05f      	b.n	8001b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ab6:	897b      	ldrh	r3, [r7, #10]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	6a3a      	ldr	r2, [r7, #32]
 8001aca:	492d      	ldr	r1, [pc, #180]	; (8001b80 <I2C_RequestMemoryWrite+0x128>)
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f998 	bl	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e04c      	b.n	8001b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af4:	6a39      	ldr	r1, [r7, #32]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fa02 	bl	8001f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00d      	beq.n	8001b1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d107      	bne.n	8001b1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e02b      	b.n	8001b76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b24:	893b      	ldrh	r3, [r7, #8]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	611a      	str	r2, [r3, #16]
 8001b2e:	e021      	b.n	8001b74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b30:	893b      	ldrh	r3, [r7, #8]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	6a39      	ldr	r1, [r7, #32]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f9dc 	bl	8001f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d107      	bne.n	8001b66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e005      	b.n	8001b76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b6a:	893b      	ldrh	r3, [r7, #8]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	00010002 	.word	0x00010002

08001b84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	4611      	mov	r1, r2
 8001b90:	461a      	mov	r2, r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	817b      	strh	r3, [r7, #10]
 8001b96:	460b      	mov	r3, r1
 8001b98:	813b      	strh	r3, [r7, #8]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f8c2 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be4:	d103      	bne.n	8001bee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0aa      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	4952      	ldr	r1, [pc, #328]	; (8001d50 <I2C_RequestMemoryRead+0x1cc>)
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f8fa 	bl	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e097      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f964 	bl	8001f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d107      	bne.n	8001c56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e076      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	e021      	b.n	8001cb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	6a39      	ldr	r1, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f93e 	bl	8001f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d107      	bne.n	8001ca2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e050      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca6:	893b      	ldrh	r3, [r7, #8]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f923 	bl	8001f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d107      	bne.n	8001cd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e035      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f82b 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	d103      	bne.n	8001d1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e013      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	6a3a      	ldr	r2, [r7, #32]
 8001d34:	4906      	ldr	r1, [pc, #24]	; (8001d50 <I2C_RequestMemoryRead+0x1cc>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f863 	bl	8001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	00010002 	.word	0x00010002

08001d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d64:	e025      	b.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d021      	beq.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7fe ff37 	bl	8000be0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e023      	b.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10d      	bne.n	8001dd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	bf0c      	ite	eq
 8001dce:	2301      	moveq	r3, #1
 8001dd0:	2300      	movne	r3, #0
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	e00c      	b.n	8001df2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d0b6      	beq.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e10:	e051      	b.n	8001eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e20:	d123      	bne.n	8001e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f043 0204 	orr.w	r2, r3, #4
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e046      	b.n	8001ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d021      	beq.n	8001eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e72:	f7fe feb5 	bl	8000be0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f043 0220 	orr.w	r2, r3, #32
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e020      	b.n	8001ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d10c      	bne.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e00b      	b.n	8001ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d18d      	bne.n	8001e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f0c:	e02d      	b.n	8001f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f8ce 	bl	80020b0 <I2C_IsAcknowledgeFailed>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e02d      	b.n	8001f7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d021      	beq.n	8001f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f26:	f7fe fe5b 	bl	8000be0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d302      	bcc.n	8001f3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d116      	bne.n	8001f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f043 0220 	orr.w	r2, r3, #32
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e007      	b.n	8001f7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d1ca      	bne.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f8e:	e02d      	b.n	8001fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f88d 	bl	80020b0 <I2C_IsAcknowledgeFailed>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e02d      	b.n	8001ffc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d021      	beq.n	8001fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fe1a 	bl	8000be0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d302      	bcc.n	8001fbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e007      	b.n	8001ffc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d1ca      	bne.n	8001f90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002010:	e042      	b.n	8002098 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d119      	bne.n	8002054 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0210 	mvn.w	r2, #16
 8002028:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e029      	b.n	80020a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002054:	f7fe fdc4 	bl	8000be0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d302      	bcc.n	800206a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e007      	b.n	80020a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d1b5      	bne.n	8002012 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c6:	d11b      	bne.n	8002100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f043 0204 	orr.w	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e26c      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8087 	beq.w	800223a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800212c:	4b92      	ldr	r3, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b04      	cmp	r3, #4
 8002136:	d00c      	beq.n	8002152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002138:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d112      	bne.n	800216a <HAL_RCC_OscConfig+0x5e>
 8002144:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d10b      	bne.n	800216a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d06c      	beq.n	8002238 <HAL_RCC_OscConfig+0x12c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d168      	bne.n	8002238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e246      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x76>
 8002174:	4b80      	ldr	r3, [pc, #512]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a7f      	ldr	r2, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e02e      	b.n	80021e0 <HAL_RCC_OscConfig+0xd4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x98>
 800218a:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7a      	ldr	r2, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b78      	ldr	r3, [pc, #480]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a77      	ldr	r2, [pc, #476]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e01d      	b.n	80021e0 <HAL_RCC_OscConfig+0xd4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0xbc>
 80021ae:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a71      	ldr	r2, [pc, #452]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b6f      	ldr	r3, [pc, #444]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6e      	ldr	r2, [pc, #440]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0xd4>
 80021c8:	4b6b      	ldr	r3, [pc, #428]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a67      	ldr	r2, [pc, #412]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fcfa 	bl	8000be0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7fe fcf6 	bl	8000be0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1fa      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0xe4>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fce6 	bl	8000be0 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe fce2 	bl	8000be0 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1e6      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x10c>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d063      	beq.n	800230e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002246:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x18c>
 800225e:	4b46      	ldr	r3, [pc, #280]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x176>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1ba      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4939      	ldr	r1, [pc, #228]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_RCC_OscConfig+0x270>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fc9b 	bl	8000be0 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe fc97 	bl	8000be0 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e19b      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4927      	ldr	r1, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_OscConfig+0x270>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fc7a 	bl	8000be0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe fc76 	bl	8000be0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e17a      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d03a      	beq.n	8002390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d019      	beq.n	8002356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_RCC_OscConfig+0x274>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7fe fc5a 	bl	8000be0 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe fc56 	bl	8000be0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e15a      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800234e:	2001      	movs	r0, #1
 8002350:	f000 fac4 	bl	80028dc <RCC_Delay>
 8002354:	e01c      	b.n	8002390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RCC_OscConfig+0x274>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7fe fc40 	bl	8000be0 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002362:	e00f      	b.n	8002384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7fe fc3c 	bl	8000be0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d908      	bls.n	8002384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e140      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	42420000 	.word	0x42420000
 8002380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	4b9e      	ldr	r3, [pc, #632]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e9      	bne.n	8002364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a6 	beq.w	80024ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a2:	4b97      	ldr	r3, [pc, #604]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a93      	ldr	r2, [pc, #588]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	61d3      	str	r3, [r2, #28]
 80023ba:	4b91      	ldr	r3, [pc, #580]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b8e      	ldr	r3, [pc, #568]	; (8002604 <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d118      	bne.n	8002408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b8b      	ldr	r3, [pc, #556]	; (8002604 <HAL_RCC_OscConfig+0x4f8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a8a      	ldr	r2, [pc, #552]	; (8002604 <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fbfd 	bl	8000be0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7fe fbf9 	bl	8000be0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0fd      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x4f8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x312>
 8002410:	4b7b      	ldr	r3, [pc, #492]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a7a      	ldr	r2, [pc, #488]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e02d      	b.n	800247a <HAL_RCC_OscConfig+0x36e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x334>
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a75      	ldr	r2, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a72      	ldr	r2, [pc, #456]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	e01c      	b.n	800247a <HAL_RCC_OscConfig+0x36e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x356>
 8002448:	4b6d      	ldr	r3, [pc, #436]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a6c      	ldr	r2, [pc, #432]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a69      	ldr	r2, [pc, #420]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x36e>
 8002462:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a66      	ldr	r2, [pc, #408]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b64      	ldr	r3, [pc, #400]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a63      	ldr	r2, [pc, #396]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7fe fbad 	bl	8000be0 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fba9 	bl	8000be0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0ab      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	4b57      	ldr	r3, [pc, #348]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ee      	beq.n	800248a <HAL_RCC_OscConfig+0x37e>
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fb97 	bl	8000be0 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fb93 	bl	8000be0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e095      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b48      	ldr	r3, [pc, #288]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a47      	ldr	r2, [pc, #284]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8081 	beq.w	80025f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d061      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d146      	bne.n	8002596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_RCC_OscConfig+0x4fc>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fb67 	bl	8000be0 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fb63 	bl	8000be0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e067      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	4b35      	ldr	r3, [pc, #212]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d108      	bne.n	8002550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800253e:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	492d      	ldr	r1, [pc, #180]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a19      	ldr	r1, [r3, #32]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	430b      	orrs	r3, r1
 8002562:	4927      	ldr	r1, [pc, #156]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x4fc>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fb37 	bl	8000be0 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fb33 	bl	8000be0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e037      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x46a>
 8002594:	e02f      	b.n	80025f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_RCC_OscConfig+0x4fc>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fb20 	bl	8000be0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fb1c 	bl	8000be0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e020      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x498>
 80025c2:	e018      	b.n	80025f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e013      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
 8002608:	42420060 	.word	0x42420060

0800260c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d0      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4965      	ldr	r1, [pc, #404]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800268a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d040      	beq.n	800272c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e073      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06b      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4936      	ldr	r1, [pc, #216]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026fc:	f7fe fa70 	bl	8000be0 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fe fa6c 	bl	8000be0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e053      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d210      	bcs.n	800275c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 0207 	bic.w	r2, r3, #7
 8002742:	4922      	ldr	r1, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f821 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1cc>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe f9ce 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08002998 	.word	0x08002998
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b490      	push	{r4, r7}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027e8:	1d3c      	adds	r4, r7, #4
 80027ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027f0:	f240 2301 	movw	r3, #513	; 0x201
 80027f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x40>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x46>
 800281e:	e02d      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	e02d      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002832:	4413      	add	r3, r2
 8002834:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002838:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c5b      	lsrs	r3, r3, #17
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002852:	4413      	add	r3, r2
 8002854:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002858:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	fb02 f203 	mul.w	r2, r2, r3
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e004      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	623b      	str	r3, [r7, #32]
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287e:	623b      	str	r3, [r7, #32]
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	6a3b      	ldr	r3, [r7, #32]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bc90      	pop	{r4, r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	08002988 	.word	0x08002988
 8002894:	40021000 	.word	0x40021000
 8002898:	007a1200 	.word	0x007a1200
 800289c:	003d0900 	.word	0x003d0900

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff2 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	080029a8 	.word	0x080029a8

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000000 	.word	0x20000000
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <__libc_init_array>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2600      	movs	r6, #0
 800291c:	4d0c      	ldr	r5, [pc, #48]	; (8002950 <__libc_init_array+0x38>)
 800291e:	4c0d      	ldr	r4, [pc, #52]	; (8002954 <__libc_init_array+0x3c>)
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	42a6      	cmp	r6, r4
 8002926:	d109      	bne.n	800293c <__libc_init_array+0x24>
 8002928:	f000 f822 	bl	8002970 <_init>
 800292c:	2600      	movs	r6, #0
 800292e:	4d0a      	ldr	r5, [pc, #40]	; (8002958 <__libc_init_array+0x40>)
 8002930:	4c0a      	ldr	r4, [pc, #40]	; (800295c <__libc_init_array+0x44>)
 8002932:	1b64      	subs	r4, r4, r5
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	42a6      	cmp	r6, r4
 8002938:	d105      	bne.n	8002946 <__libc_init_array+0x2e>
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002940:	4798      	blx	r3
 8002942:	3601      	adds	r6, #1
 8002944:	e7ee      	b.n	8002924 <__libc_init_array+0xc>
 8002946:	f855 3b04 	ldr.w	r3, [r5], #4
 800294a:	4798      	blx	r3
 800294c:	3601      	adds	r6, #1
 800294e:	e7f2      	b.n	8002936 <__libc_init_array+0x1e>
 8002950:	080029b0 	.word	0x080029b0
 8002954:	080029b0 	.word	0x080029b0
 8002958:	080029b0 	.word	0x080029b0
 800295c:	080029b4 	.word	0x080029b4

08002960 <memset>:
 8002960:	4603      	mov	r3, r0
 8002962:	4402      	add	r2, r0
 8002964:	4293      	cmp	r3, r2
 8002966:	d100      	bne.n	800296a <memset+0xa>
 8002968:	4770      	bx	lr
 800296a:	f803 1b01 	strb.w	r1, [r3], #1
 800296e:	e7f9      	b.n	8002964 <memset+0x4>

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
