
IMU_Kalman_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008954  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008a68  08008a68  00018a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e74  08008e74  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  08008e74  08008e74  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e74  08008e74  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e74  08008e74  00018e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001f8  08009074  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08009074  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f484  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  0002f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000325e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018deb  00000000  00000000  00033440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb0e  00000000  00000000  0004c22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e638  00000000  00000000  0005bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005254  00000000  00000000  000ea3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a4c 	.word	0x08008a4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08008a4c 	.word	0x08008a4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f001 f90a 	bl	8002240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f842 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 fa3c 	bl	80014ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001034:	f000 f882 	bl	800113c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001038:	f000 f93e 	bl	80012b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800103c:	f000 f8ac 	bl	8001198 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001040:	f000 f986 	bl	8001350 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001044:	f000 fa08 	bl	8001458 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 8001048:	f000 fa9c 	bl	8001584 <MPU6050_Baslat>
  //Gyro kalibrasyon hatalarını hesapla.
  gyro_e_x = GyroErr(GYRO_X_ADDR);
 800104c:	2043      	movs	r0, #67	; 0x43
 800104e:	f000 faef 	bl	8001630 <GyroErr>
 8001052:	4603      	mov	r3, r0
 8001054:	4a11      	ldr	r2, [pc, #68]	; (800109c <main+0x78>)
 8001056:	6013      	str	r3, [r2, #0]

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <main+0x7c>)
 800105a:	f003 f8a5 	bl	80041a8 <HAL_TIM_Base_Start_IT>

  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800105e:	2100      	movs	r1, #0
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <main+0x80>)
 8001062:	f003 f943 	bl	80042ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001066:	2104      	movs	r1, #4
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <main+0x80>)
 800106a:	f003 f93f 	bl	80042ec <HAL_TIM_PWM_Start>

  //PWM Input Capture Kanalları
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800106e:	2104      	movs	r1, #4
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <main+0x84>)
 8001072:	f003 fa35 	bl	80044e0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001076:	2108      	movs	r1, #8
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0x84>)
 800107a:	f003 fa31 	bl	80044e0 <HAL_TIM_IC_Start_IT>

  MotorBaslat();
 800107e:	f000 fd24 	bl	8001aca <MotorBaslat>
  while (1)
  {

	 // sprintf(buf,"%.3f||%.3f \n\r",alpha,pitch_acc);
	 // HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 1000);
	  PWMYaz(pwm1, pwm2);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <main+0x88>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <main+0x8c>)
 8001088:	8812      	ldrh	r2, [r2, #0]
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fc43 	bl	8001918 <PWMYaz>
	  HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f001 f936 	bl	8002304 <HAL_Delay>
	  PWMYaz(pwm1, pwm2);
 8001098:	e7f3      	b.n	8001082 <main+0x5e>
 800109a:	bf00      	nop
 800109c:	200002f8 	.word	0x200002f8
 80010a0:	20000374 	.word	0x20000374
 80010a4:	20000300 	.word	0x20000300
 80010a8:	200002a0 	.word	0x200002a0
 80010ac:	20000224 	.word	0x20000224
 80010b0:	20000226 	.word	0x20000226

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b090      	sub	sp, #64	; 0x40
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	2228      	movs	r2, #40	; 0x28
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fcd8 	bl	8005a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e8:	2302      	movs	r3, #2
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80010f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fbe9 	bl	80038d4 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001108:	f000 fde6 	bl	8001cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2101      	movs	r1, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fe55 	bl	8003dd4 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001130:	f000 fdd2 	bl	8001cd8 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3740      	adds	r7, #64	; 0x40
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C1_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C1_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C1_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C1_Init+0x50>)
 800117a:	f001 fbab 	bl	80028d4 <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 fda8 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000234 	.word	0x20000234
 8001190:	40005400 	.word	0x40005400
 8001194:	00061a80 	.word	0x00061a80

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	; 0x48
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fc58 	bl	8005a78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c8:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011ca:	4a3a      	ldr	r2, [pc, #232]	; (80012b4 <MX_TIM1_Init+0x11c>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011d0:	221f      	movs	r2, #31
 80011d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f4:	482e      	ldr	r0, [pc, #184]	; (80012b0 <MX_TIM1_Init+0x118>)
 80011f6:	f003 f829 	bl	800424c <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001200:	f000 fd6a 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001210:	4619      	mov	r1, r3
 8001212:	4827      	ldr	r0, [pc, #156]	; (80012b0 <MX_TIM1_Init+0x118>)
 8001214:	f004 fa6a 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800121e:	f000 fd5b 	bl	8001cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	; 0x60
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	481a      	ldr	r0, [pc, #104]	; (80012b0 <MX_TIM1_Init+0x118>)
 8001248:	f003 fbec 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001252:	f000 fd41 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	2204      	movs	r2, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4814      	ldr	r0, [pc, #80]	; (80012b0 <MX_TIM1_Init+0x118>)
 8001260:	f003 fbe0 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800126a:	f000 fd35 	bl	8001cd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001286:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM1_Init+0x118>)
 8001292:	f004 fa89 	bl	80057a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800129c:	f000 fd1c 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM1_Init+0x118>)
 80012a2:	f000 fe27 	bl	8001ef4 <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3748      	adds	r7, #72	; 0x48
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000300 	.word	0x20000300
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	463b      	mov	r3, r7
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_TIM2_Init+0x94>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_TIM2_Init+0x94>)
 80012de:	221f      	movs	r2, #31
 80012e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_TIM2_Init+0x94>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_TIM2_Init+0x94>)
 80012ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_TIM2_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_TIM2_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_TIM2_Init+0x94>)
 80012fe:	f002 ff03 	bl	8004108 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001308:	f000 fce6 	bl	8001cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM2_Init+0x94>)
 800131a:	f003 fc41 	bl	8004ba0 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001324:	f000 fcd8 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM2_Init+0x94>)
 8001336:	f004 f9d9 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001340:	f000 fcca 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000374 	.word	0x20000374

08001350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <MX_TIM3_Init+0x100>)
 800137e:	4a35      	ldr	r2, [pc, #212]	; (8001454 <MX_TIM3_Init+0x104>)
 8001380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_TIM3_Init+0x100>)
 8001384:	221f      	movs	r2, #31
 8001386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_TIM3_Init+0x100>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_TIM3_Init+0x100>)
 8001390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001394:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_TIM3_Init+0x100>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <MX_TIM3_Init+0x100>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a2:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_TIM3_Init+0x100>)
 80013a4:	f002 feb0 	bl	8004108 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80013ae:	f000 fc93 	bl	8001cd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80013b2:	4827      	ldr	r0, [pc, #156]	; (8001450 <MX_TIM3_Init+0x100>)
 80013b4:	f003 f83c 	bl	8004430 <HAL_TIM_IC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80013be:	f000 fc8b 	bl	8001cd8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013c2:	2304      	movs	r3, #4
 80013c4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80013c6:	2360      	movs	r3, #96	; 0x60
 80013c8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <MX_TIM3_Init+0x100>)
 80013da:	f003 fca5 	bl	8004d28 <HAL_TIM_SlaveConfigSynchro>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013e4:	f000 fc78 	bl	8001cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <MX_TIM3_Init+0x100>)
 80013f8:	f004 f978 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001402:	f000 fc69 	bl	8001cd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800140a:	2301      	movs	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2204      	movs	r2, #4
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_TIM3_Init+0x100>)
 800141e:	f003 fa6d 	bl	80048fc <HAL_TIM_IC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001428:	f000 fc56 	bl	8001cd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800142c:	2302      	movs	r3, #2
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2208      	movs	r2, #8
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_TIM3_Init+0x100>)
 8001438:	f003 fa60 	bl	80048fc <HAL_TIM_IC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001442:	f000 fc49 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3730      	adds	r7, #48	; 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002a0 	.word	0x200002a0
 8001454:	40000400 	.word	0x40000400

08001458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <MX_USART2_UART_Init+0x50>)
 8001460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001490:	f004 f9ed 	bl	800586e <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800149a:	f000 fc1d 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200003bc 	.word	0x200003bc
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a26      	ldr	r2, [pc, #152]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014de:	f043 0320 	orr.w	r3, r3, #32
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_GPIO_Init+0xcc>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_GPIO_Init+0xcc>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <MX_GPIO_Init+0xcc>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_GPIO_Init+0xcc>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4815      	ldr	r0, [pc, #84]	; (800157c <MX_GPIO_Init+0xd0>)
 8001528:	f001 f9a2 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001532:	f001 f99d 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0xd0>)
 8001550:	f001 f80a 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001554:	2302      	movs	r3, #2
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2302      	movs	r3, #2
 8001562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_GPIO_Init+0xd4>)
 800156c:	f000 fffc 	bl	8002568 <HAL_GPIO_Init>

}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40011000 	.word	0x40011000
 8001580:	40010c00 	.word	0x40010c00

08001584 <MPU6050_Baslat>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 800158e:	2305      	movs	r3, #5
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	2301      	movs	r3, #1
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	226b      	movs	r2, #107	; 0x6b
 800159e:	21d0      	movs	r1, #208	; 0xd0
 80015a0:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MPU6050_Baslat+0x64>)
 80015a2:	f001 fadb 	bl	8002b5c <HAL_I2C_Mem_Write>
	config = 0x08;
 80015a6:	2308      	movs	r3, #8
 80015a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 500 d/s'ye ayarlandi.
 80015aa:	2305      	movs	r3, #5
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	221b      	movs	r2, #27
 80015ba:	21d0      	movs	r1, #208	; 0xd0
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <MPU6050_Baslat+0x64>)
 80015be:	f001 facd 	bl	8002b5c <HAL_I2C_Mem_Write>
	config = 0x10;
 80015c2:	2310      	movs	r3, #16
 80015c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80015c6:	2305      	movs	r3, #5
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	221c      	movs	r2, #28
 80015d6:	21d0      	movs	r1, #208	; 0xd0
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MPU6050_Baslat+0x64>)
 80015da:	f001 fabf 	bl	8002b5c <HAL_I2C_Mem_Write>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000234 	.word	0x20000234

080015ec <GyroOku>:

int16_t GyroOku (uint8_t addr) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	2301      	movs	r3, #1
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2302      	movs	r3, #2
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	21d1      	movs	r1, #209	; 0xd1
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <GyroOku+0x40>)
 800160e:	f001 fb9f 	bl	8002d50 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000234 	.word	0x20000234

08001630 <GyroErr>:

float GyroErr(uint8_t addr) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	float GyroXe=0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
	//2000 ornek al ve kayma degerini kaydet.
	for (int i=0; i<2000; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	e011      	b.n	800166a <GyroErr+0x3a>
	{
		GyroXe += (float)GyroOku(addr);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffcf 	bl	80015ec <GyroOku>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb23 	bl	8000c9c <__aeabi_i2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fa6a 	bl	8000b34 <__addsf3>
 8001660:	4603      	mov	r3, r0
 8001662:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001670:	dbe9      	blt.n	8001646 <GyroErr+0x16>

		} //Haberleşmeyi durdur.
	GyroXe=GyroXe/2000; //Son okunan değeri 2000'e böl.
 8001672:	4905      	ldr	r1, [pc, #20]	; (8001688 <GyroErr+0x58>)
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fc19 	bl	8000eac <__aeabi_fdiv>
 800167a:	4603      	mov	r3, r0
 800167c:	60fb      	str	r3, [r7, #12]
	return GyroXe;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	44fa0000 	.word	0x44fa0000

0800168c <Kalman_Filtresi>:

void Kalman_Filtresi(void) {
 800168c:	b598      	push	{r3, r4, r7, lr}
 800168e:	af00      	add	r7, sp, #0

	//**Tahmin**
	alpha = alpha - bias*st + gyroX*st;
 8001690:	4b8f      	ldr	r3, [pc, #572]	; (80018d0 <Kalman_Filtresi+0x244>)
 8001692:	681c      	ldr	r4, [r3, #0]
 8001694:	4b8f      	ldr	r3, [pc, #572]	; (80018d4 <Kalman_Filtresi+0x248>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a8f      	ldr	r2, [pc, #572]	; (80018d8 <Kalman_Filtresi+0x24c>)
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb51 	bl	8000d44 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fa42 	bl	8000b30 <__aeabi_fsub>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461c      	mov	r4, r3
 80016b0:	4b8a      	ldr	r3, [pc, #552]	; (80018dc <Kalman_Filtresi+0x250>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a88      	ldr	r2, [pc, #544]	; (80018d8 <Kalman_Filtresi+0x24c>)
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fb43 	bl	8000d44 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fa36 	bl	8000b34 <__addsf3>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <Kalman_Filtresi+0x244>)
 80016ce:	601a      	str	r2, [r3, #0]
	S11_m = 2*sa+st*st*sb; S12_m=-st*sb;
 80016d0:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <Kalman_Filtresi+0x254>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa2c 	bl	8000b34 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	461c      	mov	r4, r3
 80016e0:	4b7d      	ldr	r3, [pc, #500]	; (80018d8 <Kalman_Filtresi+0x24c>)
 80016e2:	4a7d      	ldr	r2, [pc, #500]	; (80018d8 <Kalman_Filtresi+0x24c>)
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fb2c 	bl	8000d44 <__aeabi_fmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <Kalman_Filtresi+0x258>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f7ff fb24 	bl	8000d44 <__aeabi_fmul>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4619      	mov	r1, r3
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fa17 	bl	8000b34 <__addsf3>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <Kalman_Filtresi+0x25c>)
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <Kalman_Filtresi+0x24c>)
 8001710:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001714:	4a73      	ldr	r2, [pc, #460]	; (80018e4 <Kalman_Filtresi+0x258>)
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fb12 	bl	8000d44 <__aeabi_fmul>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b71      	ldr	r3, [pc, #452]	; (80018ec <Kalman_Filtresi+0x260>)
 8001726:	601a      	str	r2, [r3, #0]
	S21_m = -st*sb; 	   S22_m=2*sb;
 8001728:	4b6b      	ldr	r3, [pc, #428]	; (80018d8 <Kalman_Filtresi+0x24c>)
 800172a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800172e:	4a6d      	ldr	r2, [pc, #436]	; (80018e4 <Kalman_Filtresi+0x258>)
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb05 	bl	8000d44 <__aeabi_fmul>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <Kalman_Filtresi+0x264>)
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <Kalman_Filtresi+0x258>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f9f3 	bl	8000b34 <__addsf3>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <Kalman_Filtresi+0x268>)
 8001754:	601a      	str	r2, [r3, #0]

	//**Düzeltme**
	Kt11 = S11_m / (S11_m+Q);
 8001756:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <Kalman_Filtresi+0x25c>)
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <Kalman_Filtresi+0x25c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a66      	ldr	r2, [pc, #408]	; (80018f8 <Kalman_Filtresi+0x26c>)
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f9e5 	bl	8000b34 <__addsf3>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff fb9c 	bl	8000eac <__aeabi_fdiv>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	4b60      	ldr	r3, [pc, #384]	; (80018fc <Kalman_Filtresi+0x270>)
 800177a:	601a      	str	r2, [r3, #0]
	Kt21 = S21_m / (S21_m+Q);
 800177c:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <Kalman_Filtresi+0x264>)
 800177e:	681c      	ldr	r4, [r3, #0]
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <Kalman_Filtresi+0x264>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5c      	ldr	r2, [pc, #368]	; (80018f8 <Kalman_Filtresi+0x26c>)
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f9d2 	bl	8000b34 <__addsf3>
 8001790:	4603      	mov	r3, r0
 8001792:	4619      	mov	r1, r3
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff fb89 	bl	8000eac <__aeabi_fdiv>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b58      	ldr	r3, [pc, #352]	; (8001900 <Kalman_Filtresi+0x274>)
 80017a0:	601a      	str	r2, [r3, #0]

	alpha = alpha - Kt11*(alpha-pitch_acc);
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <Kalman_Filtresi+0x244>)
 80017a4:	681c      	ldr	r4, [r3, #0]
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <Kalman_Filtresi+0x244>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a56      	ldr	r2, [pc, #344]	; (8001904 <Kalman_Filtresi+0x278>)
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f9bd 	bl	8000b30 <__aeabi_fsub>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b50      	ldr	r3, [pc, #320]	; (80018fc <Kalman_Filtresi+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f7ff fabf 	bl	8000d44 <__aeabi_fmul>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff f9b0 	bl	8000b30 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <Kalman_Filtresi+0x244>)
 80017d6:	601a      	str	r2, [r3, #0]
	bias = bias - Kt21*(alpha-pitch_acc);
 80017d8:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <Kalman_Filtresi+0x248>)
 80017da:	681c      	ldr	r4, [r3, #0]
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <Kalman_Filtresi+0x244>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a48      	ldr	r2, [pc, #288]	; (8001904 <Kalman_Filtresi+0x278>)
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9a2 	bl	8000b30 <__aeabi_fsub>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <Kalman_Filtresi+0x274>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7ff faa4 	bl	8000d44 <__aeabi_fmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4619      	mov	r1, r3
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff f995 	bl	8000b30 <__aeabi_fsub>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <Kalman_Filtresi+0x248>)
 800180c:	601a      	str	r2, [r3, #0]

	S11_p = -S11_m*(Kt11-1);  S12_p = -S12_m*(Kt11-1);
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <Kalman_Filtresi+0x25c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <Kalman_Filtresi+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f986 	bl	8000b30 <__aeabi_fsub>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fa8b 	bl	8000d44 <__aeabi_fmul>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <Kalman_Filtresi+0x27c>)
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <Kalman_Filtresi+0x260>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <Kalman_Filtresi+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f972 	bl	8000b30 <__aeabi_fsub>
 800184c:	4603      	mov	r3, r0
 800184e:	4619      	mov	r1, r3
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff fa77 	bl	8000d44 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <Kalman_Filtresi+0x280>)
 800185c:	601a      	str	r2, [r3, #0]
	S21_p = S21_m-S11_m*Kt21; S22_p = S22_m-S12_m*Kt21;
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <Kalman_Filtresi+0x264>)
 8001860:	681c      	ldr	r4, [r3, #0]
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <Kalman_Filtresi+0x25c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a26      	ldr	r2, [pc, #152]	; (8001900 <Kalman_Filtresi+0x274>)
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fa69 	bl	8000d44 <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff f95a 	bl	8000b30 <__aeabi_fsub>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <Kalman_Filtresi+0x284>)
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <Kalman_Filtresi+0x268>)
 8001886:	681c      	ldr	r4, [r3, #0]
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <Kalman_Filtresi+0x260>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <Kalman_Filtresi+0x274>)
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fa56 	bl	8000d44 <__aeabi_fmul>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff f947 	bl	8000b30 <__aeabi_fsub>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <Kalman_Filtresi+0x288>)
 80018a8:	601a      	str	r2, [r3, #0]

	S11_m = S11_p; S12_m = S12_p; S21_m = S21_p; S22_m = S22_p;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <Kalman_Filtresi+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <Kalman_Filtresi+0x25c>)
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <Kalman_Filtresi+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <Kalman_Filtresi+0x260>)
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <Kalman_Filtresi+0x284>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <Kalman_Filtresi+0x264>)
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <Kalman_Filtresi+0x288>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <Kalman_Filtresi+0x268>)
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	bd98      	pop	{r3, r4, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000428 	.word	0x20000428
 80018d4:	2000022c 	.word	0x2000022c
 80018d8:	3a83126f 	.word	0x3a83126f
 80018dc:	2000028c 	.word	0x2000028c
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004
 80018e8:	20000420 	.word	0x20000420
 80018ec:	200002e8 	.word	0x200002e8
 80018f0:	200002f4 	.word	0x200002f4
 80018f4:	2000042c 	.word	0x2000042c
 80018f8:	20000008 	.word	0x20000008
 80018fc:	200003fc 	.word	0x200003fc
 8001900:	20000230 	.word	0x20000230
 8001904:	20000414 	.word	0x20000414
 8001908:	2000041c 	.word	0x2000041c
 800190c:	20000294 	.word	0x20000294
 8001910:	20000290 	.word	0x20000290
 8001914:	2000029c 	.word	0x2000029c

08001918 <PWMYaz>:

void PWMYaz(uint16_t pwm1, uint16_t pwm2) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	460a      	mov	r2, r1
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	4613      	mov	r3, r2
 8001926:	80bb      	strh	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm1);
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <PWMYaz+0x2c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pwm2);
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <PWMYaz+0x2c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	88ba      	ldrh	r2, [r7, #4]
 8001936:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000300 	.word	0x20000300

08001948 <PD>:

void PD(float alpha_des, float alpha) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	float P, D, pd,de;
	e_eski = e;
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <PD+0xd0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <PD+0xd4>)
 8001958:	6013      	str	r3, [r2, #0]
	e = alpha_des - alpha;
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff f8e7 	bl	8000b30 <__aeabi_fsub>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <PD+0xd0>)
 8001968:	601a      	str	r2, [r3, #0]
	de = e - e_eski;
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <PD+0xd0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <PD+0xd4>)
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f8db 	bl	8000b30 <__aeabi_fsub>
 800197a:	4603      	mov	r3, r0
 800197c:	617b      	str	r3, [r7, #20]
	P = Kp*e; D = Kd*de;
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <PD+0xd8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a25      	ldr	r2, [pc, #148]	; (8001a18 <PD+0xd0>)
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f9db 	bl	8000d44 <__aeabi_fmul>
 800198e:	4603      	mov	r3, r0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <PD+0xdc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f7ff f9d3 	bl	8000d44 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	60fb      	str	r3, [r7, #12]
	pd = P + D;
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	6938      	ldr	r0, [r7, #16]
 80019a6:	f7ff f8c5 	bl	8000b34 <__addsf3>
 80019aa:	4603      	mov	r3, r0
 80019ac:	60bb      	str	r3, [r7, #8]
	pwm1 = Sat((uint16_t)(pwm_mid + pd)+150);
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <PD+0xe0>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f972 	bl	8000c9c <__aeabi_i2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff f8b9 	bl	8000b34 <__addsf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb0d 	bl	8000fe4 <__aeabi_f2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3396      	adds	r3, #150	; 0x96
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f82e 	bl	8001a34 <Sat>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <PD+0xe4>)
 80019de:	801a      	strh	r2, [r3, #0]
	pwm2 = Sat((uint16_t)(pwm_mid - pd));
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <PD+0xe0>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f959 	bl	8000c9c <__aeabi_i2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f89e 	bl	8000b30 <__aeabi_fsub>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff faf4 	bl	8000fe4 <__aeabi_f2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f817 	bl	8001a34 <Sat>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <PD+0xe8>)
 8001a0c:	801a      	strh	r2, [r3, #0]

}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000040c 	.word	0x2000040c
 8001a1c:	20000400 	.word	0x20000400
 8001a20:	2000000c 	.word	0x2000000c
 8001a24:	20000010 	.word	0x20000010
 8001a28:	20000014 	.word	0x20000014
 8001a2c:	20000224 	.word	0x20000224
 8001a30:	20000226 	.word	0x20000226

08001a34 <Sat>:

uint16_t Sat(uint16_t pwm) {
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_out;
	if(pwm > PWM_UPPER) {
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001a44:	d903      	bls.n	8001a4e <Sat+0x1a>
		pwm_out = PWM_UPPER;
 8001a46:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001a4a:	81fb      	strh	r3, [r7, #14]
 8001a4c:	e00a      	b.n	8001a64 <Sat+0x30>
	}

	else if (pwm < PWM_LOWER) {
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f240 4219 	movw	r2, #1049	; 0x419
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d803      	bhi.n	8001a60 <Sat+0x2c>
		pwm_out = PWM_LOWER;
 8001a58:	f240 431a 	movw	r3, #1050	; 0x41a
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	e001      	b.n	8001a64 <Sat+0x30>
	}

	else {
		pwm_out = pwm;
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	81fb      	strh	r3, [r7, #14]
	}

	return pwm_out;
 8001a64:	89fb      	ldrh	r3, [r7, #14]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <pwm2ang>:

float pwm2ang(uint16_t pwm) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
	int16_t in_min  = 1000;
 8001a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7e:	81fb      	strh	r3, [r7, #14]
	int16_t in_max  = 2000;
 8001a80:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a84:	81bb      	strh	r3, [r7, #12]
	int16_t out_min = -30;
 8001a86:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8001a8a:	817b      	strh	r3, [r7, #10]
	int16_t out_max  = 30;
 8001a8c:	231e      	movs	r3, #30
 8001a8e:	813b      	strh	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a9c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001aa0:	1a8a      	subs	r2, r1, r2
 8001aa2:	fb02 f203 	mul.w	r2, r2, r3
 8001aa6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aae:	1acb      	subs	r3, r1, r3
 8001ab0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ab4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f8ee 	bl	8000c9c <__aeabi_i2f>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <MotorBaslat>:

void MotorBaslat(void) {
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
	PWMYaz(1000,1000);
 8001ace:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad6:	f7ff ff1f 	bl	8001918 <PWMYaz>
	HAL_Delay(1000);
 8001ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ade:	f000 fc11 	bl	8002304 <HAL_Delay>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f040 809f 	bne.w	8001c38 <HAL_TIM_PeriodElapsedCallback+0x150>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5;
 8001afa:	2043      	movs	r0, #67	; 0x43
 8001afc:	f7ff fd76 	bl	80015ec <GyroOku>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fc7e 	bl	8000404 <__aeabi_i2d>
 8001b08:	a34d      	add	r3, pc, #308	; (adr r3, 8001c40 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fe0d 	bl	800072c <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe ffb5 	bl	8000a88 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a4c      	ldr	r2, [pc, #304]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b22:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001b24:	203b      	movs	r0, #59	; 0x3b
 8001b26:	f7ff fd61 	bl	80015ec <GyroOku>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f8b5 	bl	8000c9c <__aeabi_i2f>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a48      	ldr	r2, [pc, #288]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b36:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001b38:	203d      	movs	r0, #61	; 0x3d
 8001b3a:	f7ff fd57 	bl	80015ec <GyroOku>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f8ab 	bl	8000c9c <__aeabi_i2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b4a:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001b4c:	203f      	movs	r0, #63	; 0x3f
 8001b4e:	f7ff fd4d 	bl	80015ec <GyroOku>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f8a1 	bl	8000c9c <__aeabi_i2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b5e:	6013      	str	r3, [r2, #0]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001b60:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3c      	ldr	r2, [pc, #240]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f8ea 	bl	8000d44 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461c      	mov	r4, r3
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8e0 	bl	8000d44 <__aeabi_fmul>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4619      	mov	r1, r3
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7fe ffd3 	bl	8000b34 <__addsf3>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461c      	mov	r4, r3
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f8d1 	bl	8000d44 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7fe ffc4 	bl	8000b34 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc3a 	bl	8000428 <__aeabi_f2d>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f006 fc68 	bl	8008490 <sqrt>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff5e 	bl	8000a88 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f968 	bl	8000eac <__aeabi_fdiv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fc22 	bl	8000428 <__aeabi_f2d>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f006 fc22 	bl	8008434 <asin>
 8001bf0:	a315      	add	r3, pc, #84	; (adr r3, 8001c48 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fc6f 	bl	80004d8 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ff41 	bl	8000a88 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c0a:	6013      	str	r3, [r2, #0]

		  Kalman_Filtresi();
 8001c0c:	f7ff fd3e 	bl	800168c <Kalman_Filtresi>
		  alpha_des = pwm2ang(pwm_input);
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff2b 	bl	8001a70 <pwm2ang>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c1e:	6013      	str	r3, [r2, #0]
		 // alpha_des = 0;
		  PD(alpha_des,alpha);
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe8c 	bl	8001948 <PD>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001c30:	2102      	movs	r1, #2
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001c34:	f000 fe34 	bl	80028a0 <HAL_GPIO_TogglePin>

	}
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40506000 	.word	0x40506000
 8001c48:	d4fdf3b6 	.word	0xd4fdf3b6
 8001c4c:	404ca978 	.word	0x404ca978
 8001c50:	20000374 	.word	0x20000374
 8001c54:	2000028c 	.word	0x2000028c
 8001c58:	20000424 	.word	0x20000424
 8001c5c:	20000410 	.word	0x20000410
 8001c60:	20000298 	.word	0x20000298
 8001c64:	20000414 	.word	0x20000414
 8001c68:	20000418 	.word	0x20000418
 8001c6c:	20000408 	.word	0x20000408
 8001c70:	20000428 	.word	0x20000428
 8001c74:	40010c00 	.word	0x40010c00

08001c78 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x48>

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { //Yükselen kanal
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7f1b      	ldrb	r3, [r3, #28]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d117      	bne.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x48>
		IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c90:	2104      	movs	r1, #4
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f003 f88a 	bl	8004dac <HAL_TIM_ReadCapturedValue>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x54>)
 8001c9e:	801a      	strh	r2, [r3, #0]

		if(IC_val1 != 0) { //alçalan kanal
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x54>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x48>
			IC_val2  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001ca8:	2108      	movs	r1, #8
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f003 f87e 	bl	8004dac <HAL_TIM_ReadCapturedValue>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001cb6:	801a      	strh	r2, [r3, #0]
			pwm_input = IC_val2;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001cba:	881a      	ldrh	r2, [r3, #0]
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001cbe:	801a      	strh	r2, [r3, #0]
		}
	}

}

}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200002a0 	.word	0x200002a0
 8001ccc:	200002fc 	.word	0x200002fc
 8001cd0:	2000034c 	.word	0x2000034c
 8001cd4:	20000418 	.word	0x20000418

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_MspInit+0x5c>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x5c>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_MspInit+0x60>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_MspInit+0x60>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <HAL_I2C_MspInit+0x70>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d123      	bne.n	8001db0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d84:	2312      	movs	r3, #18
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <HAL_I2C_MspInit+0x78>)
 8001d94:	f000 fbe8 	bl	8002568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da2:	61d3      	str	r3, [r2, #28]
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_I2C_MspInit+0x74>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10b      	bne.n	8001dee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_TIM_PWM_MspInit+0x38>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_TIM_PWM_MspInit+0x38>)
 8001ddc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de0:	6193      	str	r3, [r2, #24]
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_TIM_PWM_MspInit+0x38>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40012c00 	.word	0x40012c00
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1e:	d114      	bne.n	8001e4a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	61d3      	str	r3, [r2, #28]
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	201c      	movs	r0, #28
 8001e3e:	f000 fb5c 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e42:	201c      	movs	r0, #28
 8001e44:	f000 fb75 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e48:	e048      	b.n	8001edc <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <HAL_TIM_Base_MspInit+0xe8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d143      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	61d3      	str	r3, [r2, #28]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_TIM_Base_MspInit+0xe4>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	4619      	mov	r1, r3
 8001eae:	480f      	ldr	r0, [pc, #60]	; (8001eec <HAL_TIM_Base_MspInit+0xec>)
 8001eb0:	f000 fb5a 	bl	8002568 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0318 	add.w	r3, r7, #24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <HAL_TIM_Base_MspInit+0xf0>)
 8001ec8:	f000 fb4e 	bl	8002568 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	201d      	movs	r0, #29
 8001ed2:	f000 fb12 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed6:	201d      	movs	r0, #29
 8001ed8:	f000 fb2b 	bl	8002532 <HAL_NVIC_EnableIRQ>
}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_MspPostInit+0x5c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d118      	bne.n	8001f46 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_TIM_MspPostInit+0x60>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_TIM_MspPostInit+0x60>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_TIM_MspPostInit+0x60>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <HAL_TIM_MspPostInit+0x64>)
 8001f42:	f000 fb11 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f46:	bf00      	nop
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010800 	.word	0x40010800

08001f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d12f      	bne.n	8001fdc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f86:	61d3      	str	r3, [r2, #28]
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fac:	2304      	movs	r3, #4
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <HAL_UART_MspInit+0x90>)
 8001fc0:	f000 fad2 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_UART_MspInit+0x90>)
 8001fd8:	f000 fac6 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010800 	.word	0x40010800

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002036:	f000 f949 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <TIM2_IRQHandler+0x10>)
 8002046:	f002 fb51 	bl	80046ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000374 	.word	0x20000374

08002054 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <TIM3_IRQHandler+0x10>)
 800205a:	f002 fb47 	bl	80046ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200002a0 	.word	0x200002a0

08002068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
	return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <_kill>:

int _kill(int pid, int sig)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002080:	f003 fcd0 	bl	8005a24 <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	2216      	movs	r2, #22
 8002088:	601a      	str	r2, [r3, #0]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_exit>:

void _exit (int status)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800209e:	f04f 31ff 	mov.w	r1, #4294967295
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffe7 	bl	8002076 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a8:	e7fe      	b.n	80020a8 <_exit+0x12>

080020aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e00a      	b.n	80020d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020bc:	f3af 8000 	nop.w
 80020c0:	4601      	mov	r1, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	b2ca      	uxtb	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbf0      	blt.n	80020bc <_read+0x12>
	}

return len;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e009      	b.n	800210a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	60ba      	str	r2, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	429a      	cmp	r2, r3
 8002110:	dbf1      	blt.n	80020f6 <_write+0x12>
	}
	return len;
 8002112:	687b      	ldr	r3, [r7, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_close>:

int _close(int file)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	605a      	str	r2, [r3, #4]
	return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <_isatty>:

int _isatty(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
	return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <_sbrk+0x5c>)
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <_sbrk+0x60>)
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <_sbrk+0x64>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <_sbrk+0x68>)
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <_sbrk+0x64>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d207      	bcs.n	80021bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ac:	f003 fc3a 	bl	8005a24 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	220c      	movs	r2, #12
 80021b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ba:	e009      	b.n	80021d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <_sbrk+0x64>)
 80021cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20005000 	.word	0x20005000
 80021dc:	00000400 	.word	0x00000400
 80021e0:	20000214 	.word	0x20000214
 80021e4:	20000448 	.word	0x20000448

080021e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021f6:	e003      	b.n	8002200 <LoopCopyDataInit>

080021f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021fe:	3104      	adds	r1, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002200:	480a      	ldr	r0, [pc, #40]	; (800222c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002204:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002206:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002208:	d3f6      	bcc.n	80021f8 <CopyDataInit>
  ldr r2, =_sbss
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800220c:	e002      	b.n	8002214 <LoopFillZerobss>

0800220e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800220e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002210:	f842 3b04 	str.w	r3, [r2], #4

08002214 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002216:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002218:	d3f9      	bcc.n	800220e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800221a:	f7ff ffe5 	bl	80021e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800221e:	f003 fc07 	bl	8005a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002222:	f7fe feff 	bl	8001024 <main>
  bx lr
 8002226:	4770      	bx	lr
  ldr r3, =_sidata
 8002228:	08008e7c 	.word	0x08008e7c
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002230:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 8002234:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002238:	20000444 	.word	0x20000444

0800223c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800223c:	e7fe      	b.n	800223c <ADC1_2_IRQHandler>
	...

08002240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_Init+0x28>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_Init+0x28>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f947 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f808 	bl	800226c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225c:	f7ff fd42 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x54>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x58>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	fbb3 f3f1 	udiv	r3, r3, r1
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f95f 	bl	800254e <HAL_SYSTICK_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e00e      	b.n	80022b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b0f      	cmp	r3, #15
 800229e:	d80a      	bhi.n	80022b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a0:	2200      	movs	r2, #0
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f000 f927 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ac:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_InitTick+0x5c>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000018 	.word	0x20000018
 80022c4:	20000020 	.word	0x20000020
 80022c8:	2000001c 	.word	0x2000001c

080022cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_IncTick+0x1c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_IncTick+0x20>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a03      	ldr	r2, [pc, #12]	; (80022ec <HAL_IncTick+0x20>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000020 	.word	0x20000020
 80022ec:	20000430 	.word	0x20000430

080022f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <HAL_GetTick+0x10>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000430 	.word	0x20000430

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff fff0 	bl	80022f0 <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffe0 	bl	80022f0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000020 	.word	0x20000020

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	bc80      	pop	{r7}
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4906      	ldr	r1, [pc, #24]	; (80023e4 <__NVIC_EnableIRQ+0x34>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff90 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff2d 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff42 	bl	8002394 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff90 	bl	800243c <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5f 	bl	80023e8 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff35 	bl	80023b0 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b08b      	sub	sp, #44	; 0x2c
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257a:	e169      	b.n	8002850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800257c:	2201      	movs	r2, #1
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 8158 	bne.w	800284a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a9a      	ldr	r2, [pc, #616]	; (8002808 <HAL_GPIO_Init+0x2a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d05e      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025a4:	4a98      	ldr	r2, [pc, #608]	; (8002808 <HAL_GPIO_Init+0x2a0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d875      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025aa:	4a98      	ldr	r2, [pc, #608]	; (800280c <HAL_GPIO_Init+0x2a4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d058      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025b0:	4a96      	ldr	r2, [pc, #600]	; (800280c <HAL_GPIO_Init+0x2a4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d86f      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025b6:	4a96      	ldr	r2, [pc, #600]	; (8002810 <HAL_GPIO_Init+0x2a8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d052      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025bc:	4a94      	ldr	r2, [pc, #592]	; (8002810 <HAL_GPIO_Init+0x2a8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d869      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025c2:	4a94      	ldr	r2, [pc, #592]	; (8002814 <HAL_GPIO_Init+0x2ac>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d04c      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025c8:	4a92      	ldr	r2, [pc, #584]	; (8002814 <HAL_GPIO_Init+0x2ac>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d863      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025ce:	4a92      	ldr	r2, [pc, #584]	; (8002818 <HAL_GPIO_Init+0x2b0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d046      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
 80025d4:	4a90      	ldr	r2, [pc, #576]	; (8002818 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d85d      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025da:	2b12      	cmp	r3, #18
 80025dc:	d82a      	bhi.n	8002634 <HAL_GPIO_Init+0xcc>
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d859      	bhi.n	8002696 <HAL_GPIO_Init+0x12e>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_GPIO_Init+0x80>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	08002663 	.word	0x08002663
 80025ec:	0800263d 	.word	0x0800263d
 80025f0:	0800264f 	.word	0x0800264f
 80025f4:	08002691 	.word	0x08002691
 80025f8:	08002697 	.word	0x08002697
 80025fc:	08002697 	.word	0x08002697
 8002600:	08002697 	.word	0x08002697
 8002604:	08002697 	.word	0x08002697
 8002608:	08002697 	.word	0x08002697
 800260c:	08002697 	.word	0x08002697
 8002610:	08002697 	.word	0x08002697
 8002614:	08002697 	.word	0x08002697
 8002618:	08002697 	.word	0x08002697
 800261c:	08002697 	.word	0x08002697
 8002620:	08002697 	.word	0x08002697
 8002624:	08002697 	.word	0x08002697
 8002628:	08002697 	.word	0x08002697
 800262c:	08002645 	.word	0x08002645
 8002630:	08002659 	.word	0x08002659
 8002634:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_GPIO_Init+0x2b4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800263a:	e02c      	b.n	8002696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	623b      	str	r3, [r7, #32]
          break;
 8002642:	e029      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	3304      	adds	r3, #4
 800264a:	623b      	str	r3, [r7, #32]
          break;
 800264c:	e024      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	3308      	adds	r3, #8
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e01f      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	330c      	adds	r3, #12
 800265e:	623b      	str	r3, [r7, #32]
          break;
 8002660:	e01a      	b.n	8002698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800266a:	2304      	movs	r3, #4
 800266c:	623b      	str	r3, [r7, #32]
          break;
 800266e:	e013      	b.n	8002698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	611a      	str	r2, [r3, #16]
          break;
 8002682:	e009      	b.n	8002698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002684:	2308      	movs	r3, #8
 8002686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	615a      	str	r2, [r3, #20]
          break;
 800268e:	e003      	b.n	8002698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
          break;
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x130>
          break;
 8002696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	d801      	bhi.n	80026a2 <HAL_GPIO_Init+0x13a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	e001      	b.n	80026a6 <HAL_GPIO_Init+0x13e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d802      	bhi.n	80026b4 <HAL_GPIO_Init+0x14c>
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x152>
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3b08      	subs	r3, #8
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	210f      	movs	r1, #15
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80b1 	beq.w	800284a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026e8:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_GPIO_Init+0x2b8>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_GPIO_Init+0x2c0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_GPIO_Init+0x1ec>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a3f      	ldr	r2, [pc, #252]	; (800282c <HAL_GPIO_Init+0x2c4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00d      	beq.n	8002750 <HAL_GPIO_Init+0x1e8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3e      	ldr	r2, [pc, #248]	; (8002830 <HAL_GPIO_Init+0x2c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d007      	beq.n	800274c <HAL_GPIO_Init+0x1e4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <HAL_GPIO_Init+0x2cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_GPIO_Init+0x1e0>
 8002744:	2303      	movs	r3, #3
 8002746:	e006      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002748:	2304      	movs	r3, #4
 800274a:	e004      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 800274c:	2302      	movs	r3, #2
 800274e:	e002      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002754:	2300      	movs	r3, #0
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	f002 0203 	and.w	r2, r2, #3
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	4093      	lsls	r3, r2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002766:	492f      	ldr	r1, [pc, #188]	; (8002824 <HAL_GPIO_Init+0x2bc>)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	492c      	ldr	r1, [pc, #176]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	4928      	ldr	r1, [pc, #160]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027a8:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4922      	ldr	r1, [pc, #136]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	491e      	ldr	r1, [pc, #120]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4918      	ldr	r1, [pc, #96]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	608b      	str	r3, [r1, #8]
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	4914      	ldr	r1, [pc, #80]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d021      	beq.n	800283c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
 8002804:	e021      	b.n	800284a <HAL_GPIO_Init+0x2e2>
 8002806:	bf00      	nop
 8002808:	10320000 	.word	0x10320000
 800280c:	10310000 	.word	0x10310000
 8002810:	10220000 	.word	0x10220000
 8002814:	10210000 	.word	0x10210000
 8002818:	10120000 	.word	0x10120000
 800281c:	10110000 	.word	0x10110000
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	40010800 	.word	0x40010800
 800282c:	40010c00 	.word	0x40010c00
 8002830:	40011000 	.word	0x40011000
 8002834:	40011400 	.word	0x40011400
 8002838:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_GPIO_Init+0x304>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	43db      	mvns	r3, r3
 8002844:	4909      	ldr	r1, [pc, #36]	; (800286c <HAL_GPIO_Init+0x304>)
 8002846:	4013      	ands	r3, r2
 8002848:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3301      	adds	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f ae8e 	bne.w	800257c <HAL_GPIO_Init+0x14>
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	372c      	adds	r7, #44	; 0x2c
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40010400 	.word	0x40010400

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43d9      	mvns	r1, r3
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	400b      	ands	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e12b      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fa24 	bl	8001d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002938:	f001 fba0 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a81      	ldr	r2, [pc, #516]	; (8002b48 <HAL_I2C_Init+0x274>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d807      	bhi.n	8002958 <HAL_I2C_Init+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <HAL_I2C_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e006      	b.n	8002966 <HAL_I2C_Init+0x92>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <HAL_I2C_Init+0x27c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e7      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_I2C_Init+0x280>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_I2C_Init+0x274>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d802      	bhi.n	80029a8 <HAL_I2C_Init+0xd4>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	e009      	b.n	80029bc <HAL_I2C_Init+0xe8>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_I2C_Init+0x284>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	495c      	ldr	r1, [pc, #368]	; (8002b48 <HAL_I2C_Init+0x274>)
 80029d8:	428b      	cmp	r3, r1
 80029da:	d819      	bhi.n	8002a10 <HAL_I2C_Init+0x13c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e59      	subs	r1, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f0:	400b      	ands	r3, r1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_I2C_Init+0x138>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e59      	subs	r1, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	e051      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e04f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d111      	bne.n	8002a3c <HAL_I2C_Init+0x168>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e012      	b.n	8002a62 <HAL_I2C_Init+0x18e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x196>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <HAL_I2C_Init+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e58      	subs	r0, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	440b      	add	r3, r1
 8002a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6911      	ldr	r1, [r2, #16]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	000186a0 	.word	0x000186a0
 8002b4c:	001e847f 	.word	0x001e847f
 8002b50:	003d08ff 	.word	0x003d08ff
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	813b      	strh	r3, [r7, #8]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b76:	f7ff fbbb 	bl	80022f0 <HAL_GetTick>
 8002b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	f040 80d9 	bne.w	8002d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2319      	movs	r3, #25
 8002b90:	2201      	movs	r2, #1
 8002b92:	496d      	ldr	r1, [pc, #436]	; (8002d48 <HAL_I2C_Mem_Write+0x1ec>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fcc1 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0cc      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Mem_Write+0x56>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0c5      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d007      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2221      	movs	r2, #33	; 0x21
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_I2C_Mem_Write+0x1f0>)
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1a:	88f8      	ldrh	r0, [r7, #6]
 8002c1c:	893a      	ldrh	r2, [r7, #8]
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4603      	mov	r3, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 faf8 	bl	8003220 <I2C_RequestMemoryWrite>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d052      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e081      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fd42 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06b      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11b      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x180>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1aa      	bne.n	8002c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fd2e 	bl	800374a <I2C_WaitOnBTFFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d107      	bne.n	8002d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e016      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	00100002 	.word	0x00100002
 8002d4c:	ffff0000 	.word	0xffff0000

08002d50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6e:	f7ff fabf 	bl	80022f0 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	f040 8244 	bne.w	800320a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2319      	movs	r3, #25
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4982      	ldr	r1, [pc, #520]	; (8002f94 <HAL_I2C_Mem_Read+0x244>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fbc5 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e237      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Mem_Read+0x5a>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e230      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2222      	movs	r2, #34	; 0x22
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a62      	ldr	r2, [pc, #392]	; (8002f98 <HAL_I2C_Mem_Read+0x248>)
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e12:	88f8      	ldrh	r0, [r7, #6]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fa92 	bl	800334c <I2C_RequestMemoryRead>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1ec      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d113      	bne.n	8002e62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e1c0      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d11e      	bne.n	8002ea8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e7a:	b672      	cpsid	i
}
 8002e7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ea4:	b662      	cpsie	i
}
 8002ea6:	e035      	b.n	8002f14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11e      	bne.n	8002eee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec0:	b672      	cpsid	i
}
 8002ec2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eea:	b662      	cpsie	i
}
 8002eec:	e012      	b.n	8002f14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002efc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f14:	e166      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	f200 811f 	bhi.w	800315e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d123      	bne.n	8002f70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fc4d 	bl	80037cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e167      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f6e:	e139      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d152      	bne.n	800301e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4906      	ldr	r1, [pc, #24]	; (8002f9c <HAL_I2C_Mem_Read+0x24c>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 faca 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e13c      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
 8002f92:	bf00      	nop
 8002f94:	00100002 	.word	0x00100002
 8002f98:	ffff0000 	.word	0xffff0000
 8002f9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fe6:	b662      	cpsie	i
}
 8002fe8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800301c:	e0e2      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2200      	movs	r2, #0
 8003026:	497b      	ldr	r1, [pc, #492]	; (8003214 <HAL_I2C_Mem_Read+0x4c4>)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fa77 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0e9      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003046:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003048:	b672      	cpsid	i
}
 800304a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800307e:	4b66      	ldr	r3, [pc, #408]	; (8003218 <HAL_I2C_Mem_Read+0x4c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	4a65      	ldr	r2, [pc, #404]	; (800321c <HAL_I2C_Mem_Read+0x4cc>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a1a      	lsrs	r2, r3, #8
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00da      	lsls	r2, r3, #3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	3b01      	subs	r3, #1
 800309c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d118      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030c6:	b662      	cpsie	i
}
 80030c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e09a      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d1d9      	bne.n	8003098 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003126:	b662      	cpsie	i
}
 8003128:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800315c:	e042      	b.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fb32 	bl	80037cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e04c      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d118      	bne.n	80031e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f47f ae94 	bne.w	8002f16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3728      	adds	r7, #40	; 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	00010004 	.word	0x00010004
 8003218:	20000018 	.word	0x20000018
 800321c:	14f8b589 	.word	0x14f8b589

08003220 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	2200      	movs	r2, #0
 8003252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f960 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003270:	d103      	bne.n	800327a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e05f      	b.n	800333e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800328c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	492d      	ldr	r1, [pc, #180]	; (8003348 <I2C_RequestMemoryWrite+0x128>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f998 	bl	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04c      	b.n	800333e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032bc:	6a39      	ldr	r1, [r7, #32]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fa02 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00d      	beq.n	80032e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d107      	bne.n	80032e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02b      	b.n	800333e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ec:	893b      	ldrh	r3, [r7, #8]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	611a      	str	r2, [r3, #16]
 80032f6:	e021      	b.n	800333c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032f8:	893b      	ldrh	r3, [r7, #8]
 80032fa:	0a1b      	lsrs	r3, r3, #8
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f9dc 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e005      	b.n	800333e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	00010002 	.word	0x00010002

0800334c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2200      	movs	r2, #0
 800338e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8c2 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ac:	d103      	bne.n	80033b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0aa      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	4952      	ldr	r1, [pc, #328]	; (8003518 <I2C_RequestMemoryRead+0x1cc>)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f8fa 	bl	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e097      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	6a39      	ldr	r1, [r7, #32]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f964 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b04      	cmp	r3, #4
 800340c:	d107      	bne.n	800341e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e076      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	e021      	b.n	8003478 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b29b      	uxth	r3, r3
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	6a39      	ldr	r1, [r7, #32]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f93e 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b04      	cmp	r3, #4
 8003458:	d107      	bne.n	800346a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e050      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	6a39      	ldr	r1, [r7, #32]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f923 	bl	80036c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	2b04      	cmp	r3, #4
 800348e:	d107      	bne.n	80034a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e035      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f82b 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034da:	d103      	bne.n	80034e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e013      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	4906      	ldr	r1, [pc, #24]	; (8003518 <I2C_RequestMemoryRead+0x1cc>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f863 	bl	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010002 	.word	0x00010002

0800351c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352c:	e025      	b.n	800357a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d021      	beq.n	800357a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fedb 	bl	80022f0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e023      	b.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10d      	bne.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4013      	ands	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	e00c      	b.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d0b6      	beq.n	800352e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d8:	e051      	b.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d123      	bne.n	8003632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003602:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e046      	b.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d021      	beq.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fe fe59 	bl	80022f0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d116      	bne.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e020      	b.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d10c      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	43da      	mvns	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e00b      	b.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d18d      	bne.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d4:	e02d      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8ce 	bl	8003878 <I2C_IsAcknowledgeFailed>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e02d      	b.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d021      	beq.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fe fdff 	bl	80022f0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e007      	b.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b80      	cmp	r3, #128	; 0x80
 800373e:	d1ca      	bne.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003756:	e02d      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f88d 	bl	8003878 <I2C_IsAcknowledgeFailed>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e02d      	b.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d021      	beq.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003770:	f7fe fdbe 	bl	80022f0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e007      	b.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d1ca      	bne.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d8:	e042      	b.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d119      	bne.n	800381c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0210 	mvn.w	r2, #16
 80037f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e029      	b.n	8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381c:	f7fe fd68 	bl	80022f0 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d1b5      	bne.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388e:	d11b      	bne.n	80038c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e26c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8087 	beq.w	8003a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f4:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d00c      	beq.n	800391a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003900:	4b8f      	ldr	r3, [pc, #572]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d112      	bne.n	8003932 <HAL_RCC_OscConfig+0x5e>
 800390c:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d10b      	bne.n	8003932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391a:	4b89      	ldr	r3, [pc, #548]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d06c      	beq.n	8003a00 <HAL_RCC_OscConfig+0x12c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d168      	bne.n	8003a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e246      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393a:	d106      	bne.n	800394a <HAL_RCC_OscConfig+0x76>
 800393c:	4b80      	ldr	r3, [pc, #512]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7f      	ldr	r2, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e02e      	b.n	80039a8 <HAL_RCC_OscConfig+0xd4>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0x98>
 8003952:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a77      	ldr	r2, [pc, #476]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xd4>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0xbc>
 8003976:	4b72      	ldr	r3, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a71      	ldr	r2, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xd4>
 8003990:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6a      	ldr	r2, [pc, #424]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a67      	ldr	r2, [pc, #412]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fe fc9e 	bl	80022f0 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe fc9a 	bl	80022f0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1fa      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xe4>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe fc8a 	bl	80022f0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fe fc86 	bl	80022f0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1e6      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x10c>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0e:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a1a:	4b49      	ldr	r3, [pc, #292]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x18c>
 8003a26:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x176>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1ba      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4939      	ldr	r1, [pc, #228]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fe fc3f 	bl	80022f0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fe fc3b 	bl	80022f0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e19b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4927      	ldr	r1, [pc, #156]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fc1e 	bl	80022f0 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fc1a 	bl	80022f0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e17a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d03a      	beq.n	8003b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d019      	beq.n	8003b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fbfe 	bl	80022f0 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fbfa 	bl	80022f0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e15a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b16:	2001      	movs	r0, #1
 8003b18:	f000 fad8 	bl	80040cc <RCC_Delay>
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe fbe4 	bl	80022f0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fbe0 	bl	80022f0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d908      	bls.n	8003b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e140      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	42420000 	.word	0x42420000
 8003b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e9      	bne.n	8003b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a6 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b97      	ldr	r3, [pc, #604]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b94      	ldr	r3, [pc, #592]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a93      	ldr	r2, [pc, #588]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]
 8003b82:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a8a      	ldr	r2, [pc, #552]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fba1 	bl	80022f0 <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7fe fb9d 	bl	80022f0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b64      	cmp	r3, #100	; 0x64
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0fd      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x312>
 8003bd8:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a7a      	ldr	r2, [pc, #488]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	e02d      	b.n	8003c42 <HAL_RCC_OscConfig+0x36e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x334>
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a72      	ldr	r2, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x36e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x356>
 8003c10:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a6c      	ldr	r2, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a69      	ldr	r2, [pc, #420]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6213      	str	r3, [r2, #32]
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x36e>
 8003c2a:	4b67      	ldr	r3, [pc, #412]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6213      	str	r3, [r2, #32]
 8003c36:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4a63      	ldr	r2, [pc, #396]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fb51 	bl	80022f0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fe fb4d 	bl	80022f0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0ab      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x37e>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fe fb3b 	bl	80022f0 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe fb37 	bl	80022f0 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e095      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8081 	beq.w	8003dbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbc:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d061      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d146      	bne.n	8003d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x4fc>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fe fb0b 	bl	80022f0 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe fb07 	bl	80022f0 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e067      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d108      	bne.n	8003d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a19      	ldr	r1, [r3, #32]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	4927      	ldr	r1, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x4fc>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fe fadb 	bl	80022f0 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fe fad7 	bl	80022f0 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e037      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x46a>
 8003d5c:	e02f      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_RCC_OscConfig+0x4fc>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fac4 	bl	80022f0 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fe fac0 	bl	80022f0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e020      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x498>
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e013      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42420060 	.word	0x42420060

08003dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4965      	ldr	r1, [pc, #404]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d040      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e073      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4936      	ldr	r1, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe fa14 	bl	80022f0 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fe fa10 	bl	80022f0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e053      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d210      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 0207 	bic.w	r2, r3, #7
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe f972 	bl	800226c <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08008a78 	.word	0x08008a78
 8003fa0:	20000018 	.word	0x20000018
 8003fa4:	2000001c 	.word	0x2000001c

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b490      	push	{r4, r7}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fb0:	1d3c      	adds	r4, r7, #4
 8003fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fb8:	f240 2301 	movw	r3, #513	; 0x201
 8003fbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x46>
 8003fe6:	e02d      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fea:	623b      	str	r3, [r7, #32]
      break;
 8003fec:	e02d      	b.n	800404a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	0c9b      	lsrs	r3, r3, #18
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004000:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_GetSysClockFreq+0xb4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c5b      	lsrs	r3, r3, #17
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800401a:	4413      	add	r3, r2
 800401c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004020:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004026:	fb02 f203 	mul.w	r2, r2, r3
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	e004      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	623b      	str	r3, [r7, #32]
      break;
 8004042:	e002      	b.n	800404a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	623b      	str	r3, [r7, #32]
      break;
 8004048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404a:	6a3b      	ldr	r3, [r7, #32]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc90      	pop	{r4, r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	08008a68 	.word	0x08008a68
 800405c:	40021000 	.word	0x40021000
 8004060:	007a1200 	.word	0x007a1200
 8004064:	003d0900 	.word	0x003d0900

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b02      	ldr	r3, [pc, #8]	; (8004078 <HAL_RCC_GetHCLKFreq+0x10>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	20000018 	.word	0x20000018

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004080:	f7ff fff2 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4903      	ldr	r1, [pc, #12]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	08008a88 	.word	0x08008a88

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a8:	f7ff ffde 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	0adb      	lsrs	r3, r3, #11
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40021000 	.word	0x40021000
 80040c8:	08008a88 	.word	0x08008a88

080040cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <RCC_Delay+0x34>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <RCC_Delay+0x38>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040e8:	bf00      	nop
  }
  while (Delay --);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <RCC_Delay+0x1c>
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000018 	.word	0x20000018
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e041      	b.n	800419e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fe66 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 fe90 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e03a      	b.n	8004236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_Base_Start_IT+0x98>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x58>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x58>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <HAL_TIM_Base_Start_IT+0x9c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x58>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a13      	ldr	r2, [pc, #76]	; (8004248 <HAL_TIM_Base_Start_IT+0xa0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e007      	b.n	8004234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800

0800424c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e041      	b.n	80042e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fda6 	bl	8001dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f000 fdee 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_PWM_Start+0x24>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e022      	b.n	8004356 <HAL_TIM_PWM_Start+0x6a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b04      	cmp	r3, #4
 8004314:	d109      	bne.n	800432a <HAL_TIM_PWM_Start+0x3e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e015      	b.n	8004356 <HAL_TIM_PWM_Start+0x6a>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start+0x58>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e008      	b.n	8004356 <HAL_TIM_PWM_Start+0x6a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e05e      	b.n	800441c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_TIM_PWM_Start+0x82>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	e013      	b.n	8004396 <HAL_TIM_PWM_Start+0xaa>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d104      	bne.n	800437e <HAL_TIM_PWM_Start+0x92>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800437c:	e00b      	b.n	8004396 <HAL_TIM_PWM_Start+0xaa>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Start+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800438c:	e003      	b.n	8004396 <HAL_TIM_PWM_Start+0xaa>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f97f 	bl	80056a2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_TIM_PWM_Start+0x138>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d107      	bne.n	80043be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_TIM_PWM_Start+0x138>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIM_PWM_Start+0xfa>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d009      	beq.n	80043e6 <HAL_TIM_PWM_Start+0xfa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_TIM_PWM_Start+0x13c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIM_PWM_Start+0xfa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a12      	ldr	r2, [pc, #72]	; (800442c <HAL_TIM_PWM_Start+0x140>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d111      	bne.n	800440a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d010      	beq.n	800441a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	e007      	b.n	800441a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0201 	orr.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800

08004430 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e041      	b.n	80044c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f839 	bl	80044ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fcfc 	bl	8004e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_IC_Start_IT+0x1a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e013      	b.n	8004522 <HAL_TIM_IC_Start_IT+0x42>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d104      	bne.n	800450a <HAL_TIM_IC_Start_IT+0x2a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004506:	b2db      	uxtb	r3, r3
 8004508:	e00b      	b.n	8004522 <HAL_TIM_IC_Start_IT+0x42>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d104      	bne.n	800451a <HAL_TIM_IC_Start_IT+0x3a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004516:	b2db      	uxtb	r3, r3
 8004518:	e003      	b.n	8004522 <HAL_TIM_IC_Start_IT+0x42>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_TIM_IC_Start_IT+0x54>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004530:	b2db      	uxtb	r3, r3
 8004532:	e013      	b.n	800455c <HAL_TIM_IC_Start_IT+0x7c>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d104      	bne.n	8004544 <HAL_TIM_IC_Start_IT+0x64>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e00b      	b.n	800455c <HAL_TIM_IC_Start_IT+0x7c>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d104      	bne.n	8004554 <HAL_TIM_IC_Start_IT+0x74>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e003      	b.n	800455c <HAL_TIM_IC_Start_IT+0x7c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455a:	b2db      	uxtb	r3, r3
 800455c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d102      	bne.n	800456a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004564:	7bbb      	ldrb	r3, [r7, #14]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0b3      	b.n	80046d6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_TIM_IC_Start_IT+0x9e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457c:	e013      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0xc6>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d104      	bne.n	800458e <HAL_TIM_IC_Start_IT+0xae>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458c:	e00b      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0xc6>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d104      	bne.n	800459e <HAL_TIM_IC_Start_IT+0xbe>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800459c:	e003      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0xc6>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_IC_Start_IT+0xd6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	e013      	b.n	80045de <HAL_TIM_IC_Start_IT+0xfe>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0xe6>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c4:	e00b      	b.n	80045de <HAL_TIM_IC_Start_IT+0xfe>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_IC_Start_IT+0xf6>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d4:	e003      	b.n	80045de <HAL_TIM_IC_Start_IT+0xfe>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d841      	bhi.n	8004668 <HAL_TIM_IC_Start_IT+0x188>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_TIM_IC_Start_IT+0x10c>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004621 	.word	0x08004621
 80045f0:	08004669 	.word	0x08004669
 80045f4:	08004669 	.word	0x08004669
 80045f8:	08004669 	.word	0x08004669
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004669 	.word	0x08004669
 8004604:	08004669 	.word	0x08004669
 8004608:	08004669 	.word	0x08004669
 800460c:	08004645 	.word	0x08004645
 8004610:	08004669 	.word	0x08004669
 8004614:	08004669 	.word	0x08004669
 8004618:	08004669 	.word	0x08004669
 800461c:	08004657 	.word	0x08004657
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0202 	orr.w	r2, r2, #2
 800462e:	60da      	str	r2, [r3, #12]
      break;
 8004630:	e01b      	b.n	800466a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0204 	orr.w	r2, r2, #4
 8004640:	60da      	str	r2, [r3, #12]
      break;
 8004642:	e012      	b.n	800466a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0208 	orr.w	r2, r2, #8
 8004652:	60da      	str	r2, [r3, #12]
      break;
 8004654:	e009      	b.n	800466a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0210 	orr.w	r2, r2, #16
 8004664:	60da      	str	r2, [r3, #12]
      break;
 8004666:	e000      	b.n	800466a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004668:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f815 	bl	80056a2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_TIM_IC_Start_IT+0x200>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00e      	beq.n	80046a0 <HAL_TIM_IC_Start_IT+0x1c0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468a:	d009      	beq.n	80046a0 <HAL_TIM_IC_Start_IT+0x1c0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <HAL_TIM_IC_Start_IT+0x204>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_TIM_IC_Start_IT+0x1c0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <HAL_TIM_IC_Start_IT+0x208>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d111      	bne.n	80046c4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d010      	beq.n	80046d4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800

080046ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0202 	mvn.w	r2, #2
 8004718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd faa2 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fb7c 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fb82 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b04      	cmp	r3, #4
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b04      	cmp	r3, #4
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0204 	mvn.w	r2, #4
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fa78 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fb52 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb58 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0208 	mvn.w	r2, #8
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2204      	movs	r2, #4
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fd fa4e 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fb28 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fb2e 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d122      	bne.n	8004844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b10      	cmp	r3, #16
 800480a:	d11b      	bne.n	8004844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0210 	mvn.w	r2, #16
 8004814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2208      	movs	r2, #8
 800481a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fa24 	bl	8001c78 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fafe 	bl	8004e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb04 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d10e      	bne.n	8004870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d107      	bne.n	8004870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0201 	mvn.w	r2, #1
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd f93c 	bl	8001ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d10e      	bne.n	800489c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d107      	bne.n	800489c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 ffe0 	bl	800585c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fac8 	bl	8004e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0220 	mvn.w	r2, #32
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 ffab 	bl	800584a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004912:	2302      	movs	r3, #2
 8004914:	e082      	b.n	8004a1c <HAL_TIM_IC_ConfigChannel+0x120>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f000 fd12 	bl	800535c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 020c 	bic.w	r2, r2, #12
 8004946:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6999      	ldr	r1, [r3, #24]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	619a      	str	r2, [r3, #24]
 800495a:	e05a      	b.n	8004a12 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d11c      	bne.n	800499c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f000 fd7b 	bl	800546c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004984:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	021a      	lsls	r2, r3, #8
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	619a      	str	r2, [r3, #24]
 800499a:	e03a      	b.n	8004a12 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d11b      	bne.n	80049da <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f000 fdc6 	bl	8005542 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020c 	bic.w	r2, r2, #12
 80049c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69d9      	ldr	r1, [r3, #28]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	61da      	str	r2, [r3, #28]
 80049d8:	e01b      	b.n	8004a12 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f000 fde5 	bl	80055b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0ac      	b.n	8004b98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	f200 809f 	bhi.w	8004b8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004b8d 	.word	0x08004b8d
 8004a5c:	08004b8d 	.word	0x08004b8d
 8004a60:	08004b8d 	.word	0x08004b8d
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004b8d 	.word	0x08004b8d
 8004a6c:	08004b8d 	.word	0x08004b8d
 8004a70:	08004b8d 	.word	0x08004b8d
 8004a74:	08004b0b 	.word	0x08004b0b
 8004a78:	08004b8d 	.word	0x08004b8d
 8004a7c:	08004b8d 	.word	0x08004b8d
 8004a80:	08004b8d 	.word	0x08004b8d
 8004a84:	08004b4b 	.word	0x08004b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fa4e 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e062      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fa94 	bl	8004ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e041      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fadd 	bl	80050d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e021      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fb27 	bl	80051a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e000      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIM_ConfigClockSource+0x18>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e0b3      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x180>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf0:	d03e      	beq.n	8004c70 <HAL_TIM_ConfigClockSource+0xd0>
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf6:	f200 8087 	bhi.w	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	f000 8085 	beq.w	8004d0c <HAL_TIM_ConfigClockSource+0x16c>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d87f      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c08:	2b70      	cmp	r3, #112	; 0x70
 8004c0a:	d01a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0xa2>
 8004c0c:	2b70      	cmp	r3, #112	; 0x70
 8004c0e:	d87b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c10:	2b60      	cmp	r3, #96	; 0x60
 8004c12:	d050      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x116>
 8004c14:	2b60      	cmp	r3, #96	; 0x60
 8004c16:	d877      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c18:	2b50      	cmp	r3, #80	; 0x50
 8004c1a:	d03c      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0xf6>
 8004c1c:	2b50      	cmp	r3, #80	; 0x50
 8004c1e:	d873      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d058      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x136>
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d86f      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c28:	2b30      	cmp	r3, #48	; 0x30
 8004c2a:	d064      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x156>
 8004c2c:	2b30      	cmp	r3, #48	; 0x30
 8004c2e:	d86b      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d060      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x156>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d867      	bhi.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d05c      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x156>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d05a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c40:	e062      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6899      	ldr	r1, [r3, #8]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f000 fd07 	bl	8005664 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	609a      	str	r2, [r3, #8]
      break;
 8004c6e:	e04e      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	6899      	ldr	r1, [r3, #8]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f000 fcf0 	bl	8005664 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c92:	609a      	str	r2, [r3, #8]
      break;
 8004c94:	e03b      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 fbb4 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2150      	movs	r1, #80	; 0x50
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fcbe 	bl	8005630 <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e02b      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 fc0e 	bl	80054e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2160      	movs	r1, #96	; 0x60
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fcae 	bl	8005630 <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e01b      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6859      	ldr	r1, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f000 fb94 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2140      	movs	r1, #64	; 0x40
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fc9e 	bl	8005630 <TIM_ITRx_SetConfig>
      break;
 8004cf4:	e00b      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fc95 	bl	8005630 <TIM_ITRx_SetConfig>
        break;
 8004d06:	e002      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e031      	b.n	8004da4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa74 	bl	8005240 <TIM_SlaveTimer_SetConfig>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e018      	b.n	8004da4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d80:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d90:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d831      	bhi.n	8004e24 <HAL_TIM_ReadCapturedValue+0x78>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004e25 	.word	0x08004e25
 8004dd0:	08004e25 	.word	0x08004e25
 8004dd4:	08004e25 	.word	0x08004e25
 8004dd8:	08004e07 	.word	0x08004e07
 8004ddc:	08004e25 	.word	0x08004e25
 8004de0:	08004e25 	.word	0x08004e25
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e25 	.word	0x08004e25
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004e1b 	.word	0x08004e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	60fb      	str	r3, [r7, #12]

      break;
 8004e04:	e00f      	b.n	8004e26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	60fb      	str	r3, [r7, #12]

      break;
 8004e0e:	e00a      	b.n	8004e26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	60fb      	str	r3, [r7, #12]

      break;
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	60fb      	str	r3, [r7, #12]

      break;
 8004e22:	e000      	b.n	8004e26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e24:	bf00      	nop
  }

  return tmpreg;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
	...

08004e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <TIM_Base_SetConfig+0xb8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x30>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x30>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x30>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0xc0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <TIM_Base_SetConfig+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0x62>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0x62>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <TIM_Base_SetConfig+0xbc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0x62>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <TIM_Base_SetConfig+0xc0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <TIM_Base_SetConfig+0xb8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d103      	bne.n	8004f14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	615a      	str	r2, [r3, #20]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 0302 	bic.w	r3, r3, #2
 8004f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d10c      	bne.n	8004fa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 0308 	bic.w	r3, r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <TIM_OC1_SetConfig+0xc8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d111      	bne.n	8004fd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40012c00 	.word	0x40012c00

08004ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f023 0320 	bic.w	r3, r3, #32
 8005046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <TIM_OC2_SetConfig+0xd0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a14      	ldr	r2, [pc, #80]	; (80050cc <TIM_OC2_SetConfig+0xd0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d113      	bne.n	80050a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	40012c00 	.word	0x40012c00

080050d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <TIM_OC3_SetConfig+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <TIM_OC3_SetConfig+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d113      	bne.n	800517a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00

080051a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a0f      	ldr	r2, [pc, #60]	; (800523c <TIM_OC4_SetConfig+0x98>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d109      	bne.n	8005218 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr
 800523c:	40012c00 	.word	0x40012c00

08005240 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b70      	cmp	r3, #112	; 0x70
 8005284:	d01a      	beq.n	80052bc <TIM_SlaveTimer_SetConfig+0x7c>
 8005286:	2b70      	cmp	r3, #112	; 0x70
 8005288:	d860      	bhi.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
 800528a:	2b60      	cmp	r3, #96	; 0x60
 800528c:	d054      	beq.n	8005338 <TIM_SlaveTimer_SetConfig+0xf8>
 800528e:	2b60      	cmp	r3, #96	; 0x60
 8005290:	d85c      	bhi.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
 8005292:	2b50      	cmp	r3, #80	; 0x50
 8005294:	d046      	beq.n	8005324 <TIM_SlaveTimer_SetConfig+0xe4>
 8005296:	2b50      	cmp	r3, #80	; 0x50
 8005298:	d858      	bhi.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
 800529a:	2b40      	cmp	r3, #64	; 0x40
 800529c:	d019      	beq.n	80052d2 <TIM_SlaveTimer_SetConfig+0x92>
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d854      	bhi.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
 80052a2:	2b30      	cmp	r3, #48	; 0x30
 80052a4:	d054      	beq.n	8005350 <TIM_SlaveTimer_SetConfig+0x110>
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	d850      	bhi.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d050      	beq.n	8005350 <TIM_SlaveTimer_SetConfig+0x110>
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d84c      	bhi.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04c      	beq.n	8005350 <TIM_SlaveTimer_SetConfig+0x110>
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d04a      	beq.n	8005350 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80052ba:	e047      	b.n	800534c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68d9      	ldr	r1, [r3, #12]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f000 f9ca 	bl	8005664 <TIM_ETR_SetConfig>
      break;
 80052d0:	e03f      	b.n	8005352 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d101      	bne.n	80052de <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e03a      	b.n	8005354 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005304:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	621a      	str	r2, [r3, #32]
      break;
 8005322:	e016      	b.n	8005352 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	6899      	ldr	r1, [r3, #8]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	461a      	mov	r2, r3
 8005332:	f000 f86d 	bl	8005410 <TIM_TI1_ConfigInputStage>
      break;
 8005336:	e00c      	b.n	8005352 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6899      	ldr	r1, [r3, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	461a      	mov	r2, r3
 8005346:	f000 f8cd 	bl	80054e4 <TIM_TI2_ConfigInputStage>
      break;
 800534a:	e002      	b.n	8005352 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005350:	bf00      	nop
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f023 0201 	bic.w	r2, r3, #1
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <TIM_TI1_SetConfig+0xa8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_TI1_SetConfig+0x46>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d007      	beq.n	80053a2 <TIM_TI1_SetConfig+0x46>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <TIM_TI1_SetConfig+0xac>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_TI1_SetConfig+0x46>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a1b      	ldr	r2, [pc, #108]	; (800540c <TIM_TI1_SetConfig+0xb0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d101      	bne.n	80053a6 <TIM_TI1_SetConfig+0x4a>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <TIM_TI1_SetConfig+0x4c>
 80053a6:	2300      	movs	r3, #0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e003      	b.n	80053c6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f023 030a 	bic.w	r3, r3, #10
 80053e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f003 030a 	and.w	r3, r3, #10
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40000400 	.word	0x40000400
 800540c:	40000800 	.word	0x40000800

08005410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800543a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 030a 	bic.w	r3, r3, #10
 800544c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0210 	bic.w	r2, r3, #16
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	031b      	lsls	r3, r3, #12
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f023 0210 	bic.w	r2, r3, #16
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800550e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005542:	b480      	push	{r7}
 8005544:	b087      	sub	sp, #28
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	b2db      	uxtb	r3, r3
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005592:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr

080055b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800560a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	031b      	lsls	r3, r3, #12
 8005610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	f043 0307 	orr.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	431a      	orrs	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4313      	orrs	r3, r2
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	2201      	movs	r2, #1
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	43db      	mvns	r3, r3
 80056c4:	401a      	ands	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e046      	b.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a16      	ldr	r2, [pc, #88]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d009      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a12      	ldr	r2, [pc, #72]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a10      	ldr	r2, [pc, #64]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10c      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800576c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4313      	orrs	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800

080057a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e03d      	b.n	8005840 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e03f      	b.n	8005900 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7fc fb61 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2224      	movs	r2, #36	; 0x24
 800589e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f828 	bl	8005908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005942:	f023 030c 	bic.w	r3, r3, #12
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	430b      	orrs	r3, r1
 800594e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2c      	ldr	r2, [pc, #176]	; (8005a1c <UART_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe fb98 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	e002      	b.n	800597e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005978:	f7fe fb80 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 800597c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009a      	lsls	r2, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <UART_SetConfig+0x118>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	0119      	lsls	r1, r3, #4
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	009a      	lsls	r2, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <UART_SetConfig+0x118>)
 80059b6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2064      	movs	r0, #100	; 0x64
 80059be:	fb00 f303 	mul.w	r3, r0, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	3332      	adds	r3, #50	; 0x32
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <UART_SetConfig+0x118>)
 80059ca:	fba2 2303 	umull	r2, r3, r2, r3
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d4:	4419      	add	r1, r3
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009a      	lsls	r2, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <UART_SetConfig+0x118>)
 80059ee:	fba3 0302 	umull	r0, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2064      	movs	r0, #100	; 0x64
 80059f6:	fb00 f303 	mul.w	r3, r0, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a07      	ldr	r2, [pc, #28]	; (8005a20 <UART_SetConfig+0x118>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	440a      	add	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40013800 	.word	0x40013800
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <__errno>:
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <__errno+0x8>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000024 	.word	0x20000024

08005a30 <__libc_init_array>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	2600      	movs	r6, #0
 8005a34:	4d0c      	ldr	r5, [pc, #48]	; (8005a68 <__libc_init_array+0x38>)
 8005a36:	4c0d      	ldr	r4, [pc, #52]	; (8005a6c <__libc_init_array+0x3c>)
 8005a38:	1b64      	subs	r4, r4, r5
 8005a3a:	10a4      	asrs	r4, r4, #2
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d109      	bne.n	8005a54 <__libc_init_array+0x24>
 8005a40:	f003 f804 	bl	8008a4c <_init>
 8005a44:	2600      	movs	r6, #0
 8005a46:	4d0a      	ldr	r5, [pc, #40]	; (8005a70 <__libc_init_array+0x40>)
 8005a48:	4c0a      	ldr	r4, [pc, #40]	; (8005a74 <__libc_init_array+0x44>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	42a6      	cmp	r6, r4
 8005a50:	d105      	bne.n	8005a5e <__libc_init_array+0x2e>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a58:	4798      	blx	r3
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7ee      	b.n	8005a3c <__libc_init_array+0xc>
 8005a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a62:	4798      	blx	r3
 8005a64:	3601      	adds	r6, #1
 8005a66:	e7f2      	b.n	8005a4e <__libc_init_array+0x1e>
 8005a68:	08008e74 	.word	0x08008e74
 8005a6c:	08008e74 	.word	0x08008e74
 8005a70:	08008e74 	.word	0x08008e74
 8005a74:	08008e78 	.word	0x08008e78

08005a78 <memset>:
 8005a78:	4603      	mov	r3, r0
 8005a7a:	4402      	add	r2, r0
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d100      	bne.n	8005a82 <memset+0xa>
 8005a80:	4770      	bx	lr
 8005a82:	f803 1b01 	strb.w	r1, [r3], #1
 8005a86:	e7f9      	b.n	8005a7c <memset+0x4>

08005a88 <__cvt>:
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8e:	461f      	mov	r7, r3
 8005a90:	bfbb      	ittet	lt
 8005a92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a96:	461f      	movlt	r7, r3
 8005a98:	2300      	movge	r3, #0
 8005a9a:	232d      	movlt	r3, #45	; 0x2d
 8005a9c:	b088      	sub	sp, #32
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aa2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005aa4:	7013      	strb	r3, [r2, #0]
 8005aa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005aa8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005aac:	f023 0820 	bic.w	r8, r3, #32
 8005ab0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ab4:	d005      	beq.n	8005ac2 <__cvt+0x3a>
 8005ab6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aba:	d100      	bne.n	8005abe <__cvt+0x36>
 8005abc:	3501      	adds	r5, #1
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e000      	b.n	8005ac4 <__cvt+0x3c>
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	aa07      	add	r2, sp, #28
 8005ac6:	9204      	str	r2, [sp, #16]
 8005ac8:	aa06      	add	r2, sp, #24
 8005aca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ace:	e9cd 3500 	strd	r3, r5, [sp]
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	f000 fcc7 	bl	8006468 <_dtoa_r>
 8005ada:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ade:	4606      	mov	r6, r0
 8005ae0:	d102      	bne.n	8005ae8 <__cvt+0x60>
 8005ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ae4:	07db      	lsls	r3, r3, #31
 8005ae6:	d522      	bpl.n	8005b2e <__cvt+0xa6>
 8005ae8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aec:	eb06 0905 	add.w	r9, r6, r5
 8005af0:	d110      	bne.n	8005b14 <__cvt+0x8c>
 8005af2:	7833      	ldrb	r3, [r6, #0]
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d10a      	bne.n	8005b0e <__cvt+0x86>
 8005af8:	2200      	movs	r2, #0
 8005afa:	2300      	movs	r3, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8005b04:	b918      	cbnz	r0, 8005b0e <__cvt+0x86>
 8005b06:	f1c5 0501 	rsb	r5, r5, #1
 8005b0a:	f8ca 5000 	str.w	r5, [sl]
 8005b0e:	f8da 3000 	ldr.w	r3, [sl]
 8005b12:	4499      	add	r9, r3
 8005b14:	2200      	movs	r2, #0
 8005b16:	2300      	movs	r3, #0
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	f7fa ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8005b20:	b108      	cbz	r0, 8005b26 <__cvt+0x9e>
 8005b22:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b26:	2230      	movs	r2, #48	; 0x30
 8005b28:	9b07      	ldr	r3, [sp, #28]
 8005b2a:	454b      	cmp	r3, r9
 8005b2c:	d307      	bcc.n	8005b3e <__cvt+0xb6>
 8005b2e:	4630      	mov	r0, r6
 8005b30:	9b07      	ldr	r3, [sp, #28]
 8005b32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b34:	1b9b      	subs	r3, r3, r6
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	b008      	add	sp, #32
 8005b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3e:	1c59      	adds	r1, r3, #1
 8005b40:	9107      	str	r1, [sp, #28]
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e7f0      	b.n	8005b28 <__cvt+0xa0>

08005b46 <__exponent>:
 8005b46:	4603      	mov	r3, r0
 8005b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	f803 2b02 	strb.w	r2, [r3], #2
 8005b50:	bfb6      	itet	lt
 8005b52:	222d      	movlt	r2, #45	; 0x2d
 8005b54:	222b      	movge	r2, #43	; 0x2b
 8005b56:	4249      	neglt	r1, r1
 8005b58:	2909      	cmp	r1, #9
 8005b5a:	7042      	strb	r2, [r0, #1]
 8005b5c:	dd2b      	ble.n	8005bb6 <__exponent+0x70>
 8005b5e:	f10d 0407 	add.w	r4, sp, #7
 8005b62:	46a4      	mov	ip, r4
 8005b64:	270a      	movs	r7, #10
 8005b66:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	46a6      	mov	lr, r4
 8005b6e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b72:	2a63      	cmp	r2, #99	; 0x63
 8005b74:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005b78:	4631      	mov	r1, r6
 8005b7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b82:	dcf0      	bgt.n	8005b66 <__exponent+0x20>
 8005b84:	3130      	adds	r1, #48	; 0x30
 8005b86:	f1ae 0502 	sub.w	r5, lr, #2
 8005b8a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	1c44      	adds	r4, r0, #1
 8005b92:	4561      	cmp	r1, ip
 8005b94:	d30a      	bcc.n	8005bac <__exponent+0x66>
 8005b96:	f10d 0209 	add.w	r2, sp, #9
 8005b9a:	eba2 020e 	sub.w	r2, r2, lr
 8005b9e:	4565      	cmp	r5, ip
 8005ba0:	bf88      	it	hi
 8005ba2:	2200      	movhi	r2, #0
 8005ba4:	4413      	add	r3, r2
 8005ba6:	1a18      	subs	r0, r3, r0
 8005ba8:	b003      	add	sp, #12
 8005baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bb0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bb4:	e7ed      	b.n	8005b92 <__exponent+0x4c>
 8005bb6:	2330      	movs	r3, #48	; 0x30
 8005bb8:	3130      	adds	r1, #48	; 0x30
 8005bba:	7083      	strb	r3, [r0, #2]
 8005bbc:	70c1      	strb	r1, [r0, #3]
 8005bbe:	1d03      	adds	r3, r0, #4
 8005bc0:	e7f1      	b.n	8005ba6 <__exponent+0x60>
	...

08005bc4 <_printf_float>:
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	b091      	sub	sp, #68	; 0x44
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	461f      	mov	r7, r3
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	f001 fa35 	bl	8007044 <_localeconv_r>
 8005bda:	6803      	ldr	r3, [r0, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	9309      	str	r3, [sp, #36]	; 0x24
 8005be0:	f7fa fab6 	bl	8000150 <strlen>
 8005be4:	2300      	movs	r3, #0
 8005be6:	930e      	str	r3, [sp, #56]	; 0x38
 8005be8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bec:	900a      	str	r0, [sp, #40]	; 0x28
 8005bee:	3307      	adds	r3, #7
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	f103 0208 	add.w	r2, r3, #8
 8005bf8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bfc:	f8d4 b000 	ldr.w	fp, [r4]
 8005c00:	f8c8 2000 	str.w	r2, [r8]
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c0c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c10:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	4b9c      	ldr	r3, [pc, #624]	; (8005e90 <_printf_float+0x2cc>)
 8005c1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c20:	f7fa fef4 	bl	8000a0c <__aeabi_dcmpun>
 8005c24:	bb70      	cbnz	r0, 8005c84 <_printf_float+0xc0>
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4b98      	ldr	r3, [pc, #608]	; (8005e90 <_printf_float+0x2cc>)
 8005c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c30:	f7fa fece 	bl	80009d0 <__aeabi_dcmple>
 8005c34:	bb30      	cbnz	r0, 8005c84 <_printf_float+0xc0>
 8005c36:	2200      	movs	r2, #0
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4651      	mov	r1, sl
 8005c3e:	f7fa febd 	bl	80009bc <__aeabi_dcmplt>
 8005c42:	b110      	cbz	r0, 8005c4a <_printf_float+0x86>
 8005c44:	232d      	movs	r3, #45	; 0x2d
 8005c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c4a:	4b92      	ldr	r3, [pc, #584]	; (8005e94 <_printf_float+0x2d0>)
 8005c4c:	4892      	ldr	r0, [pc, #584]	; (8005e98 <_printf_float+0x2d4>)
 8005c4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c52:	bf94      	ite	ls
 8005c54:	4698      	movls	r8, r3
 8005c56:	4680      	movhi	r8, r0
 8005c58:	2303      	movs	r3, #3
 8005c5a:	f04f 0a00 	mov.w	sl, #0
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	f02b 0304 	bic.w	r3, fp, #4
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	4633      	mov	r3, r6
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	9700      	str	r7, [sp, #0]
 8005c6e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c70:	f000 f9d4 	bl	800601c <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	f040 8090 	bne.w	8005d9a <_printf_float+0x1d6>
 8005c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7e:	b011      	add	sp, #68	; 0x44
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c84:	4642      	mov	r2, r8
 8005c86:	4653      	mov	r3, sl
 8005c88:	4640      	mov	r0, r8
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	f7fa febe 	bl	8000a0c <__aeabi_dcmpun>
 8005c90:	b148      	cbz	r0, 8005ca6 <_printf_float+0xe2>
 8005c92:	f1ba 0f00 	cmp.w	sl, #0
 8005c96:	bfb8      	it	lt
 8005c98:	232d      	movlt	r3, #45	; 0x2d
 8005c9a:	4880      	ldr	r0, [pc, #512]	; (8005e9c <_printf_float+0x2d8>)
 8005c9c:	bfb8      	it	lt
 8005c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ca2:	4b7f      	ldr	r3, [pc, #508]	; (8005ea0 <_printf_float+0x2dc>)
 8005ca4:	e7d3      	b.n	8005c4e <_printf_float+0x8a>
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	d142      	bne.n	8005d36 <_printf_float+0x172>
 8005cb0:	2306      	movs	r3, #6
 8005cb2:	6063      	str	r3, [r4, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	9206      	str	r2, [sp, #24]
 8005cb8:	aa0e      	add	r2, sp, #56	; 0x38
 8005cba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005cbe:	aa0d      	add	r2, sp, #52	; 0x34
 8005cc0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005cc4:	9203      	str	r2, [sp, #12]
 8005cc6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005cca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	6863      	ldr	r3, [r4, #4]
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	4653      	mov	r3, sl
 8005cda:	910b      	str	r1, [sp, #44]	; 0x2c
 8005cdc:	f7ff fed4 	bl	8005a88 <__cvt>
 8005ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	2947      	cmp	r1, #71	; 0x47
 8005ce6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ce8:	d108      	bne.n	8005cfc <_printf_float+0x138>
 8005cea:	1cc8      	adds	r0, r1, #3
 8005cec:	db02      	blt.n	8005cf4 <_printf_float+0x130>
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	dd40      	ble.n	8005d76 <_printf_float+0x1b2>
 8005cf4:	f1a9 0902 	sub.w	r9, r9, #2
 8005cf8:	fa5f f989 	uxtb.w	r9, r9
 8005cfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d00:	d81f      	bhi.n	8005d42 <_printf_float+0x17e>
 8005d02:	464a      	mov	r2, r9
 8005d04:	3901      	subs	r1, #1
 8005d06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d0a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d0c:	f7ff ff1b 	bl	8005b46 <__exponent>
 8005d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d12:	4682      	mov	sl, r0
 8005d14:	1813      	adds	r3, r2, r0
 8005d16:	2a01      	cmp	r2, #1
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	dc02      	bgt.n	8005d22 <_printf_float+0x15e>
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	07d2      	lsls	r2, r2, #31
 8005d20:	d501      	bpl.n	8005d26 <_printf_float+0x162>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d09b      	beq.n	8005c66 <_printf_float+0xa2>
 8005d2e:	232d      	movs	r3, #45	; 0x2d
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d34:	e797      	b.n	8005c66 <_printf_float+0xa2>
 8005d36:	2947      	cmp	r1, #71	; 0x47
 8005d38:	d1bc      	bne.n	8005cb4 <_printf_float+0xf0>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1ba      	bne.n	8005cb4 <_printf_float+0xf0>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e7b7      	b.n	8005cb2 <_printf_float+0xee>
 8005d42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d46:	d118      	bne.n	8005d7a <_printf_float+0x1b6>
 8005d48:	2900      	cmp	r1, #0
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	dd0b      	ble.n	8005d66 <_printf_float+0x1a2>
 8005d4e:	6121      	str	r1, [r4, #16]
 8005d50:	b913      	cbnz	r3, 8005d58 <_printf_float+0x194>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d0      	lsls	r0, r2, #31
 8005d56:	d502      	bpl.n	8005d5e <_printf_float+0x19a>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	440b      	add	r3, r1
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	f04f 0a00 	mov.w	sl, #0
 8005d62:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d64:	e7df      	b.n	8005d26 <_printf_float+0x162>
 8005d66:	b913      	cbnz	r3, 8005d6e <_printf_float+0x1aa>
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	07d2      	lsls	r2, r2, #31
 8005d6c:	d501      	bpl.n	8005d72 <_printf_float+0x1ae>
 8005d6e:	3302      	adds	r3, #2
 8005d70:	e7f4      	b.n	8005d5c <_printf_float+0x198>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e7f2      	b.n	8005d5c <_printf_float+0x198>
 8005d76:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	db05      	blt.n	8005d8c <_printf_float+0x1c8>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	6121      	str	r1, [r4, #16]
 8005d84:	07d8      	lsls	r0, r3, #31
 8005d86:	d5ea      	bpl.n	8005d5e <_printf_float+0x19a>
 8005d88:	1c4b      	adds	r3, r1, #1
 8005d8a:	e7e7      	b.n	8005d5c <_printf_float+0x198>
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	bfcc      	ite	gt
 8005d90:	2201      	movgt	r2, #1
 8005d92:	f1c1 0202 	rsble	r2, r1, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	e7e0      	b.n	8005d5c <_printf_float+0x198>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	055a      	lsls	r2, r3, #21
 8005d9e:	d407      	bmi.n	8005db0 <_printf_float+0x1ec>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	4642      	mov	r2, r8
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	d12b      	bne.n	8005e06 <_printf_float+0x242>
 8005dae:	e764      	b.n	8005c7a <_printf_float+0xb6>
 8005db0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005db4:	f240 80dd 	bls.w	8005f72 <_printf_float+0x3ae>
 8005db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f7fa fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d033      	beq.n	8005e30 <_printf_float+0x26c>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	4a35      	ldr	r2, [pc, #212]	; (8005ea4 <_printf_float+0x2e0>)
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af51 	beq.w	8005c7a <_printf_float+0xb6>
 8005dd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	db02      	blt.n	8005de6 <_printf_float+0x222>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07d8      	lsls	r0, r3, #31
 8005de4:	d50f      	bpl.n	8005e06 <_printf_float+0x242>
 8005de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	f43f af42 	beq.w	8005c7a <_printf_float+0xb6>
 8005df6:	f04f 0800 	mov.w	r8, #0
 8005dfa:	f104 091a 	add.w	r9, r4, #26
 8005dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e00:	3b01      	subs	r3, #1
 8005e02:	4543      	cmp	r3, r8
 8005e04:	dc09      	bgt.n	8005e1a <_printf_float+0x256>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	079b      	lsls	r3, r3, #30
 8005e0a:	f100 8102 	bmi.w	8006012 <_printf_float+0x44e>
 8005e0e:	68e0      	ldr	r0, [r4, #12]
 8005e10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e12:	4298      	cmp	r0, r3
 8005e14:	bfb8      	it	lt
 8005e16:	4618      	movlt	r0, r3
 8005e18:	e731      	b.n	8005c7e <_printf_float+0xba>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b8      	blx	r7
 8005e24:	3001      	adds	r0, #1
 8005e26:	f43f af28 	beq.w	8005c7a <_printf_float+0xb6>
 8005e2a:	f108 0801 	add.w	r8, r8, #1
 8005e2e:	e7e6      	b.n	8005dfe <_printf_float+0x23a>
 8005e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dc38      	bgt.n	8005ea8 <_printf_float+0x2e4>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <_printf_float+0x2e0>)
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	f43f af1a 	beq.w	8005c7a <_printf_float+0xb6>
 8005e46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	d102      	bne.n	8005e54 <_printf_float+0x290>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	07d9      	lsls	r1, r3, #31
 8005e52:	d5d8      	bpl.n	8005e06 <_printf_float+0x242>
 8005e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f af0b 	beq.w	8005c7a <_printf_float+0xb6>
 8005e64:	f04f 0900 	mov.w	r9, #0
 8005e68:	f104 0a1a 	add.w	sl, r4, #26
 8005e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e6e:	425b      	negs	r3, r3
 8005e70:	454b      	cmp	r3, r9
 8005e72:	dc01      	bgt.n	8005e78 <_printf_float+0x2b4>
 8005e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e76:	e794      	b.n	8005da2 <_printf_float+0x1de>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	f43f aef9 	beq.w	8005c7a <_printf_float+0xb6>
 8005e88:	f109 0901 	add.w	r9, r9, #1
 8005e8c:	e7ee      	b.n	8005e6c <_printf_float+0x2a8>
 8005e8e:	bf00      	nop
 8005e90:	7fefffff 	.word	0x7fefffff
 8005e94:	08008a94 	.word	0x08008a94
 8005e98:	08008a98 	.word	0x08008a98
 8005e9c:	08008aa0 	.word	0x08008aa0
 8005ea0:	08008a9c 	.word	0x08008a9c
 8005ea4:	08008aa4 	.word	0x08008aa4
 8005ea8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eac:	429a      	cmp	r2, r3
 8005eae:	bfa8      	it	ge
 8005eb0:	461a      	movge	r2, r3
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	4691      	mov	r9, r2
 8005eb6:	dc37      	bgt.n	8005f28 <_printf_float+0x364>
 8005eb8:	f04f 0b00 	mov.w	fp, #0
 8005ebc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec0:	f104 021a 	add.w	r2, r4, #26
 8005ec4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ec8:	ebaa 0309 	sub.w	r3, sl, r9
 8005ecc:	455b      	cmp	r3, fp
 8005ece:	dc33      	bgt.n	8005f38 <_printf_float+0x374>
 8005ed0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	db3b      	blt.n	8005f50 <_printf_float+0x38c>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	07da      	lsls	r2, r3, #31
 8005edc:	d438      	bmi.n	8005f50 <_printf_float+0x38c>
 8005ede:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ee0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ee2:	eba2 030a 	sub.w	r3, r2, sl
 8005ee6:	eba2 0901 	sub.w	r9, r2, r1
 8005eea:	4599      	cmp	r9, r3
 8005eec:	bfa8      	it	ge
 8005eee:	4699      	movge	r9, r3
 8005ef0:	f1b9 0f00 	cmp.w	r9, #0
 8005ef4:	dc34      	bgt.n	8005f60 <_printf_float+0x39c>
 8005ef6:	f04f 0800 	mov.w	r8, #0
 8005efa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efe:	f104 0a1a 	add.w	sl, r4, #26
 8005f02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	eba3 0309 	sub.w	r3, r3, r9
 8005f0c:	4543      	cmp	r3, r8
 8005f0e:	f77f af7a 	ble.w	8005e06 <_printf_float+0x242>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4652      	mov	r2, sl
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f aeac 	beq.w	8005c7a <_printf_float+0xb6>
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	e7ec      	b.n	8005f02 <_printf_float+0x33e>
 8005f28:	4613      	mov	r3, r2
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	4628      	mov	r0, r5
 8005f30:	47b8      	blx	r7
 8005f32:	3001      	adds	r0, #1
 8005f34:	d1c0      	bne.n	8005eb8 <_printf_float+0x2f4>
 8005f36:	e6a0      	b.n	8005c7a <_printf_float+0xb6>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f ae99 	beq.w	8005c7a <_printf_float+0xb6>
 8005f48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f4a:	f10b 0b01 	add.w	fp, fp, #1
 8005f4e:	e7b9      	b.n	8005ec4 <_printf_float+0x300>
 8005f50:	4631      	mov	r1, r6
 8005f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d1bf      	bne.n	8005ede <_printf_float+0x31a>
 8005f5e:	e68c      	b.n	8005c7a <_printf_float+0xb6>
 8005f60:	464b      	mov	r3, r9
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	eb08 020a 	add.w	r2, r8, sl
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1c2      	bne.n	8005ef6 <_printf_float+0x332>
 8005f70:	e683      	b.n	8005c7a <_printf_float+0xb6>
 8005f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f74:	2a01      	cmp	r2, #1
 8005f76:	dc01      	bgt.n	8005f7c <_printf_float+0x3b8>
 8005f78:	07db      	lsls	r3, r3, #31
 8005f7a:	d537      	bpl.n	8005fec <_printf_float+0x428>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	f43f ae77 	beq.w	8005c7a <_printf_float+0xb6>
 8005f8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f ae6f 	beq.w	8005c7a <_printf_float+0xb6>
 8005f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f7fa fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa8:	b9d8      	cbnz	r0, 8005fe2 <_printf_float+0x41e>
 8005faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fac:	f108 0201 	add.w	r2, r8, #1
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d10e      	bne.n	8005fda <_printf_float+0x416>
 8005fbc:	e65d      	b.n	8005c7a <_printf_float+0xb6>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	464a      	mov	r2, r9
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	47b8      	blx	r7
 8005fc8:	3001      	adds	r0, #1
 8005fca:	f43f ae56 	beq.w	8005c7a <_printf_float+0xb6>
 8005fce:	f108 0801 	add.w	r8, r8, #1
 8005fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4543      	cmp	r3, r8
 8005fd8:	dcf1      	bgt.n	8005fbe <_printf_float+0x3fa>
 8005fda:	4653      	mov	r3, sl
 8005fdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fe0:	e6e0      	b.n	8005da4 <_printf_float+0x1e0>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f104 091a 	add.w	r9, r4, #26
 8005fea:	e7f2      	b.n	8005fd2 <_printf_float+0x40e>
 8005fec:	2301      	movs	r3, #1
 8005fee:	4642      	mov	r2, r8
 8005ff0:	e7df      	b.n	8005fb2 <_printf_float+0x3ee>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	464a      	mov	r2, r9
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae3c 	beq.w	8005c7a <_printf_float+0xb6>
 8006002:	f108 0801 	add.w	r8, r8, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	4543      	cmp	r3, r8
 800600e:	dcf0      	bgt.n	8005ff2 <_printf_float+0x42e>
 8006010:	e6fd      	b.n	8005e0e <_printf_float+0x24a>
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	f104 0919 	add.w	r9, r4, #25
 800601a:	e7f4      	b.n	8006006 <_printf_float+0x442>

0800601c <_printf_common>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	4616      	mov	r6, r2
 8006022:	4699      	mov	r9, r3
 8006024:	688a      	ldr	r2, [r1, #8]
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	4607      	mov	r7, r0
 800602a:	4293      	cmp	r3, r2
 800602c:	bfb8      	it	lt
 800602e:	4613      	movlt	r3, r2
 8006030:	6033      	str	r3, [r6, #0]
 8006032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006036:	460c      	mov	r4, r1
 8006038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800603c:	b10a      	cbz	r2, 8006042 <_printf_common+0x26>
 800603e:	3301      	adds	r3, #1
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	0699      	lsls	r1, r3, #26
 8006046:	bf42      	ittt	mi
 8006048:	6833      	ldrmi	r3, [r6, #0]
 800604a:	3302      	addmi	r3, #2
 800604c:	6033      	strmi	r3, [r6, #0]
 800604e:	6825      	ldr	r5, [r4, #0]
 8006050:	f015 0506 	ands.w	r5, r5, #6
 8006054:	d106      	bne.n	8006064 <_printf_common+0x48>
 8006056:	f104 0a19 	add.w	sl, r4, #25
 800605a:	68e3      	ldr	r3, [r4, #12]
 800605c:	6832      	ldr	r2, [r6, #0]
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	42ab      	cmp	r3, r5
 8006062:	dc28      	bgt.n	80060b6 <_printf_common+0x9a>
 8006064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006068:	1e13      	subs	r3, r2, #0
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	bf18      	it	ne
 800606e:	2301      	movne	r3, #1
 8006070:	0692      	lsls	r2, r2, #26
 8006072:	d42d      	bmi.n	80060d0 <_printf_common+0xb4>
 8006074:	4649      	mov	r1, r9
 8006076:	4638      	mov	r0, r7
 8006078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d020      	beq.n	80060c4 <_printf_common+0xa8>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	68e5      	ldr	r5, [r4, #12]
 8006086:	f003 0306 	and.w	r3, r3, #6
 800608a:	2b04      	cmp	r3, #4
 800608c:	bf18      	it	ne
 800608e:	2500      	movne	r5, #0
 8006090:	6832      	ldr	r2, [r6, #0]
 8006092:	f04f 0600 	mov.w	r6, #0
 8006096:	68a3      	ldr	r3, [r4, #8]
 8006098:	bf08      	it	eq
 800609a:	1aad      	subeq	r5, r5, r2
 800609c:	6922      	ldr	r2, [r4, #16]
 800609e:	bf08      	it	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bfc4      	itt	gt
 80060a8:	1a9b      	subgt	r3, r3, r2
 80060aa:	18ed      	addgt	r5, r5, r3
 80060ac:	341a      	adds	r4, #26
 80060ae:	42b5      	cmp	r5, r6
 80060b0:	d11a      	bne.n	80060e8 <_printf_common+0xcc>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e008      	b.n	80060c8 <_printf_common+0xac>
 80060b6:	2301      	movs	r3, #1
 80060b8:	4652      	mov	r2, sl
 80060ba:	4649      	mov	r1, r9
 80060bc:	4638      	mov	r0, r7
 80060be:	47c0      	blx	r8
 80060c0:	3001      	adds	r0, #1
 80060c2:	d103      	bne.n	80060cc <_printf_common+0xb0>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060cc:	3501      	adds	r5, #1
 80060ce:	e7c4      	b.n	800605a <_printf_common+0x3e>
 80060d0:	2030      	movs	r0, #48	; 0x30
 80060d2:	18e1      	adds	r1, r4, r3
 80060d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060de:	4422      	add	r2, r4
 80060e0:	3302      	adds	r3, #2
 80060e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060e6:	e7c5      	b.n	8006074 <_printf_common+0x58>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4622      	mov	r2, r4
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d0e6      	beq.n	80060c4 <_printf_common+0xa8>
 80060f6:	3601      	adds	r6, #1
 80060f8:	e7d9      	b.n	80060ae <_printf_common+0x92>
	...

080060fc <_printf_i>:
 80060fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	460c      	mov	r4, r1
 8006102:	7e27      	ldrb	r7, [r4, #24]
 8006104:	4691      	mov	r9, r2
 8006106:	2f78      	cmp	r7, #120	; 0x78
 8006108:	4680      	mov	r8, r0
 800610a:	469a      	mov	sl, r3
 800610c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800610e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006112:	d807      	bhi.n	8006124 <_printf_i+0x28>
 8006114:	2f62      	cmp	r7, #98	; 0x62
 8006116:	d80a      	bhi.n	800612e <_printf_i+0x32>
 8006118:	2f00      	cmp	r7, #0
 800611a:	f000 80d9 	beq.w	80062d0 <_printf_i+0x1d4>
 800611e:	2f58      	cmp	r7, #88	; 0x58
 8006120:	f000 80a4 	beq.w	800626c <_printf_i+0x170>
 8006124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800612c:	e03a      	b.n	80061a4 <_printf_i+0xa8>
 800612e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006132:	2b15      	cmp	r3, #21
 8006134:	d8f6      	bhi.n	8006124 <_printf_i+0x28>
 8006136:	a001      	add	r0, pc, #4	; (adr r0, 800613c <_printf_i+0x40>)
 8006138:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800613c:	08006195 	.word	0x08006195
 8006140:	080061a9 	.word	0x080061a9
 8006144:	08006125 	.word	0x08006125
 8006148:	08006125 	.word	0x08006125
 800614c:	08006125 	.word	0x08006125
 8006150:	08006125 	.word	0x08006125
 8006154:	080061a9 	.word	0x080061a9
 8006158:	08006125 	.word	0x08006125
 800615c:	08006125 	.word	0x08006125
 8006160:	08006125 	.word	0x08006125
 8006164:	08006125 	.word	0x08006125
 8006168:	080062b7 	.word	0x080062b7
 800616c:	080061d9 	.word	0x080061d9
 8006170:	08006299 	.word	0x08006299
 8006174:	08006125 	.word	0x08006125
 8006178:	08006125 	.word	0x08006125
 800617c:	080062d9 	.word	0x080062d9
 8006180:	08006125 	.word	0x08006125
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006125 	.word	0x08006125
 800618c:	08006125 	.word	0x08006125
 8006190:	080062a1 	.word	0x080062a1
 8006194:	680b      	ldr	r3, [r1, #0]
 8006196:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	600a      	str	r2, [r1, #0]
 80061a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0a4      	b.n	80062f2 <_printf_i+0x1f6>
 80061a8:	6825      	ldr	r5, [r4, #0]
 80061aa:	6808      	ldr	r0, [r1, #0]
 80061ac:	062e      	lsls	r6, r5, #24
 80061ae:	f100 0304 	add.w	r3, r0, #4
 80061b2:	d50a      	bpl.n	80061ca <_printf_i+0xce>
 80061b4:	6805      	ldr	r5, [r0, #0]
 80061b6:	600b      	str	r3, [r1, #0]
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	da03      	bge.n	80061c4 <_printf_i+0xc8>
 80061bc:	232d      	movs	r3, #45	; 0x2d
 80061be:	426d      	negs	r5, r5
 80061c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c4:	230a      	movs	r3, #10
 80061c6:	485e      	ldr	r0, [pc, #376]	; (8006340 <_printf_i+0x244>)
 80061c8:	e019      	b.n	80061fe <_printf_i+0x102>
 80061ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061ce:	6805      	ldr	r5, [r0, #0]
 80061d0:	600b      	str	r3, [r1, #0]
 80061d2:	bf18      	it	ne
 80061d4:	b22d      	sxthne	r5, r5
 80061d6:	e7ef      	b.n	80061b8 <_printf_i+0xbc>
 80061d8:	680b      	ldr	r3, [r1, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	1d18      	adds	r0, r3, #4
 80061de:	6008      	str	r0, [r1, #0]
 80061e0:	0628      	lsls	r0, r5, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xec>
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	e002      	b.n	80061ee <_printf_i+0xf2>
 80061e8:	0669      	lsls	r1, r5, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xe8>
 80061ec:	881d      	ldrh	r5, [r3, #0]
 80061ee:	2f6f      	cmp	r7, #111	; 0x6f
 80061f0:	bf0c      	ite	eq
 80061f2:	2308      	moveq	r3, #8
 80061f4:	230a      	movne	r3, #10
 80061f6:	4852      	ldr	r0, [pc, #328]	; (8006340 <_printf_i+0x244>)
 80061f8:	2100      	movs	r1, #0
 80061fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061fe:	6866      	ldr	r6, [r4, #4]
 8006200:	2e00      	cmp	r6, #0
 8006202:	bfa8      	it	ge
 8006204:	6821      	ldrge	r1, [r4, #0]
 8006206:	60a6      	str	r6, [r4, #8]
 8006208:	bfa4      	itt	ge
 800620a:	f021 0104 	bicge.w	r1, r1, #4
 800620e:	6021      	strge	r1, [r4, #0]
 8006210:	b90d      	cbnz	r5, 8006216 <_printf_i+0x11a>
 8006212:	2e00      	cmp	r6, #0
 8006214:	d04d      	beq.n	80062b2 <_printf_i+0x1b6>
 8006216:	4616      	mov	r6, r2
 8006218:	fbb5 f1f3 	udiv	r1, r5, r3
 800621c:	fb03 5711 	mls	r7, r3, r1, r5
 8006220:	5dc7      	ldrb	r7, [r0, r7]
 8006222:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006226:	462f      	mov	r7, r5
 8006228:	42bb      	cmp	r3, r7
 800622a:	460d      	mov	r5, r1
 800622c:	d9f4      	bls.n	8006218 <_printf_i+0x11c>
 800622e:	2b08      	cmp	r3, #8
 8006230:	d10b      	bne.n	800624a <_printf_i+0x14e>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	07df      	lsls	r7, r3, #31
 8006236:	d508      	bpl.n	800624a <_printf_i+0x14e>
 8006238:	6923      	ldr	r3, [r4, #16]
 800623a:	6861      	ldr	r1, [r4, #4]
 800623c:	4299      	cmp	r1, r3
 800623e:	bfde      	ittt	le
 8006240:	2330      	movle	r3, #48	; 0x30
 8006242:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006246:	f106 36ff 	addle.w	r6, r6, #4294967295
 800624a:	1b92      	subs	r2, r2, r6
 800624c:	6122      	str	r2, [r4, #16]
 800624e:	464b      	mov	r3, r9
 8006250:	4621      	mov	r1, r4
 8006252:	4640      	mov	r0, r8
 8006254:	f8cd a000 	str.w	sl, [sp]
 8006258:	aa03      	add	r2, sp, #12
 800625a:	f7ff fedf 	bl	800601c <_printf_common>
 800625e:	3001      	adds	r0, #1
 8006260:	d14c      	bne.n	80062fc <_printf_i+0x200>
 8006262:	f04f 30ff 	mov.w	r0, #4294967295
 8006266:	b004      	add	sp, #16
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	4834      	ldr	r0, [pc, #208]	; (8006340 <_printf_i+0x244>)
 800626e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006272:	680e      	ldr	r6, [r1, #0]
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	f856 5b04 	ldr.w	r5, [r6], #4
 800627a:	061f      	lsls	r7, r3, #24
 800627c:	600e      	str	r6, [r1, #0]
 800627e:	d514      	bpl.n	80062aa <_printf_i+0x1ae>
 8006280:	07d9      	lsls	r1, r3, #31
 8006282:	bf44      	itt	mi
 8006284:	f043 0320 	orrmi.w	r3, r3, #32
 8006288:	6023      	strmi	r3, [r4, #0]
 800628a:	b91d      	cbnz	r5, 8006294 <_printf_i+0x198>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	f023 0320 	bic.w	r3, r3, #32
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	2310      	movs	r3, #16
 8006296:	e7af      	b.n	80061f8 <_printf_i+0xfc>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f043 0320 	orr.w	r3, r3, #32
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	2378      	movs	r3, #120	; 0x78
 80062a2:	4828      	ldr	r0, [pc, #160]	; (8006344 <_printf_i+0x248>)
 80062a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062a8:	e7e3      	b.n	8006272 <_printf_i+0x176>
 80062aa:	065e      	lsls	r6, r3, #25
 80062ac:	bf48      	it	mi
 80062ae:	b2ad      	uxthmi	r5, r5
 80062b0:	e7e6      	b.n	8006280 <_printf_i+0x184>
 80062b2:	4616      	mov	r6, r2
 80062b4:	e7bb      	b.n	800622e <_printf_i+0x132>
 80062b6:	680b      	ldr	r3, [r1, #0]
 80062b8:	6826      	ldr	r6, [r4, #0]
 80062ba:	1d1d      	adds	r5, r3, #4
 80062bc:	6960      	ldr	r0, [r4, #20]
 80062be:	600d      	str	r5, [r1, #0]
 80062c0:	0635      	lsls	r5, r6, #24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	d501      	bpl.n	80062ca <_printf_i+0x1ce>
 80062c6:	6018      	str	r0, [r3, #0]
 80062c8:	e002      	b.n	80062d0 <_printf_i+0x1d4>
 80062ca:	0671      	lsls	r1, r6, #25
 80062cc:	d5fb      	bpl.n	80062c6 <_printf_i+0x1ca>
 80062ce:	8018      	strh	r0, [r3, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	4616      	mov	r6, r2
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	e7ba      	b.n	800624e <_printf_i+0x152>
 80062d8:	680b      	ldr	r3, [r1, #0]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	600a      	str	r2, [r1, #0]
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4630      	mov	r0, r6
 80062e4:	6862      	ldr	r2, [r4, #4]
 80062e6:	f000 feb9 	bl	800705c <memchr>
 80062ea:	b108      	cbz	r0, 80062f0 <_printf_i+0x1f4>
 80062ec:	1b80      	subs	r0, r0, r6
 80062ee:	6060      	str	r0, [r4, #4]
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	2300      	movs	r3, #0
 80062f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fa:	e7a8      	b.n	800624e <_printf_i+0x152>
 80062fc:	4632      	mov	r2, r6
 80062fe:	4649      	mov	r1, r9
 8006300:	4640      	mov	r0, r8
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	47d0      	blx	sl
 8006306:	3001      	adds	r0, #1
 8006308:	d0ab      	beq.n	8006262 <_printf_i+0x166>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	079b      	lsls	r3, r3, #30
 800630e:	d413      	bmi.n	8006338 <_printf_i+0x23c>
 8006310:	68e0      	ldr	r0, [r4, #12]
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	4298      	cmp	r0, r3
 8006316:	bfb8      	it	lt
 8006318:	4618      	movlt	r0, r3
 800631a:	e7a4      	b.n	8006266 <_printf_i+0x16a>
 800631c:	2301      	movs	r3, #1
 800631e:	4632      	mov	r2, r6
 8006320:	4649      	mov	r1, r9
 8006322:	4640      	mov	r0, r8
 8006324:	47d0      	blx	sl
 8006326:	3001      	adds	r0, #1
 8006328:	d09b      	beq.n	8006262 <_printf_i+0x166>
 800632a:	3501      	adds	r5, #1
 800632c:	68e3      	ldr	r3, [r4, #12]
 800632e:	9903      	ldr	r1, [sp, #12]
 8006330:	1a5b      	subs	r3, r3, r1
 8006332:	42ab      	cmp	r3, r5
 8006334:	dcf2      	bgt.n	800631c <_printf_i+0x220>
 8006336:	e7eb      	b.n	8006310 <_printf_i+0x214>
 8006338:	2500      	movs	r5, #0
 800633a:	f104 0619 	add.w	r6, r4, #25
 800633e:	e7f5      	b.n	800632c <_printf_i+0x230>
 8006340:	08008aa6 	.word	0x08008aa6
 8006344:	08008ab7 	.word	0x08008ab7

08006348 <quorem>:
 8006348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	6903      	ldr	r3, [r0, #16]
 800634e:	690c      	ldr	r4, [r1, #16]
 8006350:	4607      	mov	r7, r0
 8006352:	42a3      	cmp	r3, r4
 8006354:	f2c0 8083 	blt.w	800645e <quorem+0x116>
 8006358:	3c01      	subs	r4, #1
 800635a:	f100 0514 	add.w	r5, r0, #20
 800635e:	f101 0814 	add.w	r8, r1, #20
 8006362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800636c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006370:	3301      	adds	r3, #1
 8006372:	429a      	cmp	r2, r3
 8006374:	fbb2 f6f3 	udiv	r6, r2, r3
 8006378:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800637c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006380:	d332      	bcc.n	80063e8 <quorem+0xa0>
 8006382:	f04f 0e00 	mov.w	lr, #0
 8006386:	4640      	mov	r0, r8
 8006388:	46ac      	mov	ip, r5
 800638a:	46f2      	mov	sl, lr
 800638c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006390:	b293      	uxth	r3, r2
 8006392:	fb06 e303 	mla	r3, r6, r3, lr
 8006396:	0c12      	lsrs	r2, r2, #16
 8006398:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800639c:	fb06 e202 	mla	r2, r6, r2, lr
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ebaa 0303 	sub.w	r3, sl, r3
 80063a6:	f8dc a000 	ldr.w	sl, [ip]
 80063aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ae:	fa1f fa8a 	uxth.w	sl, sl
 80063b2:	4453      	add	r3, sl
 80063b4:	fa1f fa82 	uxth.w	sl, r2
 80063b8:	f8dc 2000 	ldr.w	r2, [ip]
 80063bc:	4581      	cmp	r9, r0
 80063be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063d0:	f84c 3b04 	str.w	r3, [ip], #4
 80063d4:	d2da      	bcs.n	800638c <quorem+0x44>
 80063d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80063da:	b92b      	cbnz	r3, 80063e8 <quorem+0xa0>
 80063dc:	9b01      	ldr	r3, [sp, #4]
 80063de:	3b04      	subs	r3, #4
 80063e0:	429d      	cmp	r5, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	d32f      	bcc.n	8006446 <quorem+0xfe>
 80063e6:	613c      	str	r4, [r7, #16]
 80063e8:	4638      	mov	r0, r7
 80063ea:	f001 f8cd 	bl	8007588 <__mcmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	db25      	blt.n	800643e <quorem+0xf6>
 80063f2:	4628      	mov	r0, r5
 80063f4:	f04f 0c00 	mov.w	ip, #0
 80063f8:	3601      	adds	r6, #1
 80063fa:	f858 1b04 	ldr.w	r1, [r8], #4
 80063fe:	f8d0 e000 	ldr.w	lr, [r0]
 8006402:	b28b      	uxth	r3, r1
 8006404:	ebac 0303 	sub.w	r3, ip, r3
 8006408:	fa1f f28e 	uxth.w	r2, lr
 800640c:	4413      	add	r3, r2
 800640e:	0c0a      	lsrs	r2, r1, #16
 8006410:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006418:	b29b      	uxth	r3, r3
 800641a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641e:	45c1      	cmp	r9, r8
 8006420:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006424:	f840 3b04 	str.w	r3, [r0], #4
 8006428:	d2e7      	bcs.n	80063fa <quorem+0xb2>
 800642a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800642e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006432:	b922      	cbnz	r2, 800643e <quorem+0xf6>
 8006434:	3b04      	subs	r3, #4
 8006436:	429d      	cmp	r5, r3
 8006438:	461a      	mov	r2, r3
 800643a:	d30a      	bcc.n	8006452 <quorem+0x10a>
 800643c:	613c      	str	r4, [r7, #16]
 800643e:	4630      	mov	r0, r6
 8006440:	b003      	add	sp, #12
 8006442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	3b04      	subs	r3, #4
 800644a:	2a00      	cmp	r2, #0
 800644c:	d1cb      	bne.n	80063e6 <quorem+0x9e>
 800644e:	3c01      	subs	r4, #1
 8006450:	e7c6      	b.n	80063e0 <quorem+0x98>
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	3b04      	subs	r3, #4
 8006456:	2a00      	cmp	r2, #0
 8006458:	d1f0      	bne.n	800643c <quorem+0xf4>
 800645a:	3c01      	subs	r4, #1
 800645c:	e7eb      	b.n	8006436 <quorem+0xee>
 800645e:	2000      	movs	r0, #0
 8006460:	e7ee      	b.n	8006440 <quorem+0xf8>
 8006462:	0000      	movs	r0, r0
 8006464:	0000      	movs	r0, r0
	...

08006468 <_dtoa_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	461f      	mov	r7, r3
 8006470:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006472:	b099      	sub	sp, #100	; 0x64
 8006474:	4605      	mov	r5, r0
 8006476:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800647a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800647e:	b974      	cbnz	r4, 800649e <_dtoa_r+0x36>
 8006480:	2010      	movs	r0, #16
 8006482:	f000 fde3 	bl	800704c <malloc>
 8006486:	4602      	mov	r2, r0
 8006488:	6268      	str	r0, [r5, #36]	; 0x24
 800648a:	b920      	cbnz	r0, 8006496 <_dtoa_r+0x2e>
 800648c:	21ea      	movs	r1, #234	; 0xea
 800648e:	4bae      	ldr	r3, [pc, #696]	; (8006748 <_dtoa_r+0x2e0>)
 8006490:	48ae      	ldr	r0, [pc, #696]	; (800674c <_dtoa_r+0x2e4>)
 8006492:	f001 fa45 	bl	8007920 <__assert_func>
 8006496:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800649a:	6004      	str	r4, [r0, #0]
 800649c:	60c4      	str	r4, [r0, #12]
 800649e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	b151      	cbz	r1, 80064ba <_dtoa_r+0x52>
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	2301      	movs	r3, #1
 80064a8:	4093      	lsls	r3, r2
 80064aa:	604a      	str	r2, [r1, #4]
 80064ac:	608b      	str	r3, [r1, #8]
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fe30 	bl	8007114 <_Bfree>
 80064b4:	2200      	movs	r2, #0
 80064b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	1e3b      	subs	r3, r7, #0
 80064bc:	bfaf      	iteee	ge
 80064be:	2300      	movge	r3, #0
 80064c0:	2201      	movlt	r2, #1
 80064c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	9305      	strlt	r3, [sp, #20]
 80064c8:	bfa8      	it	ge
 80064ca:	f8c8 3000 	strge.w	r3, [r8]
 80064ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064d2:	4b9f      	ldr	r3, [pc, #636]	; (8006750 <_dtoa_r+0x2e8>)
 80064d4:	bfb8      	it	lt
 80064d6:	f8c8 2000 	strlt.w	r2, [r8]
 80064da:	ea33 0309 	bics.w	r3, r3, r9
 80064de:	d119      	bne.n	8006514 <_dtoa_r+0xac>
 80064e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80064e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ec:	4333      	orrs	r3, r6
 80064ee:	f000 8580 	beq.w	8006ff2 <_dtoa_r+0xb8a>
 80064f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064f4:	b953      	cbnz	r3, 800650c <_dtoa_r+0xa4>
 80064f6:	4b97      	ldr	r3, [pc, #604]	; (8006754 <_dtoa_r+0x2ec>)
 80064f8:	e022      	b.n	8006540 <_dtoa_r+0xd8>
 80064fa:	4b97      	ldr	r3, [pc, #604]	; (8006758 <_dtoa_r+0x2f0>)
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	3308      	adds	r3, #8
 8006500:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	9808      	ldr	r0, [sp, #32]
 8006506:	b019      	add	sp, #100	; 0x64
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4b91      	ldr	r3, [pc, #580]	; (8006754 <_dtoa_r+0x2ec>)
 800650e:	9308      	str	r3, [sp, #32]
 8006510:	3303      	adds	r3, #3
 8006512:	e7f5      	b.n	8006500 <_dtoa_r+0x98>
 8006514:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006518:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800651c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006520:	2200      	movs	r2, #0
 8006522:	2300      	movs	r3, #0
 8006524:	f7fa fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8006528:	4680      	mov	r8, r0
 800652a:	b158      	cbz	r0, 8006544 <_dtoa_r+0xdc>
 800652c:	2301      	movs	r3, #1
 800652e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8559 	beq.w	8006fec <_dtoa_r+0xb84>
 800653a:	4888      	ldr	r0, [pc, #544]	; (800675c <_dtoa_r+0x2f4>)
 800653c:	6018      	str	r0, [r3, #0]
 800653e:	1e43      	subs	r3, r0, #1
 8006540:	9308      	str	r3, [sp, #32]
 8006542:	e7df      	b.n	8006504 <_dtoa_r+0x9c>
 8006544:	ab16      	add	r3, sp, #88	; 0x58
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	ab17      	add	r3, sp, #92	; 0x5c
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	4628      	mov	r0, r5
 800654e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006552:	f001 f8c5 	bl	80076e0 <__d2b>
 8006556:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800655a:	4682      	mov	sl, r0
 800655c:	2c00      	cmp	r4, #0
 800655e:	d07e      	beq.n	800665e <_dtoa_r+0x1f6>
 8006560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006566:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800656a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006572:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006576:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800657a:	2200      	movs	r2, #0
 800657c:	4b78      	ldr	r3, [pc, #480]	; (8006760 <_dtoa_r+0x2f8>)
 800657e:	f7f9 fdf3 	bl	8000168 <__aeabi_dsub>
 8006582:	a36b      	add	r3, pc, #428	; (adr r3, 8006730 <_dtoa_r+0x2c8>)
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f7f9 ffa6 	bl	80004d8 <__aeabi_dmul>
 800658c:	a36a      	add	r3, pc, #424	; (adr r3, 8006738 <_dtoa_r+0x2d0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fdeb 	bl	800016c <__adddf3>
 8006596:	4606      	mov	r6, r0
 8006598:	4620      	mov	r0, r4
 800659a:	460f      	mov	r7, r1
 800659c:	f7f9 ff32 	bl	8000404 <__aeabi_i2d>
 80065a0:	a367      	add	r3, pc, #412	; (adr r3, 8006740 <_dtoa_r+0x2d8>)
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fddb 	bl	800016c <__adddf3>
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	f7fa fa3d 	bl	8000a38 <__aeabi_d2iz>
 80065be:	2200      	movs	r2, #0
 80065c0:	4681      	mov	r9, r0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa f9f8 	bl	80009bc <__aeabi_dcmplt>
 80065cc:	b148      	cbz	r0, 80065e2 <_dtoa_r+0x17a>
 80065ce:	4648      	mov	r0, r9
 80065d0:	f7f9 ff18 	bl	8000404 <__aeabi_i2d>
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	f7fa f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 80065dc:	b908      	cbnz	r0, 80065e2 <_dtoa_r+0x17a>
 80065de:	f109 39ff 	add.w	r9, r9, #4294967295
 80065e2:	f1b9 0f16 	cmp.w	r9, #22
 80065e6:	d857      	bhi.n	8006698 <_dtoa_r+0x230>
 80065e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ec:	4b5d      	ldr	r3, [pc, #372]	; (8006764 <_dtoa_r+0x2fc>)
 80065ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7fa f9e1 	bl	80009bc <__aeabi_dcmplt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d04e      	beq.n	800669c <_dtoa_r+0x234>
 80065fe:	2300      	movs	r3, #0
 8006600:	f109 39ff 	add.w	r9, r9, #4294967295
 8006604:	930f      	str	r3, [sp, #60]	; 0x3c
 8006606:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006608:	1b1c      	subs	r4, r3, r4
 800660a:	1e63      	subs	r3, r4, #1
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	bf49      	itett	mi
 8006610:	f1c4 0301 	rsbmi	r3, r4, #1
 8006614:	2300      	movpl	r3, #0
 8006616:	9306      	strmi	r3, [sp, #24]
 8006618:	2300      	movmi	r3, #0
 800661a:	bf54      	ite	pl
 800661c:	9306      	strpl	r3, [sp, #24]
 800661e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	db3c      	blt.n	80066a0 <_dtoa_r+0x238>
 8006626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006628:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800662c:	444b      	add	r3, r9
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	2300      	movs	r3, #0
 8006632:	930a      	str	r3, [sp, #40]	; 0x28
 8006634:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006636:	2b09      	cmp	r3, #9
 8006638:	d86c      	bhi.n	8006714 <_dtoa_r+0x2ac>
 800663a:	2b05      	cmp	r3, #5
 800663c:	bfc4      	itt	gt
 800663e:	3b04      	subgt	r3, #4
 8006640:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006644:	bfc8      	it	gt
 8006646:	2400      	movgt	r4, #0
 8006648:	f1a3 0302 	sub.w	r3, r3, #2
 800664c:	bfd8      	it	le
 800664e:	2401      	movle	r4, #1
 8006650:	2b03      	cmp	r3, #3
 8006652:	f200 808b 	bhi.w	800676c <_dtoa_r+0x304>
 8006656:	e8df f003 	tbb	[pc, r3]
 800665a:	4f2d      	.short	0x4f2d
 800665c:	5b4d      	.short	0x5b4d
 800665e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006662:	441c      	add	r4, r3
 8006664:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006668:	2b20      	cmp	r3, #32
 800666a:	bfc3      	ittte	gt
 800666c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006670:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006674:	fa09 f303 	lslgt.w	r3, r9, r3
 8006678:	f1c3 0320 	rsble	r3, r3, #32
 800667c:	bfc6      	itte	gt
 800667e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006682:	4318      	orrgt	r0, r3
 8006684:	fa06 f003 	lslle.w	r0, r6, r3
 8006688:	f7f9 feac 	bl	80003e4 <__aeabi_ui2d>
 800668c:	2301      	movs	r3, #1
 800668e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006692:	3c01      	subs	r4, #1
 8006694:	9313      	str	r3, [sp, #76]	; 0x4c
 8006696:	e770      	b.n	800657a <_dtoa_r+0x112>
 8006698:	2301      	movs	r3, #1
 800669a:	e7b3      	b.n	8006604 <_dtoa_r+0x19c>
 800669c:	900f      	str	r0, [sp, #60]	; 0x3c
 800669e:	e7b2      	b.n	8006606 <_dtoa_r+0x19e>
 80066a0:	9b06      	ldr	r3, [sp, #24]
 80066a2:	eba3 0309 	sub.w	r3, r3, r9
 80066a6:	9306      	str	r3, [sp, #24]
 80066a8:	f1c9 0300 	rsb	r3, r9, #0
 80066ac:	930a      	str	r3, [sp, #40]	; 0x28
 80066ae:	2300      	movs	r3, #0
 80066b0:	930e      	str	r3, [sp, #56]	; 0x38
 80066b2:	e7bf      	b.n	8006634 <_dtoa_r+0x1cc>
 80066b4:	2300      	movs	r3, #0
 80066b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dc59      	bgt.n	8006772 <_dtoa_r+0x30a>
 80066be:	f04f 0b01 	mov.w	fp, #1
 80066c2:	465b      	mov	r3, fp
 80066c4:	f8cd b008 	str.w	fp, [sp, #8]
 80066c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80066cc:	2200      	movs	r2, #0
 80066ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80066d0:	6042      	str	r2, [r0, #4]
 80066d2:	2204      	movs	r2, #4
 80066d4:	f102 0614 	add.w	r6, r2, #20
 80066d8:	429e      	cmp	r6, r3
 80066da:	6841      	ldr	r1, [r0, #4]
 80066dc:	d94f      	bls.n	800677e <_dtoa_r+0x316>
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 fcd8 	bl	8007094 <_Balloc>
 80066e4:	9008      	str	r0, [sp, #32]
 80066e6:	2800      	cmp	r0, #0
 80066e8:	d14d      	bne.n	8006786 <_dtoa_r+0x31e>
 80066ea:	4602      	mov	r2, r0
 80066ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <_dtoa_r+0x300>)
 80066f2:	e6cd      	b.n	8006490 <_dtoa_r+0x28>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e7de      	b.n	80066b6 <_dtoa_r+0x24e>
 80066f8:	2300      	movs	r3, #0
 80066fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80066fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066fe:	eb09 0b03 	add.w	fp, r9, r3
 8006702:	f10b 0301 	add.w	r3, fp, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	bfb8      	it	lt
 800670c:	2301      	movlt	r3, #1
 800670e:	e7dd      	b.n	80066cc <_dtoa_r+0x264>
 8006710:	2301      	movs	r3, #1
 8006712:	e7f2      	b.n	80066fa <_dtoa_r+0x292>
 8006714:	2401      	movs	r4, #1
 8006716:	2300      	movs	r3, #0
 8006718:	940b      	str	r4, [sp, #44]	; 0x2c
 800671a:	9322      	str	r3, [sp, #136]	; 0x88
 800671c:	f04f 3bff 	mov.w	fp, #4294967295
 8006720:	2200      	movs	r2, #0
 8006722:	2312      	movs	r3, #18
 8006724:	f8cd b008 	str.w	fp, [sp, #8]
 8006728:	9223      	str	r2, [sp, #140]	; 0x8c
 800672a:	e7cf      	b.n	80066cc <_dtoa_r+0x264>
 800672c:	f3af 8000 	nop.w
 8006730:	636f4361 	.word	0x636f4361
 8006734:	3fd287a7 	.word	0x3fd287a7
 8006738:	8b60c8b3 	.word	0x8b60c8b3
 800673c:	3fc68a28 	.word	0x3fc68a28
 8006740:	509f79fb 	.word	0x509f79fb
 8006744:	3fd34413 	.word	0x3fd34413
 8006748:	08008ad5 	.word	0x08008ad5
 800674c:	08008aec 	.word	0x08008aec
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	08008ad1 	.word	0x08008ad1
 8006758:	08008ac8 	.word	0x08008ac8
 800675c:	08008aa5 	.word	0x08008aa5
 8006760:	3ff80000 	.word	0x3ff80000
 8006764:	08008be8 	.word	0x08008be8
 8006768:	08008b4b 	.word	0x08008b4b
 800676c:	2301      	movs	r3, #1
 800676e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006770:	e7d4      	b.n	800671c <_dtoa_r+0x2b4>
 8006772:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006776:	465b      	mov	r3, fp
 8006778:	f8cd b008 	str.w	fp, [sp, #8]
 800677c:	e7a6      	b.n	80066cc <_dtoa_r+0x264>
 800677e:	3101      	adds	r1, #1
 8006780:	6041      	str	r1, [r0, #4]
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	e7a6      	b.n	80066d4 <_dtoa_r+0x26c>
 8006786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006788:	9a08      	ldr	r2, [sp, #32]
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	9b02      	ldr	r3, [sp, #8]
 800678e:	2b0e      	cmp	r3, #14
 8006790:	f200 80a8 	bhi.w	80068e4 <_dtoa_r+0x47c>
 8006794:	2c00      	cmp	r4, #0
 8006796:	f000 80a5 	beq.w	80068e4 <_dtoa_r+0x47c>
 800679a:	f1b9 0f00 	cmp.w	r9, #0
 800679e:	dd34      	ble.n	800680a <_dtoa_r+0x3a2>
 80067a0:	4a9a      	ldr	r2, [pc, #616]	; (8006a0c <_dtoa_r+0x5a4>)
 80067a2:	f009 030f 	and.w	r3, r9, #15
 80067a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80067ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80067ba:	d016      	beq.n	80067ea <_dtoa_r+0x382>
 80067bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067c0:	4b93      	ldr	r3, [pc, #588]	; (8006a10 <_dtoa_r+0x5a8>)
 80067c2:	2703      	movs	r7, #3
 80067c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c8:	f7f9 ffb0 	bl	800072c <__aeabi_ddiv>
 80067cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067d0:	f004 040f 	and.w	r4, r4, #15
 80067d4:	4e8e      	ldr	r6, [pc, #568]	; (8006a10 <_dtoa_r+0x5a8>)
 80067d6:	b954      	cbnz	r4, 80067ee <_dtoa_r+0x386>
 80067d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067e0:	f7f9 ffa4 	bl	800072c <__aeabi_ddiv>
 80067e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067e8:	e029      	b.n	800683e <_dtoa_r+0x3d6>
 80067ea:	2702      	movs	r7, #2
 80067ec:	e7f2      	b.n	80067d4 <_dtoa_r+0x36c>
 80067ee:	07e1      	lsls	r1, r4, #31
 80067f0:	d508      	bpl.n	8006804 <_dtoa_r+0x39c>
 80067f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067fa:	f7f9 fe6d 	bl	80004d8 <__aeabi_dmul>
 80067fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006802:	3701      	adds	r7, #1
 8006804:	1064      	asrs	r4, r4, #1
 8006806:	3608      	adds	r6, #8
 8006808:	e7e5      	b.n	80067d6 <_dtoa_r+0x36e>
 800680a:	f000 80a5 	beq.w	8006958 <_dtoa_r+0x4f0>
 800680e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006812:	f1c9 0400 	rsb	r4, r9, #0
 8006816:	4b7d      	ldr	r3, [pc, #500]	; (8006a0c <_dtoa_r+0x5a4>)
 8006818:	f004 020f 	and.w	r2, r4, #15
 800681c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f7f9 fe58 	bl	80004d8 <__aeabi_dmul>
 8006828:	2702      	movs	r7, #2
 800682a:	2300      	movs	r3, #0
 800682c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006830:	4e77      	ldr	r6, [pc, #476]	; (8006a10 <_dtoa_r+0x5a8>)
 8006832:	1124      	asrs	r4, r4, #4
 8006834:	2c00      	cmp	r4, #0
 8006836:	f040 8084 	bne.w	8006942 <_dtoa_r+0x4da>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1d2      	bne.n	80067e4 <_dtoa_r+0x37c>
 800683e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 808b 	beq.w	800695c <_dtoa_r+0x4f4>
 8006846:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800684a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800684e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006852:	2200      	movs	r2, #0
 8006854:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <_dtoa_r+0x5ac>)
 8006856:	f7fa f8b1 	bl	80009bc <__aeabi_dcmplt>
 800685a:	2800      	cmp	r0, #0
 800685c:	d07e      	beq.n	800695c <_dtoa_r+0x4f4>
 800685e:	9b02      	ldr	r3, [sp, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d07b      	beq.n	800695c <_dtoa_r+0x4f4>
 8006864:	f1bb 0f00 	cmp.w	fp, #0
 8006868:	dd38      	ble.n	80068dc <_dtoa_r+0x474>
 800686a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800686e:	2200      	movs	r2, #0
 8006870:	4b69      	ldr	r3, [pc, #420]	; (8006a18 <_dtoa_r+0x5b0>)
 8006872:	f7f9 fe31 	bl	80004d8 <__aeabi_dmul>
 8006876:	465c      	mov	r4, fp
 8006878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800687c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006880:	3701      	adds	r7, #1
 8006882:	4638      	mov	r0, r7
 8006884:	f7f9 fdbe 	bl	8000404 <__aeabi_i2d>
 8006888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688c:	f7f9 fe24 	bl	80004d8 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <_dtoa_r+0x5b4>)
 8006894:	f7f9 fc6a 	bl	800016c <__adddf3>
 8006898:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800689c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a0:	9611      	str	r6, [sp, #68]	; 0x44
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d15d      	bne.n	8006962 <_dtoa_r+0x4fa>
 80068a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068aa:	2200      	movs	r2, #0
 80068ac:	4b5c      	ldr	r3, [pc, #368]	; (8006a20 <_dtoa_r+0x5b8>)
 80068ae:	f7f9 fc5b 	bl	8000168 <__aeabi_dsub>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ba:	4633      	mov	r3, r6
 80068bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068be:	f7fa f89b 	bl	80009f8 <__aeabi_dcmpgt>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 829e 	bne.w	8006e04 <_dtoa_r+0x99c>
 80068c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068d2:	f7fa f873 	bl	80009bc <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8292 	bne.w	8006e00 <_dtoa_r+0x998>
 80068dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f2c0 8153 	blt.w	8006b92 <_dtoa_r+0x72a>
 80068ec:	f1b9 0f0e 	cmp.w	r9, #14
 80068f0:	f300 814f 	bgt.w	8006b92 <_dtoa_r+0x72a>
 80068f4:	4b45      	ldr	r3, [pc, #276]	; (8006a0c <_dtoa_r+0x5a4>)
 80068f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80068fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006902:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006904:	2b00      	cmp	r3, #0
 8006906:	f280 80db 	bge.w	8006ac0 <_dtoa_r+0x658>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f300 80d7 	bgt.w	8006ac0 <_dtoa_r+0x658>
 8006912:	f040 8274 	bne.w	8006dfe <_dtoa_r+0x996>
 8006916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800691a:	2200      	movs	r2, #0
 800691c:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <_dtoa_r+0x5b8>)
 800691e:	f7f9 fddb 	bl	80004d8 <__aeabi_dmul>
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	f7fa f85d 	bl	80009e4 <__aeabi_dcmpge>
 800692a:	9c02      	ldr	r4, [sp, #8]
 800692c:	4626      	mov	r6, r4
 800692e:	2800      	cmp	r0, #0
 8006930:	f040 824a 	bne.w	8006dc8 <_dtoa_r+0x960>
 8006934:	2331      	movs	r3, #49	; 0x31
 8006936:	9f08      	ldr	r7, [sp, #32]
 8006938:	f109 0901 	add.w	r9, r9, #1
 800693c:	f807 3b01 	strb.w	r3, [r7], #1
 8006940:	e246      	b.n	8006dd0 <_dtoa_r+0x968>
 8006942:	07e2      	lsls	r2, r4, #31
 8006944:	d505      	bpl.n	8006952 <_dtoa_r+0x4ea>
 8006946:	e9d6 2300 	ldrd	r2, r3, [r6]
 800694a:	f7f9 fdc5 	bl	80004d8 <__aeabi_dmul>
 800694e:	2301      	movs	r3, #1
 8006950:	3701      	adds	r7, #1
 8006952:	1064      	asrs	r4, r4, #1
 8006954:	3608      	adds	r6, #8
 8006956:	e76d      	b.n	8006834 <_dtoa_r+0x3cc>
 8006958:	2702      	movs	r7, #2
 800695a:	e770      	b.n	800683e <_dtoa_r+0x3d6>
 800695c:	46c8      	mov	r8, r9
 800695e:	9c02      	ldr	r4, [sp, #8]
 8006960:	e78f      	b.n	8006882 <_dtoa_r+0x41a>
 8006962:	9908      	ldr	r1, [sp, #32]
 8006964:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <_dtoa_r+0x5a4>)
 8006966:	4421      	add	r1, r4
 8006968:	9112      	str	r1, [sp, #72]	; 0x48
 800696a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800696c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006970:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006974:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006978:	2900      	cmp	r1, #0
 800697a:	d055      	beq.n	8006a28 <_dtoa_r+0x5c0>
 800697c:	2000      	movs	r0, #0
 800697e:	4929      	ldr	r1, [pc, #164]	; (8006a24 <_dtoa_r+0x5bc>)
 8006980:	f7f9 fed4 	bl	800072c <__aeabi_ddiv>
 8006984:	463b      	mov	r3, r7
 8006986:	4632      	mov	r2, r6
 8006988:	f7f9 fbee 	bl	8000168 <__aeabi_dsub>
 800698c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006990:	9f08      	ldr	r7, [sp, #32]
 8006992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006996:	f7fa f84f 	bl	8000a38 <__aeabi_d2iz>
 800699a:	4604      	mov	r4, r0
 800699c:	f7f9 fd32 	bl	8000404 <__aeabi_i2d>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a8:	f7f9 fbde 	bl	8000168 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	3430      	adds	r4, #48	; 0x30
 80069b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ba:	f807 4b01 	strb.w	r4, [r7], #1
 80069be:	f7f9 fffd 	bl	80009bc <__aeabi_dcmplt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d174      	bne.n	8006ab0 <_dtoa_r+0x648>
 80069c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ca:	2000      	movs	r0, #0
 80069cc:	4911      	ldr	r1, [pc, #68]	; (8006a14 <_dtoa_r+0x5ac>)
 80069ce:	f7f9 fbcb 	bl	8000168 <__aeabi_dsub>
 80069d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069d6:	f7f9 fff1 	bl	80009bc <__aeabi_dcmplt>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 80b6 	bne.w	8006b4c <_dtoa_r+0x6e4>
 80069e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069e2:	429f      	cmp	r7, r3
 80069e4:	f43f af7a 	beq.w	80068dc <_dtoa_r+0x474>
 80069e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069ec:	2200      	movs	r2, #0
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <_dtoa_r+0x5b0>)
 80069f0:	f7f9 fd72 	bl	80004d8 <__aeabi_dmul>
 80069f4:	2200      	movs	r2, #0
 80069f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <_dtoa_r+0x5b0>)
 8006a00:	f7f9 fd6a 	bl	80004d8 <__aeabi_dmul>
 8006a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a08:	e7c3      	b.n	8006992 <_dtoa_r+0x52a>
 8006a0a:	bf00      	nop
 8006a0c:	08008be8 	.word	0x08008be8
 8006a10:	08008bc0 	.word	0x08008bc0
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	40240000 	.word	0x40240000
 8006a1c:	401c0000 	.word	0x401c0000
 8006a20:	40140000 	.word	0x40140000
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f7f9 fd54 	bl	80004d8 <__aeabi_dmul>
 8006a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a36:	9c08      	ldr	r4, [sp, #32]
 8006a38:	9314      	str	r3, [sp, #80]	; 0x50
 8006a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a3e:	f7f9 fffb 	bl	8000a38 <__aeabi_d2iz>
 8006a42:	9015      	str	r0, [sp, #84]	; 0x54
 8006a44:	f7f9 fcde 	bl	8000404 <__aeabi_i2d>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a50:	f7f9 fb8a 	bl	8000168 <__aeabi_dsub>
 8006a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a56:	4606      	mov	r6, r0
 8006a58:	3330      	adds	r3, #48	; 0x30
 8006a5a:	f804 3b01 	strb.w	r3, [r4], #1
 8006a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a60:	460f      	mov	r7, r1
 8006a62:	429c      	cmp	r4, r3
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	d124      	bne.n	8006ab4 <_dtoa_r+0x64c>
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a6e:	4bb3      	ldr	r3, [pc, #716]	; (8006d3c <_dtoa_r+0x8d4>)
 8006a70:	f7f9 fb7c 	bl	800016c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 ffbc 	bl	80009f8 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d162      	bne.n	8006b4a <_dtoa_r+0x6e2>
 8006a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a88:	2000      	movs	r0, #0
 8006a8a:	49ac      	ldr	r1, [pc, #688]	; (8006d3c <_dtoa_r+0x8d4>)
 8006a8c:	f7f9 fb6c 	bl	8000168 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 ff90 	bl	80009bc <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af1d 	beq.w	80068dc <_dtoa_r+0x474>
 8006aa2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006aa4:	1e7b      	subs	r3, r7, #1
 8006aa6:	9314      	str	r3, [sp, #80]	; 0x50
 8006aa8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d0f8      	beq.n	8006aa2 <_dtoa_r+0x63a>
 8006ab0:	46c1      	mov	r9, r8
 8006ab2:	e03a      	b.n	8006b2a <_dtoa_r+0x6c2>
 8006ab4:	4ba2      	ldr	r3, [pc, #648]	; (8006d40 <_dtoa_r+0x8d8>)
 8006ab6:	f7f9 fd0f 	bl	80004d8 <__aeabi_dmul>
 8006aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006abe:	e7bc      	b.n	8006a3a <_dtoa_r+0x5d2>
 8006ac0:	9f08      	ldr	r7, [sp, #32]
 8006ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aca:	f7f9 fe2f 	bl	800072c <__aeabi_ddiv>
 8006ace:	f7f9 ffb3 	bl	8000a38 <__aeabi_d2iz>
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	f7f9 fc96 	bl	8000404 <__aeabi_i2d>
 8006ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006adc:	f7f9 fcfc 	bl	80004d8 <__aeabi_dmul>
 8006ae0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aec:	f7f9 fb3c 	bl	8000168 <__aeabi_dsub>
 8006af0:	f807 6b01 	strb.w	r6, [r7], #1
 8006af4:	9e08      	ldr	r6, [sp, #32]
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	1bbe      	subs	r6, r7, r6
 8006afa:	42b3      	cmp	r3, r6
 8006afc:	d13a      	bne.n	8006b74 <_dtoa_r+0x70c>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	f7f9 fb33 	bl	800016c <__adddf3>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b12:	f7f9 ff71 	bl	80009f8 <__aeabi_dcmpgt>
 8006b16:	bb58      	cbnz	r0, 8006b70 <_dtoa_r+0x708>
 8006b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b20:	f7f9 ff42 	bl	80009a8 <__aeabi_dcmpeq>
 8006b24:	b108      	cbz	r0, 8006b2a <_dtoa_r+0x6c2>
 8006b26:	07e1      	lsls	r1, r4, #31
 8006b28:	d422      	bmi.n	8006b70 <_dtoa_r+0x708>
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	4651      	mov	r1, sl
 8006b2e:	f000 faf1 	bl	8007114 <_Bfree>
 8006b32:	2300      	movs	r3, #0
 8006b34:	703b      	strb	r3, [r7, #0]
 8006b36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b38:	f109 0001 	add.w	r0, r9, #1
 8006b3c:	6018      	str	r0, [r3, #0]
 8006b3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f43f acdf 	beq.w	8006504 <_dtoa_r+0x9c>
 8006b46:	601f      	str	r7, [r3, #0]
 8006b48:	e4dc      	b.n	8006504 <_dtoa_r+0x9c>
 8006b4a:	4627      	mov	r7, r4
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	461f      	mov	r7, r3
 8006b50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b54:	2a39      	cmp	r2, #57	; 0x39
 8006b56:	d107      	bne.n	8006b68 <_dtoa_r+0x700>
 8006b58:	9a08      	ldr	r2, [sp, #32]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d1f7      	bne.n	8006b4e <_dtoa_r+0x6e6>
 8006b5e:	2230      	movs	r2, #48	; 0x30
 8006b60:	9908      	ldr	r1, [sp, #32]
 8006b62:	f108 0801 	add.w	r8, r8, #1
 8006b66:	700a      	strb	r2, [r1, #0]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	3201      	adds	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e79f      	b.n	8006ab0 <_dtoa_r+0x648>
 8006b70:	46c8      	mov	r8, r9
 8006b72:	e7eb      	b.n	8006b4c <_dtoa_r+0x6e4>
 8006b74:	2200      	movs	r2, #0
 8006b76:	4b72      	ldr	r3, [pc, #456]	; (8006d40 <_dtoa_r+0x8d8>)
 8006b78:	f7f9 fcae 	bl	80004d8 <__aeabi_dmul>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b84:	2200      	movs	r2, #0
 8006b86:	2300      	movs	r3, #0
 8006b88:	f7f9 ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d098      	beq.n	8006ac2 <_dtoa_r+0x65a>
 8006b90:	e7cb      	b.n	8006b2a <_dtoa_r+0x6c2>
 8006b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	f000 80cd 	beq.w	8006d34 <_dtoa_r+0x8cc>
 8006b9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b9c:	2a01      	cmp	r2, #1
 8006b9e:	f300 80af 	bgt.w	8006d00 <_dtoa_r+0x898>
 8006ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	f000 80a7 	beq.w	8006cf8 <_dtoa_r+0x890>
 8006baa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bb0:	9f06      	ldr	r7, [sp, #24]
 8006bb2:	9a06      	ldr	r2, [sp, #24]
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	441a      	add	r2, r3
 8006bb8:	9206      	str	r2, [sp, #24]
 8006bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	441a      	add	r2, r3
 8006bc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc2:	f000 fb61 	bl	8007288 <__i2b>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	dd0c      	ble.n	8006be6 <_dtoa_r+0x77e>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd09      	ble.n	8006be6 <_dtoa_r+0x77e>
 8006bd2:	42bb      	cmp	r3, r7
 8006bd4:	bfa8      	it	ge
 8006bd6:	463b      	movge	r3, r7
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	1aff      	subs	r7, r7, r3
 8006bdc:	1ad2      	subs	r2, r2, r3
 8006bde:	9206      	str	r2, [sp, #24]
 8006be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	9309      	str	r3, [sp, #36]	; 0x24
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	b1f3      	cbz	r3, 8006c28 <_dtoa_r+0x7c0>
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80a9 	beq.w	8006d44 <_dtoa_r+0x8dc>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	dd10      	ble.n	8006c18 <_dtoa_r+0x7b0>
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 fbfe 	bl	80073fc <__pow5mult>
 8006c00:	4652      	mov	r2, sl
 8006c02:	4601      	mov	r1, r0
 8006c04:	4606      	mov	r6, r0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 fb54 	bl	80072b4 <__multiply>
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4651      	mov	r1, sl
 8006c10:	4628      	mov	r0, r5
 8006c12:	f000 fa7f 	bl	8007114 <_Bfree>
 8006c16:	46c2      	mov	sl, r8
 8006c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1a:	1b1a      	subs	r2, r3, r4
 8006c1c:	d004      	beq.n	8006c28 <_dtoa_r+0x7c0>
 8006c1e:	4651      	mov	r1, sl
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 fbeb 	bl	80073fc <__pow5mult>
 8006c26:	4682      	mov	sl, r0
 8006c28:	2101      	movs	r1, #1
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 fb2c 	bl	8007288 <__i2b>
 8006c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c32:	4604      	mov	r4, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f340 8087 	ble.w	8006d48 <_dtoa_r+0x8e0>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4601      	mov	r1, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fbdc 	bl	80073fc <__pow5mult>
 8006c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c46:	4604      	mov	r4, r0
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	f340 8080 	ble.w	8006d4e <_dtoa_r+0x8e6>
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c58:	6918      	ldr	r0, [r3, #16]
 8006c5a:	f000 fac7 	bl	80071ec <__hi0bits>
 8006c5e:	f1c0 0020 	rsb	r0, r0, #32
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	4418      	add	r0, r3
 8006c66:	f010 001f 	ands.w	r0, r0, #31
 8006c6a:	f000 8092 	beq.w	8006d92 <_dtoa_r+0x92a>
 8006c6e:	f1c0 0320 	rsb	r3, r0, #32
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	f340 808a 	ble.w	8006d8c <_dtoa_r+0x924>
 8006c78:	f1c0 001c 	rsb	r0, r0, #28
 8006c7c:	9b06      	ldr	r3, [sp, #24]
 8006c7e:	4407      	add	r7, r0
 8006c80:	4403      	add	r3, r0
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	4403      	add	r3, r0
 8006c88:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8a:	9b06      	ldr	r3, [sp, #24]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd05      	ble.n	8006c9c <_dtoa_r+0x834>
 8006c90:	4651      	mov	r1, sl
 8006c92:	461a      	mov	r2, r3
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 fc0b 	bl	80074b0 <__lshift>
 8006c9a:	4682      	mov	sl, r0
 8006c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dd05      	ble.n	8006cae <_dtoa_r+0x846>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 fc02 	bl	80074b0 <__lshift>
 8006cac:	4604      	mov	r4, r0
 8006cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d070      	beq.n	8006d96 <_dtoa_r+0x92e>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	f000 fc66 	bl	8007588 <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	da6a      	bge.n	8006d96 <_dtoa_r+0x92e>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 fa46 	bl	8007158 <__multadd>
 8006ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cce:	4682      	mov	sl, r0
 8006cd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8193 	beq.w	8007000 <_dtoa_r+0xb98>
 8006cda:	4631      	mov	r1, r6
 8006cdc:	2300      	movs	r3, #0
 8006cde:	220a      	movs	r2, #10
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 fa39 	bl	8007158 <__multadd>
 8006ce6:	f1bb 0f00 	cmp.w	fp, #0
 8006cea:	4606      	mov	r6, r0
 8006cec:	f300 8093 	bgt.w	8006e16 <_dtoa_r+0x9ae>
 8006cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	dc57      	bgt.n	8006da6 <_dtoa_r+0x93e>
 8006cf6:	e08e      	b.n	8006e16 <_dtoa_r+0x9ae>
 8006cf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cfe:	e756      	b.n	8006bae <_dtoa_r+0x746>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	1e5c      	subs	r4, r3, #1
 8006d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	bfb7      	itett	lt
 8006d0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d0c:	1b1c      	subge	r4, r3, r4
 8006d0e:	1ae2      	sublt	r2, r4, r3
 8006d10:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006d12:	bfbe      	ittt	lt
 8006d14:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d16:	189b      	addlt	r3, r3, r2
 8006d18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	bfb8      	it	lt
 8006d1e:	2400      	movlt	r4, #0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfbb      	ittet	lt
 8006d24:	9b06      	ldrlt	r3, [sp, #24]
 8006d26:	9a02      	ldrlt	r2, [sp, #8]
 8006d28:	9f06      	ldrge	r7, [sp, #24]
 8006d2a:	1a9f      	sublt	r7, r3, r2
 8006d2c:	bfac      	ite	ge
 8006d2e:	9b02      	ldrge	r3, [sp, #8]
 8006d30:	2300      	movlt	r3, #0
 8006d32:	e73e      	b.n	8006bb2 <_dtoa_r+0x74a>
 8006d34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d36:	9f06      	ldr	r7, [sp, #24]
 8006d38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d3a:	e745      	b.n	8006bc8 <_dtoa_r+0x760>
 8006d3c:	3fe00000 	.word	0x3fe00000
 8006d40:	40240000 	.word	0x40240000
 8006d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d46:	e76a      	b.n	8006c1e <_dtoa_r+0x7b6>
 8006d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	dc19      	bgt.n	8006d82 <_dtoa_r+0x91a>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	b9bb      	cbnz	r3, 8006d82 <_dtoa_r+0x91a>
 8006d52:	9b05      	ldr	r3, [sp, #20]
 8006d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d58:	b99b      	cbnz	r3, 8006d82 <_dtoa_r+0x91a>
 8006d5a:	9b05      	ldr	r3, [sp, #20]
 8006d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	0d1b      	lsrs	r3, r3, #20
 8006d62:	051b      	lsls	r3, r3, #20
 8006d64:	b183      	cbz	r3, 8006d88 <_dtoa_r+0x920>
 8006d66:	f04f 0801 	mov.w	r8, #1
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	9306      	str	r3, [sp, #24]
 8006d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d72:	3301      	adds	r3, #1
 8006d74:	9309      	str	r3, [sp, #36]	; 0x24
 8006d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f af6a 	bne.w	8006c52 <_dtoa_r+0x7ea>
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e76f      	b.n	8006c62 <_dtoa_r+0x7fa>
 8006d82:	f04f 0800 	mov.w	r8, #0
 8006d86:	e7f6      	b.n	8006d76 <_dtoa_r+0x90e>
 8006d88:	4698      	mov	r8, r3
 8006d8a:	e7f4      	b.n	8006d76 <_dtoa_r+0x90e>
 8006d8c:	f43f af7d 	beq.w	8006c8a <_dtoa_r+0x822>
 8006d90:	4618      	mov	r0, r3
 8006d92:	301c      	adds	r0, #28
 8006d94:	e772      	b.n	8006c7c <_dtoa_r+0x814>
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc36      	bgt.n	8006e0a <_dtoa_r+0x9a2>
 8006d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	dd33      	ble.n	8006e0a <_dtoa_r+0x9a2>
 8006da2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006da6:	f1bb 0f00 	cmp.w	fp, #0
 8006daa:	d10d      	bne.n	8006dc8 <_dtoa_r+0x960>
 8006dac:	4621      	mov	r1, r4
 8006dae:	465b      	mov	r3, fp
 8006db0:	2205      	movs	r2, #5
 8006db2:	4628      	mov	r0, r5
 8006db4:	f000 f9d0 	bl	8007158 <__multadd>
 8006db8:	4601      	mov	r1, r0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f000 fbe3 	bl	8007588 <__mcmp>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f73f adb6 	bgt.w	8006934 <_dtoa_r+0x4cc>
 8006dc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dca:	9f08      	ldr	r7, [sp, #32]
 8006dcc:	ea6f 0903 	mvn.w	r9, r3
 8006dd0:	f04f 0800 	mov.w	r8, #0
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f99c 	bl	8007114 <_Bfree>
 8006ddc:	2e00      	cmp	r6, #0
 8006dde:	f43f aea4 	beq.w	8006b2a <_dtoa_r+0x6c2>
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	d005      	beq.n	8006df4 <_dtoa_r+0x98c>
 8006de8:	45b0      	cmp	r8, r6
 8006dea:	d003      	beq.n	8006df4 <_dtoa_r+0x98c>
 8006dec:	4641      	mov	r1, r8
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f990 	bl	8007114 <_Bfree>
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 f98c 	bl	8007114 <_Bfree>
 8006dfc:	e695      	b.n	8006b2a <_dtoa_r+0x6c2>
 8006dfe:	2400      	movs	r4, #0
 8006e00:	4626      	mov	r6, r4
 8006e02:	e7e1      	b.n	8006dc8 <_dtoa_r+0x960>
 8006e04:	46c1      	mov	r9, r8
 8006e06:	4626      	mov	r6, r4
 8006e08:	e594      	b.n	8006934 <_dtoa_r+0x4cc>
 8006e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80fc 	beq.w	800700e <_dtoa_r+0xba6>
 8006e16:	2f00      	cmp	r7, #0
 8006e18:	dd05      	ble.n	8006e26 <_dtoa_r+0x9be>
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	463a      	mov	r2, r7
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 fb46 	bl	80074b0 <__lshift>
 8006e24:	4606      	mov	r6, r0
 8006e26:	f1b8 0f00 	cmp.w	r8, #0
 8006e2a:	d05c      	beq.n	8006ee6 <_dtoa_r+0xa7e>
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	6871      	ldr	r1, [r6, #4]
 8006e30:	f000 f930 	bl	8007094 <_Balloc>
 8006e34:	4607      	mov	r7, r0
 8006e36:	b928      	cbnz	r0, 8006e44 <_dtoa_r+0x9dc>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e3e:	4b7e      	ldr	r3, [pc, #504]	; (8007038 <_dtoa_r+0xbd0>)
 8006e40:	f7ff bb26 	b.w	8006490 <_dtoa_r+0x28>
 8006e44:	6932      	ldr	r2, [r6, #16]
 8006e46:	f106 010c 	add.w	r1, r6, #12
 8006e4a:	3202      	adds	r2, #2
 8006e4c:	0092      	lsls	r2, r2, #2
 8006e4e:	300c      	adds	r0, #12
 8006e50:	f000 f912 	bl	8007078 <memcpy>
 8006e54:	2201      	movs	r2, #1
 8006e56:	4639      	mov	r1, r7
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 fb29 	bl	80074b0 <__lshift>
 8006e5e:	46b0      	mov	r8, r6
 8006e60:	4606      	mov	r6, r0
 8006e62:	9b08      	ldr	r3, [sp, #32]
 8006e64:	3301      	adds	r3, #1
 8006e66:	9302      	str	r3, [sp, #8]
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	445b      	add	r3, fp
 8006e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	9309      	str	r3, [sp, #36]	; 0x24
 8006e76:	9b02      	ldr	r3, [sp, #8]
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4650      	mov	r0, sl
 8006e7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e80:	f7ff fa62 	bl	8006348 <quorem>
 8006e84:	4603      	mov	r3, r0
 8006e86:	4641      	mov	r1, r8
 8006e88:	3330      	adds	r3, #48	; 0x30
 8006e8a:	9004      	str	r0, [sp, #16]
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e90:	f000 fb7a 	bl	8007588 <__mcmp>
 8006e94:	4632      	mov	r2, r6
 8006e96:	9006      	str	r0, [sp, #24]
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 fb90 	bl	80075c0 <__mdiff>
 8006ea0:	68c2      	ldr	r2, [r0, #12]
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea6:	bb02      	cbnz	r2, 8006eea <_dtoa_r+0xa82>
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f000 fb6c 	bl	8007588 <__mcmp>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006ebc:	f000 f92a 	bl	8007114 <_Bfree>
 8006ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec4:	9f02      	ldr	r7, [sp, #8]
 8006ec6:	ea43 0102 	orr.w	r1, r3, r2
 8006eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed0:	d10d      	bne.n	8006eee <_dtoa_r+0xa86>
 8006ed2:	2b39      	cmp	r3, #57	; 0x39
 8006ed4:	d027      	beq.n	8006f26 <_dtoa_r+0xabe>
 8006ed6:	9a06      	ldr	r2, [sp, #24]
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	dd01      	ble.n	8006ee0 <_dtoa_r+0xa78>
 8006edc:	9b04      	ldr	r3, [sp, #16]
 8006ede:	3331      	adds	r3, #49	; 0x31
 8006ee0:	f88b 3000 	strb.w	r3, [fp]
 8006ee4:	e776      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	e7b9      	b.n	8006e5e <_dtoa_r+0x9f6>
 8006eea:	2201      	movs	r2, #1
 8006eec:	e7e2      	b.n	8006eb4 <_dtoa_r+0xa4c>
 8006eee:	9906      	ldr	r1, [sp, #24]
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	db04      	blt.n	8006efe <_dtoa_r+0xa96>
 8006ef4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006ef6:	4301      	orrs	r1, r0
 8006ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006efa:	4301      	orrs	r1, r0
 8006efc:	d120      	bne.n	8006f40 <_dtoa_r+0xad8>
 8006efe:	2a00      	cmp	r2, #0
 8006f00:	ddee      	ble.n	8006ee0 <_dtoa_r+0xa78>
 8006f02:	4651      	mov	r1, sl
 8006f04:	2201      	movs	r2, #1
 8006f06:	4628      	mov	r0, r5
 8006f08:	9302      	str	r3, [sp, #8]
 8006f0a:	f000 fad1 	bl	80074b0 <__lshift>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4682      	mov	sl, r0
 8006f12:	f000 fb39 	bl	8007588 <__mcmp>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	dc02      	bgt.n	8006f22 <_dtoa_r+0xaba>
 8006f1c:	d1e0      	bne.n	8006ee0 <_dtoa_r+0xa78>
 8006f1e:	07da      	lsls	r2, r3, #31
 8006f20:	d5de      	bpl.n	8006ee0 <_dtoa_r+0xa78>
 8006f22:	2b39      	cmp	r3, #57	; 0x39
 8006f24:	d1da      	bne.n	8006edc <_dtoa_r+0xa74>
 8006f26:	2339      	movs	r3, #57	; 0x39
 8006f28:	f88b 3000 	strb.w	r3, [fp]
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	461f      	mov	r7, r3
 8006f30:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2a39      	cmp	r2, #57	; 0x39
 8006f38:	d050      	beq.n	8006fdc <_dtoa_r+0xb74>
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e749      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	dd03      	ble.n	8006f4c <_dtoa_r+0xae4>
 8006f44:	2b39      	cmp	r3, #57	; 0x39
 8006f46:	d0ee      	beq.n	8006f26 <_dtoa_r+0xabe>
 8006f48:	3301      	adds	r3, #1
 8006f4a:	e7c9      	b.n	8006ee0 <_dtoa_r+0xa78>
 8006f4c:	9a02      	ldr	r2, [sp, #8]
 8006f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f54:	428a      	cmp	r2, r1
 8006f56:	d02a      	beq.n	8006fae <_dtoa_r+0xb46>
 8006f58:	4651      	mov	r1, sl
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f8fa 	bl	8007158 <__multadd>
 8006f64:	45b0      	cmp	r8, r6
 8006f66:	4682      	mov	sl, r0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	f04f 020a 	mov.w	r2, #10
 8006f70:	4641      	mov	r1, r8
 8006f72:	4628      	mov	r0, r5
 8006f74:	d107      	bne.n	8006f86 <_dtoa_r+0xb1e>
 8006f76:	f000 f8ef 	bl	8007158 <__multadd>
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	9b02      	ldr	r3, [sp, #8]
 8006f80:	3301      	adds	r3, #1
 8006f82:	9302      	str	r3, [sp, #8]
 8006f84:	e777      	b.n	8006e76 <_dtoa_r+0xa0e>
 8006f86:	f000 f8e7 	bl	8007158 <__multadd>
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4680      	mov	r8, r0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	220a      	movs	r2, #10
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f8e0 	bl	8007158 <__multadd>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	e7f0      	b.n	8006f7e <_dtoa_r+0xb16>
 8006f9c:	f1bb 0f00 	cmp.w	fp, #0
 8006fa0:	bfcc      	ite	gt
 8006fa2:	465f      	movgt	r7, fp
 8006fa4:	2701      	movle	r7, #1
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	9a08      	ldr	r2, [sp, #32]
 8006fac:	4417      	add	r7, r2
 8006fae:	4651      	mov	r1, sl
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	9302      	str	r3, [sp, #8]
 8006fb6:	f000 fa7b 	bl	80074b0 <__lshift>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	f000 fae3 	bl	8007588 <__mcmp>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	dcb2      	bgt.n	8006f2c <_dtoa_r+0xac4>
 8006fc6:	d102      	bne.n	8006fce <_dtoa_r+0xb66>
 8006fc8:	9b02      	ldr	r3, [sp, #8]
 8006fca:	07db      	lsls	r3, r3, #31
 8006fcc:	d4ae      	bmi.n	8006f2c <_dtoa_r+0xac4>
 8006fce:	463b      	mov	r3, r7
 8006fd0:	461f      	mov	r7, r3
 8006fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd6:	2a30      	cmp	r2, #48	; 0x30
 8006fd8:	d0fa      	beq.n	8006fd0 <_dtoa_r+0xb68>
 8006fda:	e6fb      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006fdc:	9a08      	ldr	r2, [sp, #32]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d1a5      	bne.n	8006f2e <_dtoa_r+0xac6>
 8006fe2:	2331      	movs	r3, #49	; 0x31
 8006fe4:	f109 0901 	add.w	r9, r9, #1
 8006fe8:	7013      	strb	r3, [r2, #0]
 8006fea:	e6f3      	b.n	8006dd4 <_dtoa_r+0x96c>
 8006fec:	4b13      	ldr	r3, [pc, #76]	; (800703c <_dtoa_r+0xbd4>)
 8006fee:	f7ff baa7 	b.w	8006540 <_dtoa_r+0xd8>
 8006ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f aa80 	bne.w	80064fa <_dtoa_r+0x92>
 8006ffa:	4b11      	ldr	r3, [pc, #68]	; (8007040 <_dtoa_r+0xbd8>)
 8006ffc:	f7ff baa0 	b.w	8006540 <_dtoa_r+0xd8>
 8007000:	f1bb 0f00 	cmp.w	fp, #0
 8007004:	dc03      	bgt.n	800700e <_dtoa_r+0xba6>
 8007006:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007008:	2b02      	cmp	r3, #2
 800700a:	f73f aecc 	bgt.w	8006da6 <_dtoa_r+0x93e>
 800700e:	9f08      	ldr	r7, [sp, #32]
 8007010:	4621      	mov	r1, r4
 8007012:	4650      	mov	r0, sl
 8007014:	f7ff f998 	bl	8006348 <quorem>
 8007018:	9a08      	ldr	r2, [sp, #32]
 800701a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800701e:	f807 3b01 	strb.w	r3, [r7], #1
 8007022:	1aba      	subs	r2, r7, r2
 8007024:	4593      	cmp	fp, r2
 8007026:	ddb9      	ble.n	8006f9c <_dtoa_r+0xb34>
 8007028:	4651      	mov	r1, sl
 800702a:	2300      	movs	r3, #0
 800702c:	220a      	movs	r2, #10
 800702e:	4628      	mov	r0, r5
 8007030:	f000 f892 	bl	8007158 <__multadd>
 8007034:	4682      	mov	sl, r0
 8007036:	e7eb      	b.n	8007010 <_dtoa_r+0xba8>
 8007038:	08008b4b 	.word	0x08008b4b
 800703c:	08008aa4 	.word	0x08008aa4
 8007040:	08008ac8 	.word	0x08008ac8

08007044 <_localeconv_r>:
 8007044:	4800      	ldr	r0, [pc, #0]	; (8007048 <_localeconv_r+0x4>)
 8007046:	4770      	bx	lr
 8007048:	20000178 	.word	0x20000178

0800704c <malloc>:
 800704c:	4b02      	ldr	r3, [pc, #8]	; (8007058 <malloc+0xc>)
 800704e:	4601      	mov	r1, r0
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f000 bbfb 	b.w	800784c <_malloc_r>
 8007056:	bf00      	nop
 8007058:	20000024 	.word	0x20000024

0800705c <memchr>:
 800705c:	4603      	mov	r3, r0
 800705e:	b510      	push	{r4, lr}
 8007060:	b2c9      	uxtb	r1, r1
 8007062:	4402      	add	r2, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	4618      	mov	r0, r3
 8007068:	d101      	bne.n	800706e <memchr+0x12>
 800706a:	2000      	movs	r0, #0
 800706c:	e003      	b.n	8007076 <memchr+0x1a>
 800706e:	7804      	ldrb	r4, [r0, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	428c      	cmp	r4, r1
 8007074:	d1f6      	bne.n	8007064 <memchr+0x8>
 8007076:	bd10      	pop	{r4, pc}

08007078 <memcpy>:
 8007078:	440a      	add	r2, r1
 800707a:	4291      	cmp	r1, r2
 800707c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007080:	d100      	bne.n	8007084 <memcpy+0xc>
 8007082:	4770      	bx	lr
 8007084:	b510      	push	{r4, lr}
 8007086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800708a:	4291      	cmp	r1, r2
 800708c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007090:	d1f9      	bne.n	8007086 <memcpy+0xe>
 8007092:	bd10      	pop	{r4, pc}

08007094 <_Balloc>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007098:	4604      	mov	r4, r0
 800709a:	460d      	mov	r5, r1
 800709c:	b976      	cbnz	r6, 80070bc <_Balloc+0x28>
 800709e:	2010      	movs	r0, #16
 80070a0:	f7ff ffd4 	bl	800704c <malloc>
 80070a4:	4602      	mov	r2, r0
 80070a6:	6260      	str	r0, [r4, #36]	; 0x24
 80070a8:	b920      	cbnz	r0, 80070b4 <_Balloc+0x20>
 80070aa:	2166      	movs	r1, #102	; 0x66
 80070ac:	4b17      	ldr	r3, [pc, #92]	; (800710c <_Balloc+0x78>)
 80070ae:	4818      	ldr	r0, [pc, #96]	; (8007110 <_Balloc+0x7c>)
 80070b0:	f000 fc36 	bl	8007920 <__assert_func>
 80070b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070b8:	6006      	str	r6, [r0, #0]
 80070ba:	60c6      	str	r6, [r0, #12]
 80070bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070be:	68f3      	ldr	r3, [r6, #12]
 80070c0:	b183      	cbz	r3, 80070e4 <_Balloc+0x50>
 80070c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ca:	b9b8      	cbnz	r0, 80070fc <_Balloc+0x68>
 80070cc:	2101      	movs	r1, #1
 80070ce:	fa01 f605 	lsl.w	r6, r1, r5
 80070d2:	1d72      	adds	r2, r6, #5
 80070d4:	4620      	mov	r0, r4
 80070d6:	0092      	lsls	r2, r2, #2
 80070d8:	f000 fb5e 	bl	8007798 <_calloc_r>
 80070dc:	b160      	cbz	r0, 80070f8 <_Balloc+0x64>
 80070de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070e2:	e00e      	b.n	8007102 <_Balloc+0x6e>
 80070e4:	2221      	movs	r2, #33	; 0x21
 80070e6:	2104      	movs	r1, #4
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 fb55 	bl	8007798 <_calloc_r>
 80070ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f0:	60f0      	str	r0, [r6, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e4      	bne.n	80070c2 <_Balloc+0x2e>
 80070f8:	2000      	movs	r0, #0
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	6802      	ldr	r2, [r0, #0]
 80070fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007102:	2300      	movs	r3, #0
 8007104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007108:	e7f7      	b.n	80070fa <_Balloc+0x66>
 800710a:	bf00      	nop
 800710c:	08008ad5 	.word	0x08008ad5
 8007110:	08008b5c 	.word	0x08008b5c

08007114 <_Bfree>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007118:	4605      	mov	r5, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b976      	cbnz	r6, 800713c <_Bfree+0x28>
 800711e:	2010      	movs	r0, #16
 8007120:	f7ff ff94 	bl	800704c <malloc>
 8007124:	4602      	mov	r2, r0
 8007126:	6268      	str	r0, [r5, #36]	; 0x24
 8007128:	b920      	cbnz	r0, 8007134 <_Bfree+0x20>
 800712a:	218a      	movs	r1, #138	; 0x8a
 800712c:	4b08      	ldr	r3, [pc, #32]	; (8007150 <_Bfree+0x3c>)
 800712e:	4809      	ldr	r0, [pc, #36]	; (8007154 <_Bfree+0x40>)
 8007130:	f000 fbf6 	bl	8007920 <__assert_func>
 8007134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007138:	6006      	str	r6, [r0, #0]
 800713a:	60c6      	str	r6, [r0, #12]
 800713c:	b13c      	cbz	r4, 800714e <_Bfree+0x3a>
 800713e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007140:	6862      	ldr	r2, [r4, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007148:	6021      	str	r1, [r4, #0]
 800714a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	08008ad5 	.word	0x08008ad5
 8007154:	08008b5c 	.word	0x08008b5c

08007158 <__multadd>:
 8007158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715c:	4698      	mov	r8, r3
 800715e:	460c      	mov	r4, r1
 8007160:	2300      	movs	r3, #0
 8007162:	690e      	ldr	r6, [r1, #16]
 8007164:	4607      	mov	r7, r0
 8007166:	f101 0014 	add.w	r0, r1, #20
 800716a:	6805      	ldr	r5, [r0, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	b2a9      	uxth	r1, r5
 8007170:	fb02 8101 	mla	r1, r2, r1, r8
 8007174:	0c2d      	lsrs	r5, r5, #16
 8007176:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800717a:	fb02 c505 	mla	r5, r2, r5, ip
 800717e:	b289      	uxth	r1, r1
 8007180:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007184:	429e      	cmp	r6, r3
 8007186:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800718a:	f840 1b04 	str.w	r1, [r0], #4
 800718e:	dcec      	bgt.n	800716a <__multadd+0x12>
 8007190:	f1b8 0f00 	cmp.w	r8, #0
 8007194:	d022      	beq.n	80071dc <__multadd+0x84>
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	42b3      	cmp	r3, r6
 800719a:	dc19      	bgt.n	80071d0 <__multadd+0x78>
 800719c:	6861      	ldr	r1, [r4, #4]
 800719e:	4638      	mov	r0, r7
 80071a0:	3101      	adds	r1, #1
 80071a2:	f7ff ff77 	bl	8007094 <_Balloc>
 80071a6:	4605      	mov	r5, r0
 80071a8:	b928      	cbnz	r0, 80071b6 <__multadd+0x5e>
 80071aa:	4602      	mov	r2, r0
 80071ac:	21b5      	movs	r1, #181	; 0xb5
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <__multadd+0x8c>)
 80071b0:	480d      	ldr	r0, [pc, #52]	; (80071e8 <__multadd+0x90>)
 80071b2:	f000 fbb5 	bl	8007920 <__assert_func>
 80071b6:	6922      	ldr	r2, [r4, #16]
 80071b8:	f104 010c 	add.w	r1, r4, #12
 80071bc:	3202      	adds	r2, #2
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	300c      	adds	r0, #12
 80071c2:	f7ff ff59 	bl	8007078 <memcpy>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff ffa3 	bl	8007114 <_Bfree>
 80071ce:	462c      	mov	r4, r5
 80071d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80071d4:	3601      	adds	r6, #1
 80071d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80071da:	6126      	str	r6, [r4, #16]
 80071dc:	4620      	mov	r0, r4
 80071de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e2:	bf00      	nop
 80071e4:	08008b4b 	.word	0x08008b4b
 80071e8:	08008b5c 	.word	0x08008b5c

080071ec <__hi0bits>:
 80071ec:	0c02      	lsrs	r2, r0, #16
 80071ee:	0412      	lsls	r2, r2, #16
 80071f0:	4603      	mov	r3, r0
 80071f2:	b9ca      	cbnz	r2, 8007228 <__hi0bits+0x3c>
 80071f4:	0403      	lsls	r3, r0, #16
 80071f6:	2010      	movs	r0, #16
 80071f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071fc:	bf04      	itt	eq
 80071fe:	021b      	lsleq	r3, r3, #8
 8007200:	3008      	addeq	r0, #8
 8007202:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007206:	bf04      	itt	eq
 8007208:	011b      	lsleq	r3, r3, #4
 800720a:	3004      	addeq	r0, #4
 800720c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007210:	bf04      	itt	eq
 8007212:	009b      	lsleq	r3, r3, #2
 8007214:	3002      	addeq	r0, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	db05      	blt.n	8007226 <__hi0bits+0x3a>
 800721a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800721e:	f100 0001 	add.w	r0, r0, #1
 8007222:	bf08      	it	eq
 8007224:	2020      	moveq	r0, #32
 8007226:	4770      	bx	lr
 8007228:	2000      	movs	r0, #0
 800722a:	e7e5      	b.n	80071f8 <__hi0bits+0xc>

0800722c <__lo0bits>:
 800722c:	6803      	ldr	r3, [r0, #0]
 800722e:	4602      	mov	r2, r0
 8007230:	f013 0007 	ands.w	r0, r3, #7
 8007234:	d00b      	beq.n	800724e <__lo0bits+0x22>
 8007236:	07d9      	lsls	r1, r3, #31
 8007238:	d422      	bmi.n	8007280 <__lo0bits+0x54>
 800723a:	0798      	lsls	r0, r3, #30
 800723c:	bf49      	itett	mi
 800723e:	085b      	lsrmi	r3, r3, #1
 8007240:	089b      	lsrpl	r3, r3, #2
 8007242:	2001      	movmi	r0, #1
 8007244:	6013      	strmi	r3, [r2, #0]
 8007246:	bf5c      	itt	pl
 8007248:	2002      	movpl	r0, #2
 800724a:	6013      	strpl	r3, [r2, #0]
 800724c:	4770      	bx	lr
 800724e:	b299      	uxth	r1, r3
 8007250:	b909      	cbnz	r1, 8007256 <__lo0bits+0x2a>
 8007252:	2010      	movs	r0, #16
 8007254:	0c1b      	lsrs	r3, r3, #16
 8007256:	f013 0fff 	tst.w	r3, #255	; 0xff
 800725a:	bf04      	itt	eq
 800725c:	0a1b      	lsreq	r3, r3, #8
 800725e:	3008      	addeq	r0, #8
 8007260:	0719      	lsls	r1, r3, #28
 8007262:	bf04      	itt	eq
 8007264:	091b      	lsreq	r3, r3, #4
 8007266:	3004      	addeq	r0, #4
 8007268:	0799      	lsls	r1, r3, #30
 800726a:	bf04      	itt	eq
 800726c:	089b      	lsreq	r3, r3, #2
 800726e:	3002      	addeq	r0, #2
 8007270:	07d9      	lsls	r1, r3, #31
 8007272:	d403      	bmi.n	800727c <__lo0bits+0x50>
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	f100 0001 	add.w	r0, r0, #1
 800727a:	d003      	beq.n	8007284 <__lo0bits+0x58>
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	4770      	bx	lr
 8007280:	2000      	movs	r0, #0
 8007282:	4770      	bx	lr
 8007284:	2020      	movs	r0, #32
 8007286:	4770      	bx	lr

08007288 <__i2b>:
 8007288:	b510      	push	{r4, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	2101      	movs	r1, #1
 800728e:	f7ff ff01 	bl	8007094 <_Balloc>
 8007292:	4602      	mov	r2, r0
 8007294:	b928      	cbnz	r0, 80072a2 <__i2b+0x1a>
 8007296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800729a:	4b04      	ldr	r3, [pc, #16]	; (80072ac <__i2b+0x24>)
 800729c:	4804      	ldr	r0, [pc, #16]	; (80072b0 <__i2b+0x28>)
 800729e:	f000 fb3f 	bl	8007920 <__assert_func>
 80072a2:	2301      	movs	r3, #1
 80072a4:	6144      	str	r4, [r0, #20]
 80072a6:	6103      	str	r3, [r0, #16]
 80072a8:	bd10      	pop	{r4, pc}
 80072aa:	bf00      	nop
 80072ac:	08008b4b 	.word	0x08008b4b
 80072b0:	08008b5c 	.word	0x08008b5c

080072b4 <__multiply>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4614      	mov	r4, r2
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	460d      	mov	r5, r1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	bfbe      	ittt	lt
 80072c4:	460b      	movlt	r3, r1
 80072c6:	4625      	movlt	r5, r4
 80072c8:	461c      	movlt	r4, r3
 80072ca:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072d2:	68ab      	ldr	r3, [r5, #8]
 80072d4:	6869      	ldr	r1, [r5, #4]
 80072d6:	eb0a 0709 	add.w	r7, sl, r9
 80072da:	42bb      	cmp	r3, r7
 80072dc:	b085      	sub	sp, #20
 80072de:	bfb8      	it	lt
 80072e0:	3101      	addlt	r1, #1
 80072e2:	f7ff fed7 	bl	8007094 <_Balloc>
 80072e6:	b930      	cbnz	r0, 80072f6 <__multiply+0x42>
 80072e8:	4602      	mov	r2, r0
 80072ea:	f240 115d 	movw	r1, #349	; 0x15d
 80072ee:	4b41      	ldr	r3, [pc, #260]	; (80073f4 <__multiply+0x140>)
 80072f0:	4841      	ldr	r0, [pc, #260]	; (80073f8 <__multiply+0x144>)
 80072f2:	f000 fb15 	bl	8007920 <__assert_func>
 80072f6:	f100 0614 	add.w	r6, r0, #20
 80072fa:	4633      	mov	r3, r6
 80072fc:	2200      	movs	r2, #0
 80072fe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007302:	4543      	cmp	r3, r8
 8007304:	d31e      	bcc.n	8007344 <__multiply+0x90>
 8007306:	f105 0c14 	add.w	ip, r5, #20
 800730a:	f104 0314 	add.w	r3, r4, #20
 800730e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007312:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007316:	9202      	str	r2, [sp, #8]
 8007318:	ebac 0205 	sub.w	r2, ip, r5
 800731c:	3a15      	subs	r2, #21
 800731e:	f022 0203 	bic.w	r2, r2, #3
 8007322:	3204      	adds	r2, #4
 8007324:	f105 0115 	add.w	r1, r5, #21
 8007328:	458c      	cmp	ip, r1
 800732a:	bf38      	it	cc
 800732c:	2204      	movcc	r2, #4
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9a02      	ldr	r2, [sp, #8]
 8007332:	9303      	str	r3, [sp, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d808      	bhi.n	800734a <__multiply+0x96>
 8007338:	2f00      	cmp	r7, #0
 800733a:	dc55      	bgt.n	80073e8 <__multiply+0x134>
 800733c:	6107      	str	r7, [r0, #16]
 800733e:	b005      	add	sp, #20
 8007340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007344:	f843 2b04 	str.w	r2, [r3], #4
 8007348:	e7db      	b.n	8007302 <__multiply+0x4e>
 800734a:	f8b3 a000 	ldrh.w	sl, [r3]
 800734e:	f1ba 0f00 	cmp.w	sl, #0
 8007352:	d020      	beq.n	8007396 <__multiply+0xe2>
 8007354:	46b1      	mov	r9, r6
 8007356:	2200      	movs	r2, #0
 8007358:	f105 0e14 	add.w	lr, r5, #20
 800735c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007360:	f8d9 b000 	ldr.w	fp, [r9]
 8007364:	b2a1      	uxth	r1, r4
 8007366:	fa1f fb8b 	uxth.w	fp, fp
 800736a:	fb0a b101 	mla	r1, sl, r1, fp
 800736e:	4411      	add	r1, r2
 8007370:	f8d9 2000 	ldr.w	r2, [r9]
 8007374:	0c24      	lsrs	r4, r4, #16
 8007376:	0c12      	lsrs	r2, r2, #16
 8007378:	fb0a 2404 	mla	r4, sl, r4, r2
 800737c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007380:	b289      	uxth	r1, r1
 8007382:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007386:	45f4      	cmp	ip, lr
 8007388:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800738c:	f849 1b04 	str.w	r1, [r9], #4
 8007390:	d8e4      	bhi.n	800735c <__multiply+0xa8>
 8007392:	9901      	ldr	r1, [sp, #4]
 8007394:	5072      	str	r2, [r6, r1]
 8007396:	9a03      	ldr	r2, [sp, #12]
 8007398:	3304      	adds	r3, #4
 800739a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800739e:	f1b9 0f00 	cmp.w	r9, #0
 80073a2:	d01f      	beq.n	80073e4 <__multiply+0x130>
 80073a4:	46b6      	mov	lr, r6
 80073a6:	f04f 0a00 	mov.w	sl, #0
 80073aa:	6834      	ldr	r4, [r6, #0]
 80073ac:	f105 0114 	add.w	r1, r5, #20
 80073b0:	880a      	ldrh	r2, [r1, #0]
 80073b2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073b6:	b2a4      	uxth	r4, r4
 80073b8:	fb09 b202 	mla	r2, r9, r2, fp
 80073bc:	4492      	add	sl, r2
 80073be:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073c2:	f84e 4b04 	str.w	r4, [lr], #4
 80073c6:	f851 4b04 	ldr.w	r4, [r1], #4
 80073ca:	f8be 2000 	ldrh.w	r2, [lr]
 80073ce:	0c24      	lsrs	r4, r4, #16
 80073d0:	fb09 2404 	mla	r4, r9, r4, r2
 80073d4:	458c      	cmp	ip, r1
 80073d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073de:	d8e7      	bhi.n	80073b0 <__multiply+0xfc>
 80073e0:	9a01      	ldr	r2, [sp, #4]
 80073e2:	50b4      	str	r4, [r6, r2]
 80073e4:	3604      	adds	r6, #4
 80073e6:	e7a3      	b.n	8007330 <__multiply+0x7c>
 80073e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1a5      	bne.n	800733c <__multiply+0x88>
 80073f0:	3f01      	subs	r7, #1
 80073f2:	e7a1      	b.n	8007338 <__multiply+0x84>
 80073f4:	08008b4b 	.word	0x08008b4b
 80073f8:	08008b5c 	.word	0x08008b5c

080073fc <__pow5mult>:
 80073fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007400:	4615      	mov	r5, r2
 8007402:	f012 0203 	ands.w	r2, r2, #3
 8007406:	4606      	mov	r6, r0
 8007408:	460f      	mov	r7, r1
 800740a:	d007      	beq.n	800741c <__pow5mult+0x20>
 800740c:	4c25      	ldr	r4, [pc, #148]	; (80074a4 <__pow5mult+0xa8>)
 800740e:	3a01      	subs	r2, #1
 8007410:	2300      	movs	r3, #0
 8007412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007416:	f7ff fe9f 	bl	8007158 <__multadd>
 800741a:	4607      	mov	r7, r0
 800741c:	10ad      	asrs	r5, r5, #2
 800741e:	d03d      	beq.n	800749c <__pow5mult+0xa0>
 8007420:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007422:	b97c      	cbnz	r4, 8007444 <__pow5mult+0x48>
 8007424:	2010      	movs	r0, #16
 8007426:	f7ff fe11 	bl	800704c <malloc>
 800742a:	4602      	mov	r2, r0
 800742c:	6270      	str	r0, [r6, #36]	; 0x24
 800742e:	b928      	cbnz	r0, 800743c <__pow5mult+0x40>
 8007430:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007434:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <__pow5mult+0xac>)
 8007436:	481d      	ldr	r0, [pc, #116]	; (80074ac <__pow5mult+0xb0>)
 8007438:	f000 fa72 	bl	8007920 <__assert_func>
 800743c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007440:	6004      	str	r4, [r0, #0]
 8007442:	60c4      	str	r4, [r0, #12]
 8007444:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800744c:	b94c      	cbnz	r4, 8007462 <__pow5mult+0x66>
 800744e:	f240 2171 	movw	r1, #625	; 0x271
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff ff18 	bl	8007288 <__i2b>
 8007458:	2300      	movs	r3, #0
 800745a:	4604      	mov	r4, r0
 800745c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007460:	6003      	str	r3, [r0, #0]
 8007462:	f04f 0900 	mov.w	r9, #0
 8007466:	07eb      	lsls	r3, r5, #31
 8007468:	d50a      	bpl.n	8007480 <__pow5mult+0x84>
 800746a:	4639      	mov	r1, r7
 800746c:	4622      	mov	r2, r4
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ff20 	bl	80072b4 <__multiply>
 8007474:	4680      	mov	r8, r0
 8007476:	4639      	mov	r1, r7
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff fe4b 	bl	8007114 <_Bfree>
 800747e:	4647      	mov	r7, r8
 8007480:	106d      	asrs	r5, r5, #1
 8007482:	d00b      	beq.n	800749c <__pow5mult+0xa0>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	b938      	cbnz	r0, 8007498 <__pow5mult+0x9c>
 8007488:	4622      	mov	r2, r4
 800748a:	4621      	mov	r1, r4
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff ff11 	bl	80072b4 <__multiply>
 8007492:	6020      	str	r0, [r4, #0]
 8007494:	f8c0 9000 	str.w	r9, [r0]
 8007498:	4604      	mov	r4, r0
 800749a:	e7e4      	b.n	8007466 <__pow5mult+0x6a>
 800749c:	4638      	mov	r0, r7
 800749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a2:	bf00      	nop
 80074a4:	08008cb0 	.word	0x08008cb0
 80074a8:	08008ad5 	.word	0x08008ad5
 80074ac:	08008b5c 	.word	0x08008b5c

080074b0 <__lshift>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	460c      	mov	r4, r1
 80074b6:	4607      	mov	r7, r0
 80074b8:	4691      	mov	r9, r2
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	6849      	ldr	r1, [r1, #4]
 80074be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074c8:	f108 0601 	add.w	r6, r8, #1
 80074cc:	42b3      	cmp	r3, r6
 80074ce:	db0b      	blt.n	80074e8 <__lshift+0x38>
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff fddf 	bl	8007094 <_Balloc>
 80074d6:	4605      	mov	r5, r0
 80074d8:	b948      	cbnz	r0, 80074ee <__lshift+0x3e>
 80074da:	4602      	mov	r2, r0
 80074dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074e0:	4b27      	ldr	r3, [pc, #156]	; (8007580 <__lshift+0xd0>)
 80074e2:	4828      	ldr	r0, [pc, #160]	; (8007584 <__lshift+0xd4>)
 80074e4:	f000 fa1c 	bl	8007920 <__assert_func>
 80074e8:	3101      	adds	r1, #1
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	e7ee      	b.n	80074cc <__lshift+0x1c>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f100 0114 	add.w	r1, r0, #20
 80074f4:	f100 0210 	add.w	r2, r0, #16
 80074f8:	4618      	mov	r0, r3
 80074fa:	4553      	cmp	r3, sl
 80074fc:	db33      	blt.n	8007566 <__lshift+0xb6>
 80074fe:	6920      	ldr	r0, [r4, #16]
 8007500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007504:	f104 0314 	add.w	r3, r4, #20
 8007508:	f019 091f 	ands.w	r9, r9, #31
 800750c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007510:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007514:	d02b      	beq.n	800756e <__lshift+0xbe>
 8007516:	468a      	mov	sl, r1
 8007518:	2200      	movs	r2, #0
 800751a:	f1c9 0e20 	rsb	lr, r9, #32
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	fa00 f009 	lsl.w	r0, r0, r9
 8007524:	4302      	orrs	r2, r0
 8007526:	f84a 2b04 	str.w	r2, [sl], #4
 800752a:	f853 2b04 	ldr.w	r2, [r3], #4
 800752e:	459c      	cmp	ip, r3
 8007530:	fa22 f20e 	lsr.w	r2, r2, lr
 8007534:	d8f3      	bhi.n	800751e <__lshift+0x6e>
 8007536:	ebac 0304 	sub.w	r3, ip, r4
 800753a:	3b15      	subs	r3, #21
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	3304      	adds	r3, #4
 8007542:	f104 0015 	add.w	r0, r4, #21
 8007546:	4584      	cmp	ip, r0
 8007548:	bf38      	it	cc
 800754a:	2304      	movcc	r3, #4
 800754c:	50ca      	str	r2, [r1, r3]
 800754e:	b10a      	cbz	r2, 8007554 <__lshift+0xa4>
 8007550:	f108 0602 	add.w	r6, r8, #2
 8007554:	3e01      	subs	r6, #1
 8007556:	4638      	mov	r0, r7
 8007558:	4621      	mov	r1, r4
 800755a:	612e      	str	r6, [r5, #16]
 800755c:	f7ff fdda 	bl	8007114 <_Bfree>
 8007560:	4628      	mov	r0, r5
 8007562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007566:	f842 0f04 	str.w	r0, [r2, #4]!
 800756a:	3301      	adds	r3, #1
 800756c:	e7c5      	b.n	80074fa <__lshift+0x4a>
 800756e:	3904      	subs	r1, #4
 8007570:	f853 2b04 	ldr.w	r2, [r3], #4
 8007574:	459c      	cmp	ip, r3
 8007576:	f841 2f04 	str.w	r2, [r1, #4]!
 800757a:	d8f9      	bhi.n	8007570 <__lshift+0xc0>
 800757c:	e7ea      	b.n	8007554 <__lshift+0xa4>
 800757e:	bf00      	nop
 8007580:	08008b4b 	.word	0x08008b4b
 8007584:	08008b5c 	.word	0x08008b5c

08007588 <__mcmp>:
 8007588:	4603      	mov	r3, r0
 800758a:	690a      	ldr	r2, [r1, #16]
 800758c:	6900      	ldr	r0, [r0, #16]
 800758e:	b530      	push	{r4, r5, lr}
 8007590:	1a80      	subs	r0, r0, r2
 8007592:	d10d      	bne.n	80075b0 <__mcmp+0x28>
 8007594:	3314      	adds	r3, #20
 8007596:	3114      	adds	r1, #20
 8007598:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800759c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075a8:	4295      	cmp	r5, r2
 80075aa:	d002      	beq.n	80075b2 <__mcmp+0x2a>
 80075ac:	d304      	bcc.n	80075b8 <__mcmp+0x30>
 80075ae:	2001      	movs	r0, #1
 80075b0:	bd30      	pop	{r4, r5, pc}
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	d3f4      	bcc.n	80075a0 <__mcmp+0x18>
 80075b6:	e7fb      	b.n	80075b0 <__mcmp+0x28>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e7f8      	b.n	80075b0 <__mcmp+0x28>
	...

080075c0 <__mdiff>:
 80075c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	4606      	mov	r6, r0
 80075c8:	4611      	mov	r1, r2
 80075ca:	4620      	mov	r0, r4
 80075cc:	4692      	mov	sl, r2
 80075ce:	f7ff ffdb 	bl	8007588 <__mcmp>
 80075d2:	1e05      	subs	r5, r0, #0
 80075d4:	d111      	bne.n	80075fa <__mdiff+0x3a>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff fd5b 	bl	8007094 <_Balloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	b928      	cbnz	r0, 80075ee <__mdiff+0x2e>
 80075e2:	f240 2132 	movw	r1, #562	; 0x232
 80075e6:	4b3c      	ldr	r3, [pc, #240]	; (80076d8 <__mdiff+0x118>)
 80075e8:	483c      	ldr	r0, [pc, #240]	; (80076dc <__mdiff+0x11c>)
 80075ea:	f000 f999 	bl	8007920 <__assert_func>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075f4:	4610      	mov	r0, r2
 80075f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fa:	bfa4      	itt	ge
 80075fc:	4653      	movge	r3, sl
 80075fe:	46a2      	movge	sl, r4
 8007600:	4630      	mov	r0, r6
 8007602:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007606:	bfa6      	itte	ge
 8007608:	461c      	movge	r4, r3
 800760a:	2500      	movge	r5, #0
 800760c:	2501      	movlt	r5, #1
 800760e:	f7ff fd41 	bl	8007094 <_Balloc>
 8007612:	4602      	mov	r2, r0
 8007614:	b918      	cbnz	r0, 800761e <__mdiff+0x5e>
 8007616:	f44f 7110 	mov.w	r1, #576	; 0x240
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <__mdiff+0x118>)
 800761c:	e7e4      	b.n	80075e8 <__mdiff+0x28>
 800761e:	f100 0814 	add.w	r8, r0, #20
 8007622:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007626:	60c5      	str	r5, [r0, #12]
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	f10a 0514 	add.w	r5, sl, #20
 8007630:	f10a 0010 	add.w	r0, sl, #16
 8007634:	46c2      	mov	sl, r8
 8007636:	6926      	ldr	r6, [r4, #16]
 8007638:	f104 0914 	add.w	r9, r4, #20
 800763c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007640:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007644:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007648:	f859 3b04 	ldr.w	r3, [r9], #4
 800764c:	fa1f f18b 	uxth.w	r1, fp
 8007650:	4461      	add	r1, ip
 8007652:	fa1f fc83 	uxth.w	ip, r3
 8007656:	0c1b      	lsrs	r3, r3, #16
 8007658:	eba1 010c 	sub.w	r1, r1, ip
 800765c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007660:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007664:	b289      	uxth	r1, r1
 8007666:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800766a:	454e      	cmp	r6, r9
 800766c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007670:	f84a 3b04 	str.w	r3, [sl], #4
 8007674:	d8e6      	bhi.n	8007644 <__mdiff+0x84>
 8007676:	1b33      	subs	r3, r6, r4
 8007678:	3b15      	subs	r3, #21
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	3415      	adds	r4, #21
 8007680:	3304      	adds	r3, #4
 8007682:	42a6      	cmp	r6, r4
 8007684:	bf38      	it	cc
 8007686:	2304      	movcc	r3, #4
 8007688:	441d      	add	r5, r3
 800768a:	4443      	add	r3, r8
 800768c:	461e      	mov	r6, r3
 800768e:	462c      	mov	r4, r5
 8007690:	4574      	cmp	r4, lr
 8007692:	d30e      	bcc.n	80076b2 <__mdiff+0xf2>
 8007694:	f10e 0103 	add.w	r1, lr, #3
 8007698:	1b49      	subs	r1, r1, r5
 800769a:	f021 0103 	bic.w	r1, r1, #3
 800769e:	3d03      	subs	r5, #3
 80076a0:	45ae      	cmp	lr, r5
 80076a2:	bf38      	it	cc
 80076a4:	2100      	movcc	r1, #0
 80076a6:	4419      	add	r1, r3
 80076a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076ac:	b18b      	cbz	r3, 80076d2 <__mdiff+0x112>
 80076ae:	6117      	str	r7, [r2, #16]
 80076b0:	e7a0      	b.n	80075f4 <__mdiff+0x34>
 80076b2:	f854 8b04 	ldr.w	r8, [r4], #4
 80076b6:	fa1f f188 	uxth.w	r1, r8
 80076ba:	4461      	add	r1, ip
 80076bc:	1408      	asrs	r0, r1, #16
 80076be:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80076c2:	b289      	uxth	r1, r1
 80076c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076cc:	f846 1b04 	str.w	r1, [r6], #4
 80076d0:	e7de      	b.n	8007690 <__mdiff+0xd0>
 80076d2:	3f01      	subs	r7, #1
 80076d4:	e7e8      	b.n	80076a8 <__mdiff+0xe8>
 80076d6:	bf00      	nop
 80076d8:	08008b4b 	.word	0x08008b4b
 80076dc:	08008b5c 	.word	0x08008b5c

080076e0 <__d2b>:
 80076e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076e4:	2101      	movs	r1, #1
 80076e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80076ea:	4690      	mov	r8, r2
 80076ec:	461d      	mov	r5, r3
 80076ee:	f7ff fcd1 	bl	8007094 <_Balloc>
 80076f2:	4604      	mov	r4, r0
 80076f4:	b930      	cbnz	r0, 8007704 <__d2b+0x24>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 310a 	movw	r1, #778	; 0x30a
 80076fc:	4b24      	ldr	r3, [pc, #144]	; (8007790 <__d2b+0xb0>)
 80076fe:	4825      	ldr	r0, [pc, #148]	; (8007794 <__d2b+0xb4>)
 8007700:	f000 f90e 	bl	8007920 <__assert_func>
 8007704:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007708:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800770c:	bb2d      	cbnz	r5, 800775a <__d2b+0x7a>
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	f1b8 0300 	subs.w	r3, r8, #0
 8007714:	d026      	beq.n	8007764 <__d2b+0x84>
 8007716:	4668      	mov	r0, sp
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	f7ff fd87 	bl	800722c <__lo0bits>
 800771e:	9900      	ldr	r1, [sp, #0]
 8007720:	b1f0      	cbz	r0, 8007760 <__d2b+0x80>
 8007722:	9a01      	ldr	r2, [sp, #4]
 8007724:	f1c0 0320 	rsb	r3, r0, #32
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	430b      	orrs	r3, r1
 800772e:	40c2      	lsrs	r2, r0
 8007730:	6163      	str	r3, [r4, #20]
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bf14      	ite	ne
 800773a:	2102      	movne	r1, #2
 800773c:	2101      	moveq	r1, #1
 800773e:	61a3      	str	r3, [r4, #24]
 8007740:	6121      	str	r1, [r4, #16]
 8007742:	b1c5      	cbz	r5, 8007776 <__d2b+0x96>
 8007744:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007748:	4405      	add	r5, r0
 800774a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800774e:	603d      	str	r5, [r7, #0]
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4620      	mov	r0, r4
 8007754:	b002      	add	sp, #8
 8007756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800775e:	e7d6      	b.n	800770e <__d2b+0x2e>
 8007760:	6161      	str	r1, [r4, #20]
 8007762:	e7e7      	b.n	8007734 <__d2b+0x54>
 8007764:	a801      	add	r0, sp, #4
 8007766:	f7ff fd61 	bl	800722c <__lo0bits>
 800776a:	2101      	movs	r1, #1
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	6121      	str	r1, [r4, #16]
 8007770:	6163      	str	r3, [r4, #20]
 8007772:	3020      	adds	r0, #32
 8007774:	e7e5      	b.n	8007742 <__d2b+0x62>
 8007776:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800777a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800777e:	6038      	str	r0, [r7, #0]
 8007780:	6918      	ldr	r0, [r3, #16]
 8007782:	f7ff fd33 	bl	80071ec <__hi0bits>
 8007786:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800778a:	6031      	str	r1, [r6, #0]
 800778c:	e7e1      	b.n	8007752 <__d2b+0x72>
 800778e:	bf00      	nop
 8007790:	08008b4b 	.word	0x08008b4b
 8007794:	08008b5c 	.word	0x08008b5c

08007798 <_calloc_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	fb02 f501 	mul.w	r5, r2, r1
 800779e:	4629      	mov	r1, r5
 80077a0:	f000 f854 	bl	800784c <_malloc_r>
 80077a4:	4604      	mov	r4, r0
 80077a6:	b118      	cbz	r0, 80077b0 <_calloc_r+0x18>
 80077a8:	462a      	mov	r2, r5
 80077aa:	2100      	movs	r1, #0
 80077ac:	f7fe f964 	bl	8005a78 <memset>
 80077b0:	4620      	mov	r0, r4
 80077b2:	bd38      	pop	{r3, r4, r5, pc}

080077b4 <_free_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4605      	mov	r5, r0
 80077b8:	2900      	cmp	r1, #0
 80077ba:	d043      	beq.n	8007844 <_free_r+0x90>
 80077bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c0:	1f0c      	subs	r4, r1, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfb8      	it	lt
 80077c6:	18e4      	addlt	r4, r4, r3
 80077c8:	f000 f8ec 	bl	80079a4 <__malloc_lock>
 80077cc:	4a1e      	ldr	r2, [pc, #120]	; (8007848 <_free_r+0x94>)
 80077ce:	6813      	ldr	r3, [r2, #0]
 80077d0:	4610      	mov	r0, r2
 80077d2:	b933      	cbnz	r3, 80077e2 <_free_r+0x2e>
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6014      	str	r4, [r2, #0]
 80077d8:	4628      	mov	r0, r5
 80077da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077de:	f000 b8e7 	b.w	80079b0 <__malloc_unlock>
 80077e2:	42a3      	cmp	r3, r4
 80077e4:	d90a      	bls.n	80077fc <_free_r+0x48>
 80077e6:	6821      	ldr	r1, [r4, #0]
 80077e8:	1862      	adds	r2, r4, r1
 80077ea:	4293      	cmp	r3, r2
 80077ec:	bf01      	itttt	eq
 80077ee:	681a      	ldreq	r2, [r3, #0]
 80077f0:	685b      	ldreq	r3, [r3, #4]
 80077f2:	1852      	addeq	r2, r2, r1
 80077f4:	6022      	streq	r2, [r4, #0]
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	6004      	str	r4, [r0, #0]
 80077fa:	e7ed      	b.n	80077d8 <_free_r+0x24>
 80077fc:	461a      	mov	r2, r3
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	b10b      	cbz	r3, 8007806 <_free_r+0x52>
 8007802:	42a3      	cmp	r3, r4
 8007804:	d9fa      	bls.n	80077fc <_free_r+0x48>
 8007806:	6811      	ldr	r1, [r2, #0]
 8007808:	1850      	adds	r0, r2, r1
 800780a:	42a0      	cmp	r0, r4
 800780c:	d10b      	bne.n	8007826 <_free_r+0x72>
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	4401      	add	r1, r0
 8007812:	1850      	adds	r0, r2, r1
 8007814:	4283      	cmp	r3, r0
 8007816:	6011      	str	r1, [r2, #0]
 8007818:	d1de      	bne.n	80077d8 <_free_r+0x24>
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	4401      	add	r1, r0
 8007820:	6011      	str	r1, [r2, #0]
 8007822:	6053      	str	r3, [r2, #4]
 8007824:	e7d8      	b.n	80077d8 <_free_r+0x24>
 8007826:	d902      	bls.n	800782e <_free_r+0x7a>
 8007828:	230c      	movs	r3, #12
 800782a:	602b      	str	r3, [r5, #0]
 800782c:	e7d4      	b.n	80077d8 <_free_r+0x24>
 800782e:	6820      	ldr	r0, [r4, #0]
 8007830:	1821      	adds	r1, r4, r0
 8007832:	428b      	cmp	r3, r1
 8007834:	bf01      	itttt	eq
 8007836:	6819      	ldreq	r1, [r3, #0]
 8007838:	685b      	ldreq	r3, [r3, #4]
 800783a:	1809      	addeq	r1, r1, r0
 800783c:	6021      	streq	r1, [r4, #0]
 800783e:	6063      	str	r3, [r4, #4]
 8007840:	6054      	str	r4, [r2, #4]
 8007842:	e7c9      	b.n	80077d8 <_free_r+0x24>
 8007844:	bd38      	pop	{r3, r4, r5, pc}
 8007846:	bf00      	nop
 8007848:	20000218 	.word	0x20000218

0800784c <_malloc_r>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	1ccd      	adds	r5, r1, #3
 8007850:	f025 0503 	bic.w	r5, r5, #3
 8007854:	3508      	adds	r5, #8
 8007856:	2d0c      	cmp	r5, #12
 8007858:	bf38      	it	cc
 800785a:	250c      	movcc	r5, #12
 800785c:	2d00      	cmp	r5, #0
 800785e:	4606      	mov	r6, r0
 8007860:	db01      	blt.n	8007866 <_malloc_r+0x1a>
 8007862:	42a9      	cmp	r1, r5
 8007864:	d903      	bls.n	800786e <_malloc_r+0x22>
 8007866:	230c      	movs	r3, #12
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	2000      	movs	r0, #0
 800786c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800786e:	f000 f899 	bl	80079a4 <__malloc_lock>
 8007872:	4921      	ldr	r1, [pc, #132]	; (80078f8 <_malloc_r+0xac>)
 8007874:	680a      	ldr	r2, [r1, #0]
 8007876:	4614      	mov	r4, r2
 8007878:	b99c      	cbnz	r4, 80078a2 <_malloc_r+0x56>
 800787a:	4f20      	ldr	r7, [pc, #128]	; (80078fc <_malloc_r+0xb0>)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	b923      	cbnz	r3, 800788a <_malloc_r+0x3e>
 8007880:	4621      	mov	r1, r4
 8007882:	4630      	mov	r0, r6
 8007884:	f000 f83c 	bl	8007900 <_sbrk_r>
 8007888:	6038      	str	r0, [r7, #0]
 800788a:	4629      	mov	r1, r5
 800788c:	4630      	mov	r0, r6
 800788e:	f000 f837 	bl	8007900 <_sbrk_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d123      	bne.n	80078de <_malloc_r+0x92>
 8007896:	230c      	movs	r3, #12
 8007898:	4630      	mov	r0, r6
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	f000 f888 	bl	80079b0 <__malloc_unlock>
 80078a0:	e7e3      	b.n	800786a <_malloc_r+0x1e>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	1b5b      	subs	r3, r3, r5
 80078a6:	d417      	bmi.n	80078d8 <_malloc_r+0x8c>
 80078a8:	2b0b      	cmp	r3, #11
 80078aa:	d903      	bls.n	80078b4 <_malloc_r+0x68>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	441c      	add	r4, r3
 80078b0:	6025      	str	r5, [r4, #0]
 80078b2:	e004      	b.n	80078be <_malloc_r+0x72>
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	42a2      	cmp	r2, r4
 80078b8:	bf0c      	ite	eq
 80078ba:	600b      	streq	r3, [r1, #0]
 80078bc:	6053      	strne	r3, [r2, #4]
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f876 	bl	80079b0 <__malloc_unlock>
 80078c4:	f104 000b 	add.w	r0, r4, #11
 80078c8:	1d23      	adds	r3, r4, #4
 80078ca:	f020 0007 	bic.w	r0, r0, #7
 80078ce:	1ac2      	subs	r2, r0, r3
 80078d0:	d0cc      	beq.n	800786c <_malloc_r+0x20>
 80078d2:	1a1b      	subs	r3, r3, r0
 80078d4:	50a3      	str	r3, [r4, r2]
 80078d6:	e7c9      	b.n	800786c <_malloc_r+0x20>
 80078d8:	4622      	mov	r2, r4
 80078da:	6864      	ldr	r4, [r4, #4]
 80078dc:	e7cc      	b.n	8007878 <_malloc_r+0x2c>
 80078de:	1cc4      	adds	r4, r0, #3
 80078e0:	f024 0403 	bic.w	r4, r4, #3
 80078e4:	42a0      	cmp	r0, r4
 80078e6:	d0e3      	beq.n	80078b0 <_malloc_r+0x64>
 80078e8:	1a21      	subs	r1, r4, r0
 80078ea:	4630      	mov	r0, r6
 80078ec:	f000 f808 	bl	8007900 <_sbrk_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d1dd      	bne.n	80078b0 <_malloc_r+0x64>
 80078f4:	e7cf      	b.n	8007896 <_malloc_r+0x4a>
 80078f6:	bf00      	nop
 80078f8:	20000218 	.word	0x20000218
 80078fc:	2000021c 	.word	0x2000021c

08007900 <_sbrk_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	2300      	movs	r3, #0
 8007904:	4d05      	ldr	r5, [pc, #20]	; (800791c <_sbrk_r+0x1c>)
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	f7fa fc36 	bl	800217c <_sbrk>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_sbrk_r+0x1a>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_sbrk_r+0x1a>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	20000434 	.word	0x20000434

08007920 <__assert_func>:
 8007920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007922:	4614      	mov	r4, r2
 8007924:	461a      	mov	r2, r3
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <__assert_func+0x2c>)
 8007928:	4605      	mov	r5, r0
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68d8      	ldr	r0, [r3, #12]
 800792e:	b14c      	cbz	r4, 8007944 <__assert_func+0x24>
 8007930:	4b07      	ldr	r3, [pc, #28]	; (8007950 <__assert_func+0x30>)
 8007932:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007936:	9100      	str	r1, [sp, #0]
 8007938:	462b      	mov	r3, r5
 800793a:	4906      	ldr	r1, [pc, #24]	; (8007954 <__assert_func+0x34>)
 800793c:	f000 f80e 	bl	800795c <fiprintf>
 8007940:	f000 fa62 	bl	8007e08 <abort>
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <__assert_func+0x38>)
 8007946:	461c      	mov	r4, r3
 8007948:	e7f3      	b.n	8007932 <__assert_func+0x12>
 800794a:	bf00      	nop
 800794c:	20000024 	.word	0x20000024
 8007950:	08008cbc 	.word	0x08008cbc
 8007954:	08008cc9 	.word	0x08008cc9
 8007958:	08008cf7 	.word	0x08008cf7

0800795c <fiprintf>:
 800795c:	b40e      	push	{r1, r2, r3}
 800795e:	b503      	push	{r0, r1, lr}
 8007960:	4601      	mov	r1, r0
 8007962:	ab03      	add	r3, sp, #12
 8007964:	4805      	ldr	r0, [pc, #20]	; (800797c <fiprintf+0x20>)
 8007966:	f853 2b04 	ldr.w	r2, [r3], #4
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	f000 f84d 	bl	8007a0c <_vfiprintf_r>
 8007972:	b002      	add	sp, #8
 8007974:	f85d eb04 	ldr.w	lr, [sp], #4
 8007978:	b003      	add	sp, #12
 800797a:	4770      	bx	lr
 800797c:	20000024 	.word	0x20000024

08007980 <__ascii_mbtowc>:
 8007980:	b082      	sub	sp, #8
 8007982:	b901      	cbnz	r1, 8007986 <__ascii_mbtowc+0x6>
 8007984:	a901      	add	r1, sp, #4
 8007986:	b142      	cbz	r2, 800799a <__ascii_mbtowc+0x1a>
 8007988:	b14b      	cbz	r3, 800799e <__ascii_mbtowc+0x1e>
 800798a:	7813      	ldrb	r3, [r2, #0]
 800798c:	600b      	str	r3, [r1, #0]
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	1e10      	subs	r0, r2, #0
 8007992:	bf18      	it	ne
 8007994:	2001      	movne	r0, #1
 8007996:	b002      	add	sp, #8
 8007998:	4770      	bx	lr
 800799a:	4610      	mov	r0, r2
 800799c:	e7fb      	b.n	8007996 <__ascii_mbtowc+0x16>
 800799e:	f06f 0001 	mvn.w	r0, #1
 80079a2:	e7f8      	b.n	8007996 <__ascii_mbtowc+0x16>

080079a4 <__malloc_lock>:
 80079a4:	4801      	ldr	r0, [pc, #4]	; (80079ac <__malloc_lock+0x8>)
 80079a6:	f000 bbef 	b.w	8008188 <__retarget_lock_acquire_recursive>
 80079aa:	bf00      	nop
 80079ac:	2000043c 	.word	0x2000043c

080079b0 <__malloc_unlock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	; (80079b8 <__malloc_unlock+0x8>)
 80079b2:	f000 bbea 	b.w	800818a <__retarget_lock_release_recursive>
 80079b6:	bf00      	nop
 80079b8:	2000043c 	.word	0x2000043c

080079bc <__sfputc_r>:
 80079bc:	6893      	ldr	r3, [r2, #8]
 80079be:	b410      	push	{r4}
 80079c0:	3b01      	subs	r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	6093      	str	r3, [r2, #8]
 80079c6:	da07      	bge.n	80079d8 <__sfputc_r+0x1c>
 80079c8:	6994      	ldr	r4, [r2, #24]
 80079ca:	42a3      	cmp	r3, r4
 80079cc:	db01      	blt.n	80079d2 <__sfputc_r+0x16>
 80079ce:	290a      	cmp	r1, #10
 80079d0:	d102      	bne.n	80079d8 <__sfputc_r+0x1c>
 80079d2:	bc10      	pop	{r4}
 80079d4:	f000 b94a 	b.w	8007c6c <__swbuf_r>
 80079d8:	6813      	ldr	r3, [r2, #0]
 80079da:	1c58      	adds	r0, r3, #1
 80079dc:	6010      	str	r0, [r2, #0]
 80079de:	7019      	strb	r1, [r3, #0]
 80079e0:	4608      	mov	r0, r1
 80079e2:	bc10      	pop	{r4}
 80079e4:	4770      	bx	lr

080079e6 <__sfputs_r>:
 80079e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e8:	4606      	mov	r6, r0
 80079ea:	460f      	mov	r7, r1
 80079ec:	4614      	mov	r4, r2
 80079ee:	18d5      	adds	r5, r2, r3
 80079f0:	42ac      	cmp	r4, r5
 80079f2:	d101      	bne.n	80079f8 <__sfputs_r+0x12>
 80079f4:	2000      	movs	r0, #0
 80079f6:	e007      	b.n	8007a08 <__sfputs_r+0x22>
 80079f8:	463a      	mov	r2, r7
 80079fa:	4630      	mov	r0, r6
 80079fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a00:	f7ff ffdc 	bl	80079bc <__sfputc_r>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d1f3      	bne.n	80079f0 <__sfputs_r+0xa>
 8007a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a0c <_vfiprintf_r>:
 8007a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	460d      	mov	r5, r1
 8007a12:	4614      	mov	r4, r2
 8007a14:	4698      	mov	r8, r3
 8007a16:	4606      	mov	r6, r0
 8007a18:	b09d      	sub	sp, #116	; 0x74
 8007a1a:	b118      	cbz	r0, 8007a24 <_vfiprintf_r+0x18>
 8007a1c:	6983      	ldr	r3, [r0, #24]
 8007a1e:	b90b      	cbnz	r3, 8007a24 <_vfiprintf_r+0x18>
 8007a20:	f000 fb14 	bl	800804c <__sinit>
 8007a24:	4b89      	ldr	r3, [pc, #548]	; (8007c4c <_vfiprintf_r+0x240>)
 8007a26:	429d      	cmp	r5, r3
 8007a28:	d11b      	bne.n	8007a62 <_vfiprintf_r+0x56>
 8007a2a:	6875      	ldr	r5, [r6, #4]
 8007a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d405      	bmi.n	8007a3e <_vfiprintf_r+0x32>
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	059a      	lsls	r2, r3, #22
 8007a36:	d402      	bmi.n	8007a3e <_vfiprintf_r+0x32>
 8007a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3a:	f000 fba5 	bl	8008188 <__retarget_lock_acquire_recursive>
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	071b      	lsls	r3, r3, #28
 8007a42:	d501      	bpl.n	8007a48 <_vfiprintf_r+0x3c>
 8007a44:	692b      	ldr	r3, [r5, #16]
 8007a46:	b9eb      	cbnz	r3, 8007a84 <_vfiprintf_r+0x78>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f000 f96e 	bl	8007d2c <__swsetup_r>
 8007a50:	b1c0      	cbz	r0, 8007a84 <_vfiprintf_r+0x78>
 8007a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a54:	07dc      	lsls	r4, r3, #31
 8007a56:	d50e      	bpl.n	8007a76 <_vfiprintf_r+0x6a>
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	b01d      	add	sp, #116	; 0x74
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	4b7b      	ldr	r3, [pc, #492]	; (8007c50 <_vfiprintf_r+0x244>)
 8007a64:	429d      	cmp	r5, r3
 8007a66:	d101      	bne.n	8007a6c <_vfiprintf_r+0x60>
 8007a68:	68b5      	ldr	r5, [r6, #8]
 8007a6a:	e7df      	b.n	8007a2c <_vfiprintf_r+0x20>
 8007a6c:	4b79      	ldr	r3, [pc, #484]	; (8007c54 <_vfiprintf_r+0x248>)
 8007a6e:	429d      	cmp	r5, r3
 8007a70:	bf08      	it	eq
 8007a72:	68f5      	ldreq	r5, [r6, #12]
 8007a74:	e7da      	b.n	8007a2c <_vfiprintf_r+0x20>
 8007a76:	89ab      	ldrh	r3, [r5, #12]
 8007a78:	0598      	lsls	r0, r3, #22
 8007a7a:	d4ed      	bmi.n	8007a58 <_vfiprintf_r+0x4c>
 8007a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a7e:	f000 fb84 	bl	800818a <__retarget_lock_release_recursive>
 8007a82:	e7e9      	b.n	8007a58 <_vfiprintf_r+0x4c>
 8007a84:	2300      	movs	r3, #0
 8007a86:	9309      	str	r3, [sp, #36]	; 0x24
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a8e:	2330      	movs	r3, #48	; 0x30
 8007a90:	f04f 0901 	mov.w	r9, #1
 8007a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007c58 <_vfiprintf_r+0x24c>
 8007a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	469a      	mov	sl, r3
 8007aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa8:	b10a      	cbz	r2, 8007aae <_vfiprintf_r+0xa2>
 8007aaa:	2a25      	cmp	r2, #37	; 0x25
 8007aac:	d1f9      	bne.n	8007aa2 <_vfiprintf_r+0x96>
 8007aae:	ebba 0b04 	subs.w	fp, sl, r4
 8007ab2:	d00b      	beq.n	8007acc <_vfiprintf_r+0xc0>
 8007ab4:	465b      	mov	r3, fp
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff ff93 	bl	80079e6 <__sfputs_r>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f000 80aa 	beq.w	8007c1a <_vfiprintf_r+0x20e>
 8007ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac8:	445a      	add	r2, fp
 8007aca:	9209      	str	r2, [sp, #36]	; 0x24
 8007acc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80a2 	beq.w	8007c1a <_vfiprintf_r+0x20e>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8007adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae0:	f10a 0a01 	add.w	sl, sl, #1
 8007ae4:	9304      	str	r3, [sp, #16]
 8007ae6:	9307      	str	r3, [sp, #28]
 8007ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aec:	931a      	str	r3, [sp, #104]	; 0x68
 8007aee:	4654      	mov	r4, sl
 8007af0:	2205      	movs	r2, #5
 8007af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af6:	4858      	ldr	r0, [pc, #352]	; (8007c58 <_vfiprintf_r+0x24c>)
 8007af8:	f7ff fab0 	bl	800705c <memchr>
 8007afc:	9a04      	ldr	r2, [sp, #16]
 8007afe:	b9d8      	cbnz	r0, 8007b38 <_vfiprintf_r+0x12c>
 8007b00:	06d1      	lsls	r1, r2, #27
 8007b02:	bf44      	itt	mi
 8007b04:	2320      	movmi	r3, #32
 8007b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b0a:	0713      	lsls	r3, r2, #28
 8007b0c:	bf44      	itt	mi
 8007b0e:	232b      	movmi	r3, #43	; 0x2b
 8007b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b14:	f89a 3000 	ldrb.w	r3, [sl]
 8007b18:	2b2a      	cmp	r3, #42	; 0x2a
 8007b1a:	d015      	beq.n	8007b48 <_vfiprintf_r+0x13c>
 8007b1c:	4654      	mov	r4, sl
 8007b1e:	2000      	movs	r0, #0
 8007b20:	f04f 0c0a 	mov.w	ip, #10
 8007b24:	9a07      	ldr	r2, [sp, #28]
 8007b26:	4621      	mov	r1, r4
 8007b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b2c:	3b30      	subs	r3, #48	; 0x30
 8007b2e:	2b09      	cmp	r3, #9
 8007b30:	d94e      	bls.n	8007bd0 <_vfiprintf_r+0x1c4>
 8007b32:	b1b0      	cbz	r0, 8007b62 <_vfiprintf_r+0x156>
 8007b34:	9207      	str	r2, [sp, #28]
 8007b36:	e014      	b.n	8007b62 <_vfiprintf_r+0x156>
 8007b38:	eba0 0308 	sub.w	r3, r0, r8
 8007b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b40:	4313      	orrs	r3, r2
 8007b42:	46a2      	mov	sl, r4
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	e7d2      	b.n	8007aee <_vfiprintf_r+0xe2>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	9103      	str	r1, [sp, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bfbb      	ittet	lt
 8007b54:	425b      	neglt	r3, r3
 8007b56:	f042 0202 	orrlt.w	r2, r2, #2
 8007b5a:	9307      	strge	r3, [sp, #28]
 8007b5c:	9307      	strlt	r3, [sp, #28]
 8007b5e:	bfb8      	it	lt
 8007b60:	9204      	strlt	r2, [sp, #16]
 8007b62:	7823      	ldrb	r3, [r4, #0]
 8007b64:	2b2e      	cmp	r3, #46	; 0x2e
 8007b66:	d10c      	bne.n	8007b82 <_vfiprintf_r+0x176>
 8007b68:	7863      	ldrb	r3, [r4, #1]
 8007b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6c:	d135      	bne.n	8007bda <_vfiprintf_r+0x1ce>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	3402      	adds	r4, #2
 8007b72:	1d1a      	adds	r2, r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	9203      	str	r2, [sp, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bfb8      	it	lt
 8007b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b80:	9305      	str	r3, [sp, #20]
 8007b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c68 <_vfiprintf_r+0x25c>
 8007b86:	2203      	movs	r2, #3
 8007b88:	4650      	mov	r0, sl
 8007b8a:	7821      	ldrb	r1, [r4, #0]
 8007b8c:	f7ff fa66 	bl	800705c <memchr>
 8007b90:	b140      	cbz	r0, 8007ba4 <_vfiprintf_r+0x198>
 8007b92:	2340      	movs	r3, #64	; 0x40
 8007b94:	eba0 000a 	sub.w	r0, r0, sl
 8007b98:	fa03 f000 	lsl.w	r0, r3, r0
 8007b9c:	9b04      	ldr	r3, [sp, #16]
 8007b9e:	3401      	adds	r4, #1
 8007ba0:	4303      	orrs	r3, r0
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba8:	2206      	movs	r2, #6
 8007baa:	482c      	ldr	r0, [pc, #176]	; (8007c5c <_vfiprintf_r+0x250>)
 8007bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bb0:	f7ff fa54 	bl	800705c <memchr>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d03f      	beq.n	8007c38 <_vfiprintf_r+0x22c>
 8007bb8:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <_vfiprintf_r+0x254>)
 8007bba:	bb1b      	cbnz	r3, 8007c04 <_vfiprintf_r+0x1f8>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	3307      	adds	r3, #7
 8007bc0:	f023 0307 	bic.w	r3, r3, #7
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	9303      	str	r3, [sp, #12]
 8007bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bca:	443b      	add	r3, r7
 8007bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bce:	e767      	b.n	8007aa0 <_vfiprintf_r+0x94>
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bd8:	e7a5      	b.n	8007b26 <_vfiprintf_r+0x11a>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f04f 0c0a 	mov.w	ip, #10
 8007be0:	4619      	mov	r1, r3
 8007be2:	3401      	adds	r4, #1
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	4620      	mov	r0, r4
 8007be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bec:	3a30      	subs	r2, #48	; 0x30
 8007bee:	2a09      	cmp	r2, #9
 8007bf0:	d903      	bls.n	8007bfa <_vfiprintf_r+0x1ee>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0c5      	beq.n	8007b82 <_vfiprintf_r+0x176>
 8007bf6:	9105      	str	r1, [sp, #20]
 8007bf8:	e7c3      	b.n	8007b82 <_vfiprintf_r+0x176>
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c02:	e7f0      	b.n	8007be6 <_vfiprintf_r+0x1da>
 8007c04:	ab03      	add	r3, sp, #12
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	462a      	mov	r2, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <_vfiprintf_r+0x258>)
 8007c0e:	a904      	add	r1, sp, #16
 8007c10:	f7fd ffd8 	bl	8005bc4 <_printf_float>
 8007c14:	4607      	mov	r7, r0
 8007c16:	1c78      	adds	r0, r7, #1
 8007c18:	d1d6      	bne.n	8007bc8 <_vfiprintf_r+0x1bc>
 8007c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c1c:	07d9      	lsls	r1, r3, #31
 8007c1e:	d405      	bmi.n	8007c2c <_vfiprintf_r+0x220>
 8007c20:	89ab      	ldrh	r3, [r5, #12]
 8007c22:	059a      	lsls	r2, r3, #22
 8007c24:	d402      	bmi.n	8007c2c <_vfiprintf_r+0x220>
 8007c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c28:	f000 faaf 	bl	800818a <__retarget_lock_release_recursive>
 8007c2c:	89ab      	ldrh	r3, [r5, #12]
 8007c2e:	065b      	lsls	r3, r3, #25
 8007c30:	f53f af12 	bmi.w	8007a58 <_vfiprintf_r+0x4c>
 8007c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c36:	e711      	b.n	8007a5c <_vfiprintf_r+0x50>
 8007c38:	ab03      	add	r3, sp, #12
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	462a      	mov	r2, r5
 8007c3e:	4630      	mov	r0, r6
 8007c40:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <_vfiprintf_r+0x258>)
 8007c42:	a904      	add	r1, sp, #16
 8007c44:	f7fe fa5a 	bl	80060fc <_printf_i>
 8007c48:	e7e4      	b.n	8007c14 <_vfiprintf_r+0x208>
 8007c4a:	bf00      	nop
 8007c4c:	08008e34 	.word	0x08008e34
 8007c50:	08008e54 	.word	0x08008e54
 8007c54:	08008e14 	.word	0x08008e14
 8007c58:	08008d02 	.word	0x08008d02
 8007c5c:	08008d0c 	.word	0x08008d0c
 8007c60:	08005bc5 	.word	0x08005bc5
 8007c64:	080079e7 	.word	0x080079e7
 8007c68:	08008d08 	.word	0x08008d08

08007c6c <__swbuf_r>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	460e      	mov	r6, r1
 8007c70:	4614      	mov	r4, r2
 8007c72:	4605      	mov	r5, r0
 8007c74:	b118      	cbz	r0, 8007c7e <__swbuf_r+0x12>
 8007c76:	6983      	ldr	r3, [r0, #24]
 8007c78:	b90b      	cbnz	r3, 8007c7e <__swbuf_r+0x12>
 8007c7a:	f000 f9e7 	bl	800804c <__sinit>
 8007c7e:	4b21      	ldr	r3, [pc, #132]	; (8007d04 <__swbuf_r+0x98>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	d12b      	bne.n	8007cdc <__swbuf_r+0x70>
 8007c84:	686c      	ldr	r4, [r5, #4]
 8007c86:	69a3      	ldr	r3, [r4, #24]
 8007c88:	60a3      	str	r3, [r4, #8]
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	071a      	lsls	r2, r3, #28
 8007c8e:	d52f      	bpl.n	8007cf0 <__swbuf_r+0x84>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	b36b      	cbz	r3, 8007cf0 <__swbuf_r+0x84>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	b2f6      	uxtb	r6, r6
 8007c9a:	1ac0      	subs	r0, r0, r3
 8007c9c:	6963      	ldr	r3, [r4, #20]
 8007c9e:	4637      	mov	r7, r6
 8007ca0:	4283      	cmp	r3, r0
 8007ca2:	dc04      	bgt.n	8007cae <__swbuf_r+0x42>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f93c 	bl	8007f24 <_fflush_r>
 8007cac:	bb30      	cbnz	r0, 8007cfc <__swbuf_r+0x90>
 8007cae:	68a3      	ldr	r3, [r4, #8]
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	701e      	strb	r6, [r3, #0]
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	4283      	cmp	r3, r0
 8007cc2:	d004      	beq.n	8007cce <__swbuf_r+0x62>
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	07db      	lsls	r3, r3, #31
 8007cc8:	d506      	bpl.n	8007cd8 <__swbuf_r+0x6c>
 8007cca:	2e0a      	cmp	r6, #10
 8007ccc:	d104      	bne.n	8007cd8 <__swbuf_r+0x6c>
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 f927 	bl	8007f24 <_fflush_r>
 8007cd6:	b988      	cbnz	r0, 8007cfc <__swbuf_r+0x90>
 8007cd8:	4638      	mov	r0, r7
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <__swbuf_r+0x9c>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d101      	bne.n	8007ce6 <__swbuf_r+0x7a>
 8007ce2:	68ac      	ldr	r4, [r5, #8]
 8007ce4:	e7cf      	b.n	8007c86 <__swbuf_r+0x1a>
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <__swbuf_r+0xa0>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	bf08      	it	eq
 8007cec:	68ec      	ldreq	r4, [r5, #12]
 8007cee:	e7ca      	b.n	8007c86 <__swbuf_r+0x1a>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f000 f81a 	bl	8007d2c <__swsetup_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d0cb      	beq.n	8007c94 <__swbuf_r+0x28>
 8007cfc:	f04f 37ff 	mov.w	r7, #4294967295
 8007d00:	e7ea      	b.n	8007cd8 <__swbuf_r+0x6c>
 8007d02:	bf00      	nop
 8007d04:	08008e34 	.word	0x08008e34
 8007d08:	08008e54 	.word	0x08008e54
 8007d0c:	08008e14 	.word	0x08008e14

08007d10 <__ascii_wctomb>:
 8007d10:	4603      	mov	r3, r0
 8007d12:	4608      	mov	r0, r1
 8007d14:	b141      	cbz	r1, 8007d28 <__ascii_wctomb+0x18>
 8007d16:	2aff      	cmp	r2, #255	; 0xff
 8007d18:	d904      	bls.n	8007d24 <__ascii_wctomb+0x14>
 8007d1a:	228a      	movs	r2, #138	; 0x8a
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	4770      	bx	lr
 8007d24:	2001      	movs	r0, #1
 8007d26:	700a      	strb	r2, [r1, #0]
 8007d28:	4770      	bx	lr
	...

08007d2c <__swsetup_r>:
 8007d2c:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <__swsetup_r+0xcc>)
 8007d2e:	b570      	push	{r4, r5, r6, lr}
 8007d30:	681d      	ldr	r5, [r3, #0]
 8007d32:	4606      	mov	r6, r0
 8007d34:	460c      	mov	r4, r1
 8007d36:	b125      	cbz	r5, 8007d42 <__swsetup_r+0x16>
 8007d38:	69ab      	ldr	r3, [r5, #24]
 8007d3a:	b913      	cbnz	r3, 8007d42 <__swsetup_r+0x16>
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f985 	bl	800804c <__sinit>
 8007d42:	4b2e      	ldr	r3, [pc, #184]	; (8007dfc <__swsetup_r+0xd0>)
 8007d44:	429c      	cmp	r4, r3
 8007d46:	d10f      	bne.n	8007d68 <__swsetup_r+0x3c>
 8007d48:	686c      	ldr	r4, [r5, #4]
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d50:	0719      	lsls	r1, r3, #28
 8007d52:	d42c      	bmi.n	8007dae <__swsetup_r+0x82>
 8007d54:	06dd      	lsls	r5, r3, #27
 8007d56:	d411      	bmi.n	8007d7c <__swsetup_r+0x50>
 8007d58:	2309      	movs	r3, #9
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	e03e      	b.n	8007de6 <__swsetup_r+0xba>
 8007d68:	4b25      	ldr	r3, [pc, #148]	; (8007e00 <__swsetup_r+0xd4>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d101      	bne.n	8007d72 <__swsetup_r+0x46>
 8007d6e:	68ac      	ldr	r4, [r5, #8]
 8007d70:	e7eb      	b.n	8007d4a <__swsetup_r+0x1e>
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <__swsetup_r+0xd8>)
 8007d74:	429c      	cmp	r4, r3
 8007d76:	bf08      	it	eq
 8007d78:	68ec      	ldreq	r4, [r5, #12]
 8007d7a:	e7e6      	b.n	8007d4a <__swsetup_r+0x1e>
 8007d7c:	0758      	lsls	r0, r3, #29
 8007d7e:	d512      	bpl.n	8007da6 <__swsetup_r+0x7a>
 8007d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d82:	b141      	cbz	r1, 8007d96 <__swsetup_r+0x6a>
 8007d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	d002      	beq.n	8007d92 <__swsetup_r+0x66>
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	f7ff fd11 	bl	80077b4 <_free_r>
 8007d92:	2300      	movs	r3, #0
 8007d94:	6363      	str	r3, [r4, #52]	; 0x34
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d9c:	81a3      	strh	r3, [r4, #12]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6063      	str	r3, [r4, #4]
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f043 0308 	orr.w	r3, r3, #8
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	6923      	ldr	r3, [r4, #16]
 8007db0:	b94b      	cbnz	r3, 8007dc6 <__swsetup_r+0x9a>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dbc:	d003      	beq.n	8007dc6 <__swsetup_r+0x9a>
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f000 fa07 	bl	80081d4 <__smakebuf_r>
 8007dc6:	89a0      	ldrh	r0, [r4, #12]
 8007dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dcc:	f010 0301 	ands.w	r3, r0, #1
 8007dd0:	d00a      	beq.n	8007de8 <__swsetup_r+0xbc>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60a3      	str	r3, [r4, #8]
 8007dd6:	6963      	ldr	r3, [r4, #20]
 8007dd8:	425b      	negs	r3, r3
 8007dda:	61a3      	str	r3, [r4, #24]
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	b943      	cbnz	r3, 8007df2 <__swsetup_r+0xc6>
 8007de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007de4:	d1ba      	bne.n	8007d5c <__swsetup_r+0x30>
 8007de6:	bd70      	pop	{r4, r5, r6, pc}
 8007de8:	0781      	lsls	r1, r0, #30
 8007dea:	bf58      	it	pl
 8007dec:	6963      	ldrpl	r3, [r4, #20]
 8007dee:	60a3      	str	r3, [r4, #8]
 8007df0:	e7f4      	b.n	8007ddc <__swsetup_r+0xb0>
 8007df2:	2000      	movs	r0, #0
 8007df4:	e7f7      	b.n	8007de6 <__swsetup_r+0xba>
 8007df6:	bf00      	nop
 8007df8:	20000024 	.word	0x20000024
 8007dfc:	08008e34 	.word	0x08008e34
 8007e00:	08008e54 	.word	0x08008e54
 8007e04:	08008e14 	.word	0x08008e14

08007e08 <abort>:
 8007e08:	2006      	movs	r0, #6
 8007e0a:	b508      	push	{r3, lr}
 8007e0c:	f000 fa4a 	bl	80082a4 <raise>
 8007e10:	2001      	movs	r0, #1
 8007e12:	f7fa f940 	bl	8002096 <_exit>
	...

08007e18 <__sflush_r>:
 8007e18:	898a      	ldrh	r2, [r1, #12]
 8007e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	4605      	mov	r5, r0
 8007e20:	0710      	lsls	r0, r2, #28
 8007e22:	460c      	mov	r4, r1
 8007e24:	d458      	bmi.n	8007ed8 <__sflush_r+0xc0>
 8007e26:	684b      	ldr	r3, [r1, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dc05      	bgt.n	8007e38 <__sflush_r+0x20>
 8007e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dc02      	bgt.n	8007e38 <__sflush_r+0x20>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	d0f9      	beq.n	8007e32 <__sflush_r+0x1a>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e44:	682f      	ldr	r7, [r5, #0]
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	d032      	beq.n	8007eb0 <__sflush_r+0x98>
 8007e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	075a      	lsls	r2, r3, #29
 8007e50:	d505      	bpl.n	8007e5e <__sflush_r+0x46>
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	1ac0      	subs	r0, r0, r3
 8007e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e58:	b10b      	cbz	r3, 8007e5e <__sflush_r+0x46>
 8007e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e5c:	1ac0      	subs	r0, r0, r3
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4602      	mov	r2, r0
 8007e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e64:	4628      	mov	r0, r5
 8007e66:	6a21      	ldr	r1, [r4, #32]
 8007e68:	47b0      	blx	r6
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	d106      	bne.n	8007e7e <__sflush_r+0x66>
 8007e70:	6829      	ldr	r1, [r5, #0]
 8007e72:	291d      	cmp	r1, #29
 8007e74:	d82c      	bhi.n	8007ed0 <__sflush_r+0xb8>
 8007e76:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <__sflush_r+0x108>)
 8007e78:	40ca      	lsrs	r2, r1
 8007e7a:	07d6      	lsls	r6, r2, #31
 8007e7c:	d528      	bpl.n	8007ed0 <__sflush_r+0xb8>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6062      	str	r2, [r4, #4]
 8007e82:	6922      	ldr	r2, [r4, #16]
 8007e84:	04d9      	lsls	r1, r3, #19
 8007e86:	6022      	str	r2, [r4, #0]
 8007e88:	d504      	bpl.n	8007e94 <__sflush_r+0x7c>
 8007e8a:	1c42      	adds	r2, r0, #1
 8007e8c:	d101      	bne.n	8007e92 <__sflush_r+0x7a>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	b903      	cbnz	r3, 8007e94 <__sflush_r+0x7c>
 8007e92:	6560      	str	r0, [r4, #84]	; 0x54
 8007e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e96:	602f      	str	r7, [r5, #0]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	d0ca      	beq.n	8007e32 <__sflush_r+0x1a>
 8007e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d002      	beq.n	8007eaa <__sflush_r+0x92>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f7ff fc85 	bl	80077b4 <_free_r>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	6360      	str	r0, [r4, #52]	; 0x34
 8007eae:	e7c1      	b.n	8007e34 <__sflush_r+0x1c>
 8007eb0:	6a21      	ldr	r1, [r4, #32]
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b0      	blx	r6
 8007eb8:	1c41      	adds	r1, r0, #1
 8007eba:	d1c7      	bne.n	8007e4c <__sflush_r+0x34>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0c4      	beq.n	8007e4c <__sflush_r+0x34>
 8007ec2:	2b1d      	cmp	r3, #29
 8007ec4:	d001      	beq.n	8007eca <__sflush_r+0xb2>
 8007ec6:	2b16      	cmp	r3, #22
 8007ec8:	d101      	bne.n	8007ece <__sflush_r+0xb6>
 8007eca:	602f      	str	r7, [r5, #0]
 8007ecc:	e7b1      	b.n	8007e32 <__sflush_r+0x1a>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	e7ad      	b.n	8007e34 <__sflush_r+0x1c>
 8007ed8:	690f      	ldr	r7, [r1, #16]
 8007eda:	2f00      	cmp	r7, #0
 8007edc:	d0a9      	beq.n	8007e32 <__sflush_r+0x1a>
 8007ede:	0793      	lsls	r3, r2, #30
 8007ee0:	bf18      	it	ne
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	680e      	ldr	r6, [r1, #0]
 8007ee6:	bf08      	it	eq
 8007ee8:	694b      	ldreq	r3, [r1, #20]
 8007eea:	eba6 0807 	sub.w	r8, r6, r7
 8007eee:	600f      	str	r7, [r1, #0]
 8007ef0:	608b      	str	r3, [r1, #8]
 8007ef2:	f1b8 0f00 	cmp.w	r8, #0
 8007ef6:	dd9c      	ble.n	8007e32 <__sflush_r+0x1a>
 8007ef8:	4643      	mov	r3, r8
 8007efa:	463a      	mov	r2, r7
 8007efc:	4628      	mov	r0, r5
 8007efe:	6a21      	ldr	r1, [r4, #32]
 8007f00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f02:	47b0      	blx	r6
 8007f04:	2800      	cmp	r0, #0
 8007f06:	dc06      	bgt.n	8007f16 <__sflush_r+0xfe>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	e78e      	b.n	8007e34 <__sflush_r+0x1c>
 8007f16:	4407      	add	r7, r0
 8007f18:	eba8 0800 	sub.w	r8, r8, r0
 8007f1c:	e7e9      	b.n	8007ef2 <__sflush_r+0xda>
 8007f1e:	bf00      	nop
 8007f20:	20400001 	.word	0x20400001

08007f24 <_fflush_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	690b      	ldr	r3, [r1, #16]
 8007f28:	4605      	mov	r5, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	b913      	cbnz	r3, 8007f34 <_fflush_r+0x10>
 8007f2e:	2500      	movs	r5, #0
 8007f30:	4628      	mov	r0, r5
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	b118      	cbz	r0, 8007f3e <_fflush_r+0x1a>
 8007f36:	6983      	ldr	r3, [r0, #24]
 8007f38:	b90b      	cbnz	r3, 8007f3e <_fflush_r+0x1a>
 8007f3a:	f000 f887 	bl	800804c <__sinit>
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <_fflush_r+0x6c>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	d11b      	bne.n	8007f7c <_fflush_r+0x58>
 8007f44:	686c      	ldr	r4, [r5, #4]
 8007f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0ef      	beq.n	8007f2e <_fflush_r+0xa>
 8007f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f50:	07d0      	lsls	r0, r2, #31
 8007f52:	d404      	bmi.n	8007f5e <_fflush_r+0x3a>
 8007f54:	0599      	lsls	r1, r3, #22
 8007f56:	d402      	bmi.n	8007f5e <_fflush_r+0x3a>
 8007f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f5a:	f000 f915 	bl	8008188 <__retarget_lock_acquire_recursive>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	4621      	mov	r1, r4
 8007f62:	f7ff ff59 	bl	8007e18 <__sflush_r>
 8007f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f68:	4605      	mov	r5, r0
 8007f6a:	07da      	lsls	r2, r3, #31
 8007f6c:	d4e0      	bmi.n	8007f30 <_fflush_r+0xc>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	059b      	lsls	r3, r3, #22
 8007f72:	d4dd      	bmi.n	8007f30 <_fflush_r+0xc>
 8007f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f76:	f000 f908 	bl	800818a <__retarget_lock_release_recursive>
 8007f7a:	e7d9      	b.n	8007f30 <_fflush_r+0xc>
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <_fflush_r+0x70>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d101      	bne.n	8007f86 <_fflush_r+0x62>
 8007f82:	68ac      	ldr	r4, [r5, #8]
 8007f84:	e7df      	b.n	8007f46 <_fflush_r+0x22>
 8007f86:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <_fflush_r+0x74>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	bf08      	it	eq
 8007f8c:	68ec      	ldreq	r4, [r5, #12]
 8007f8e:	e7da      	b.n	8007f46 <_fflush_r+0x22>
 8007f90:	08008e34 	.word	0x08008e34
 8007f94:	08008e54 	.word	0x08008e54
 8007f98:	08008e14 	.word	0x08008e14

08007f9c <std>:
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007faa:	6083      	str	r3, [r0, #8]
 8007fac:	8181      	strh	r1, [r0, #12]
 8007fae:	6643      	str	r3, [r0, #100]	; 0x64
 8007fb0:	81c2      	strh	r2, [r0, #14]
 8007fb2:	6183      	str	r3, [r0, #24]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	305c      	adds	r0, #92	; 0x5c
 8007fba:	f7fd fd5d 	bl	8005a78 <memset>
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <std+0x38>)
 8007fc0:	6224      	str	r4, [r4, #32]
 8007fc2:	6263      	str	r3, [r4, #36]	; 0x24
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <std+0x3c>)
 8007fc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fc8:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <std+0x40>)
 8007fca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fcc:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <std+0x44>)
 8007fce:	6323      	str	r3, [r4, #48]	; 0x30
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	bf00      	nop
 8007fd4:	080082dd 	.word	0x080082dd
 8007fd8:	080082ff 	.word	0x080082ff
 8007fdc:	08008337 	.word	0x08008337
 8007fe0:	0800835b 	.word	0x0800835b

08007fe4 <_cleanup_r>:
 8007fe4:	4901      	ldr	r1, [pc, #4]	; (8007fec <_cleanup_r+0x8>)
 8007fe6:	f000 b8af 	b.w	8008148 <_fwalk_reent>
 8007fea:	bf00      	nop
 8007fec:	08007f25 	.word	0x08007f25

08007ff0 <__sfmoreglue>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	2568      	movs	r5, #104	; 0x68
 8007ff4:	1e4a      	subs	r2, r1, #1
 8007ff6:	4355      	muls	r5, r2
 8007ff8:	460e      	mov	r6, r1
 8007ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ffe:	f7ff fc25 	bl	800784c <_malloc_r>
 8008002:	4604      	mov	r4, r0
 8008004:	b140      	cbz	r0, 8008018 <__sfmoreglue+0x28>
 8008006:	2100      	movs	r1, #0
 8008008:	e9c0 1600 	strd	r1, r6, [r0]
 800800c:	300c      	adds	r0, #12
 800800e:	60a0      	str	r0, [r4, #8]
 8008010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008014:	f7fd fd30 	bl	8005a78 <memset>
 8008018:	4620      	mov	r0, r4
 800801a:	bd70      	pop	{r4, r5, r6, pc}

0800801c <__sfp_lock_acquire>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__sfp_lock_acquire+0x8>)
 800801e:	f000 b8b3 	b.w	8008188 <__retarget_lock_acquire_recursive>
 8008022:	bf00      	nop
 8008024:	20000440 	.word	0x20000440

08008028 <__sfp_lock_release>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__sfp_lock_release+0x8>)
 800802a:	f000 b8ae 	b.w	800818a <__retarget_lock_release_recursive>
 800802e:	bf00      	nop
 8008030:	20000440 	.word	0x20000440

08008034 <__sinit_lock_acquire>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sinit_lock_acquire+0x8>)
 8008036:	f000 b8a7 	b.w	8008188 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	2000043b 	.word	0x2000043b

08008040 <__sinit_lock_release>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sinit_lock_release+0x8>)
 8008042:	f000 b8a2 	b.w	800818a <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	2000043b 	.word	0x2000043b

0800804c <__sinit>:
 800804c:	b510      	push	{r4, lr}
 800804e:	4604      	mov	r4, r0
 8008050:	f7ff fff0 	bl	8008034 <__sinit_lock_acquire>
 8008054:	69a3      	ldr	r3, [r4, #24]
 8008056:	b11b      	cbz	r3, 8008060 <__sinit+0x14>
 8008058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800805c:	f7ff bff0 	b.w	8008040 <__sinit_lock_release>
 8008060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008064:	6523      	str	r3, [r4, #80]	; 0x50
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <__sinit+0x68>)
 8008068:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <__sinit+0x6c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	62a2      	str	r2, [r4, #40]	; 0x28
 800806e:	42a3      	cmp	r3, r4
 8008070:	bf08      	it	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	4620      	mov	r0, r4
 8008076:	bf08      	it	eq
 8008078:	61a3      	streq	r3, [r4, #24]
 800807a:	f000 f81f 	bl	80080bc <__sfp>
 800807e:	6060      	str	r0, [r4, #4]
 8008080:	4620      	mov	r0, r4
 8008082:	f000 f81b 	bl	80080bc <__sfp>
 8008086:	60a0      	str	r0, [r4, #8]
 8008088:	4620      	mov	r0, r4
 800808a:	f000 f817 	bl	80080bc <__sfp>
 800808e:	2200      	movs	r2, #0
 8008090:	2104      	movs	r1, #4
 8008092:	60e0      	str	r0, [r4, #12]
 8008094:	6860      	ldr	r0, [r4, #4]
 8008096:	f7ff ff81 	bl	8007f9c <std>
 800809a:	2201      	movs	r2, #1
 800809c:	2109      	movs	r1, #9
 800809e:	68a0      	ldr	r0, [r4, #8]
 80080a0:	f7ff ff7c 	bl	8007f9c <std>
 80080a4:	2202      	movs	r2, #2
 80080a6:	2112      	movs	r1, #18
 80080a8:	68e0      	ldr	r0, [r4, #12]
 80080aa:	f7ff ff77 	bl	8007f9c <std>
 80080ae:	2301      	movs	r3, #1
 80080b0:	61a3      	str	r3, [r4, #24]
 80080b2:	e7d1      	b.n	8008058 <__sinit+0xc>
 80080b4:	08008a90 	.word	0x08008a90
 80080b8:	08007fe5 	.word	0x08007fe5

080080bc <__sfp>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	4607      	mov	r7, r0
 80080c0:	f7ff ffac 	bl	800801c <__sfp_lock_acquire>
 80080c4:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <__sfp+0x84>)
 80080c6:	681e      	ldr	r6, [r3, #0]
 80080c8:	69b3      	ldr	r3, [r6, #24]
 80080ca:	b913      	cbnz	r3, 80080d2 <__sfp+0x16>
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff ffbd 	bl	800804c <__sinit>
 80080d2:	3648      	adds	r6, #72	; 0x48
 80080d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	d503      	bpl.n	80080e4 <__sfp+0x28>
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	b30b      	cbz	r3, 8008124 <__sfp+0x68>
 80080e0:	6836      	ldr	r6, [r6, #0]
 80080e2:	e7f7      	b.n	80080d4 <__sfp+0x18>
 80080e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080e8:	b9d5      	cbnz	r5, 8008120 <__sfp+0x64>
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <__sfp+0x88>)
 80080ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080f0:	60e3      	str	r3, [r4, #12]
 80080f2:	6665      	str	r5, [r4, #100]	; 0x64
 80080f4:	f000 f847 	bl	8008186 <__retarget_lock_init_recursive>
 80080f8:	f7ff ff96 	bl	8008028 <__sfp_lock_release>
 80080fc:	2208      	movs	r2, #8
 80080fe:	4629      	mov	r1, r5
 8008100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008108:	6025      	str	r5, [r4, #0]
 800810a:	61a5      	str	r5, [r4, #24]
 800810c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008110:	f7fd fcb2 	bl	8005a78 <memset>
 8008114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800811c:	4620      	mov	r0, r4
 800811e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008120:	3468      	adds	r4, #104	; 0x68
 8008122:	e7d9      	b.n	80080d8 <__sfp+0x1c>
 8008124:	2104      	movs	r1, #4
 8008126:	4638      	mov	r0, r7
 8008128:	f7ff ff62 	bl	8007ff0 <__sfmoreglue>
 800812c:	4604      	mov	r4, r0
 800812e:	6030      	str	r0, [r6, #0]
 8008130:	2800      	cmp	r0, #0
 8008132:	d1d5      	bne.n	80080e0 <__sfp+0x24>
 8008134:	f7ff ff78 	bl	8008028 <__sfp_lock_release>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	e7ee      	b.n	800811c <__sfp+0x60>
 800813e:	bf00      	nop
 8008140:	08008a90 	.word	0x08008a90
 8008144:	ffff0001 	.word	0xffff0001

08008148 <_fwalk_reent>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	4606      	mov	r6, r0
 800814e:	4688      	mov	r8, r1
 8008150:	2700      	movs	r7, #0
 8008152:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800815a:	f1b9 0901 	subs.w	r9, r9, #1
 800815e:	d505      	bpl.n	800816c <_fwalk_reent+0x24>
 8008160:	6824      	ldr	r4, [r4, #0]
 8008162:	2c00      	cmp	r4, #0
 8008164:	d1f7      	bne.n	8008156 <_fwalk_reent+0xe>
 8008166:	4638      	mov	r0, r7
 8008168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816c:	89ab      	ldrh	r3, [r5, #12]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d907      	bls.n	8008182 <_fwalk_reent+0x3a>
 8008172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008176:	3301      	adds	r3, #1
 8008178:	d003      	beq.n	8008182 <_fwalk_reent+0x3a>
 800817a:	4629      	mov	r1, r5
 800817c:	4630      	mov	r0, r6
 800817e:	47c0      	blx	r8
 8008180:	4307      	orrs	r7, r0
 8008182:	3568      	adds	r5, #104	; 0x68
 8008184:	e7e9      	b.n	800815a <_fwalk_reent+0x12>

08008186 <__retarget_lock_init_recursive>:
 8008186:	4770      	bx	lr

08008188 <__retarget_lock_acquire_recursive>:
 8008188:	4770      	bx	lr

0800818a <__retarget_lock_release_recursive>:
 800818a:	4770      	bx	lr

0800818c <__swhatbuf_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	460e      	mov	r6, r1
 8008190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008194:	4614      	mov	r4, r2
 8008196:	2900      	cmp	r1, #0
 8008198:	461d      	mov	r5, r3
 800819a:	b096      	sub	sp, #88	; 0x58
 800819c:	da07      	bge.n	80081ae <__swhatbuf_r+0x22>
 800819e:	2300      	movs	r3, #0
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	89b3      	ldrh	r3, [r6, #12]
 80081a4:	061a      	lsls	r2, r3, #24
 80081a6:	d410      	bmi.n	80081ca <__swhatbuf_r+0x3e>
 80081a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ac:	e00e      	b.n	80081cc <__swhatbuf_r+0x40>
 80081ae:	466a      	mov	r2, sp
 80081b0:	f000 f8fa 	bl	80083a8 <_fstat_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dbf2      	blt.n	800819e <__swhatbuf_r+0x12>
 80081b8:	9a01      	ldr	r2, [sp, #4]
 80081ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081c2:	425a      	negs	r2, r3
 80081c4:	415a      	adcs	r2, r3
 80081c6:	602a      	str	r2, [r5, #0]
 80081c8:	e7ee      	b.n	80081a8 <__swhatbuf_r+0x1c>
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	2000      	movs	r0, #0
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	b016      	add	sp, #88	; 0x58
 80081d2:	bd70      	pop	{r4, r5, r6, pc}

080081d4 <__smakebuf_r>:
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d8:	079d      	lsls	r5, r3, #30
 80081da:	4606      	mov	r6, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	d507      	bpl.n	80081f0 <__smakebuf_r+0x1c>
 80081e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	2301      	movs	r3, #1
 80081ea:	6163      	str	r3, [r4, #20]
 80081ec:	b002      	add	sp, #8
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	466a      	mov	r2, sp
 80081f2:	ab01      	add	r3, sp, #4
 80081f4:	f7ff ffca 	bl	800818c <__swhatbuf_r>
 80081f8:	9900      	ldr	r1, [sp, #0]
 80081fa:	4605      	mov	r5, r0
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff fb25 	bl	800784c <_malloc_r>
 8008202:	b948      	cbnz	r0, 8008218 <__smakebuf_r+0x44>
 8008204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008208:	059a      	lsls	r2, r3, #22
 800820a:	d4ef      	bmi.n	80081ec <__smakebuf_r+0x18>
 800820c:	f023 0303 	bic.w	r3, r3, #3
 8008210:	f043 0302 	orr.w	r3, r3, #2
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e7e3      	b.n	80081e0 <__smakebuf_r+0xc>
 8008218:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <__smakebuf_r+0x7c>)
 800821a:	62b3      	str	r3, [r6, #40]	; 0x28
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	9b00      	ldr	r3, [sp, #0]
 8008228:	6120      	str	r0, [r4, #16]
 800822a:	6163      	str	r3, [r4, #20]
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	b15b      	cbz	r3, 8008248 <__smakebuf_r+0x74>
 8008230:	4630      	mov	r0, r6
 8008232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008236:	f000 f8c9 	bl	80083cc <_isatty_r>
 800823a:	b128      	cbz	r0, 8008248 <__smakebuf_r+0x74>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f023 0303 	bic.w	r3, r3, #3
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	89a0      	ldrh	r0, [r4, #12]
 800824a:	4305      	orrs	r5, r0
 800824c:	81a5      	strh	r5, [r4, #12]
 800824e:	e7cd      	b.n	80081ec <__smakebuf_r+0x18>
 8008250:	08007fe5 	.word	0x08007fe5

08008254 <_raise_r>:
 8008254:	291f      	cmp	r1, #31
 8008256:	b538      	push	{r3, r4, r5, lr}
 8008258:	4604      	mov	r4, r0
 800825a:	460d      	mov	r5, r1
 800825c:	d904      	bls.n	8008268 <_raise_r+0x14>
 800825e:	2316      	movs	r3, #22
 8008260:	6003      	str	r3, [r0, #0]
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800826a:	b112      	cbz	r2, 8008272 <_raise_r+0x1e>
 800826c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008270:	b94b      	cbnz	r3, 8008286 <_raise_r+0x32>
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f830 	bl	80082d8 <_getpid_r>
 8008278:	462a      	mov	r2, r5
 800827a:	4601      	mov	r1, r0
 800827c:	4620      	mov	r0, r4
 800827e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008282:	f000 b817 	b.w	80082b4 <_kill_r>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d00a      	beq.n	80082a0 <_raise_r+0x4c>
 800828a:	1c59      	adds	r1, r3, #1
 800828c:	d103      	bne.n	8008296 <_raise_r+0x42>
 800828e:	2316      	movs	r3, #22
 8008290:	6003      	str	r3, [r0, #0]
 8008292:	2001      	movs	r0, #1
 8008294:	e7e7      	b.n	8008266 <_raise_r+0x12>
 8008296:	2400      	movs	r4, #0
 8008298:	4628      	mov	r0, r5
 800829a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800829e:	4798      	blx	r3
 80082a0:	2000      	movs	r0, #0
 80082a2:	e7e0      	b.n	8008266 <_raise_r+0x12>

080082a4 <raise>:
 80082a4:	4b02      	ldr	r3, [pc, #8]	; (80082b0 <raise+0xc>)
 80082a6:	4601      	mov	r1, r0
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	f7ff bfd3 	b.w	8008254 <_raise_r>
 80082ae:	bf00      	nop
 80082b0:	20000024 	.word	0x20000024

080082b4 <_kill_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	2300      	movs	r3, #0
 80082b8:	4d06      	ldr	r5, [pc, #24]	; (80082d4 <_kill_r+0x20>)
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	4611      	mov	r1, r2
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	f7f9 fed8 	bl	8002076 <_kill>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	d102      	bne.n	80082d0 <_kill_r+0x1c>
 80082ca:	682b      	ldr	r3, [r5, #0]
 80082cc:	b103      	cbz	r3, 80082d0 <_kill_r+0x1c>
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	bf00      	nop
 80082d4:	20000434 	.word	0x20000434

080082d8 <_getpid_r>:
 80082d8:	f7f9 bec6 	b.w	8002068 <_getpid>

080082dc <__sread>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	460c      	mov	r4, r1
 80082e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e4:	f000 f894 	bl	8008410 <_read_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	bfab      	itete	ge
 80082ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ee:	89a3      	ldrhlt	r3, [r4, #12]
 80082f0:	181b      	addge	r3, r3, r0
 80082f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082f6:	bfac      	ite	ge
 80082f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80082fa:	81a3      	strhlt	r3, [r4, #12]
 80082fc:	bd10      	pop	{r4, pc}

080082fe <__swrite>:
 80082fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008302:	461f      	mov	r7, r3
 8008304:	898b      	ldrh	r3, [r1, #12]
 8008306:	4605      	mov	r5, r0
 8008308:	05db      	lsls	r3, r3, #23
 800830a:	460c      	mov	r4, r1
 800830c:	4616      	mov	r6, r2
 800830e:	d505      	bpl.n	800831c <__swrite+0x1e>
 8008310:	2302      	movs	r3, #2
 8008312:	2200      	movs	r2, #0
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	f000 f868 	bl	80083ec <_lseek_r>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	4632      	mov	r2, r6
 8008320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	4628      	mov	r0, r5
 8008328:	463b      	mov	r3, r7
 800832a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800832e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008332:	f000 b817 	b.w	8008364 <_write_r>

08008336 <__sseek>:
 8008336:	b510      	push	{r4, lr}
 8008338:	460c      	mov	r4, r1
 800833a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833e:	f000 f855 	bl	80083ec <_lseek_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	bf15      	itete	ne
 8008348:	6560      	strne	r0, [r4, #84]	; 0x54
 800834a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800834e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008352:	81a3      	strheq	r3, [r4, #12]
 8008354:	bf18      	it	ne
 8008356:	81a3      	strhne	r3, [r4, #12]
 8008358:	bd10      	pop	{r4, pc}

0800835a <__sclose>:
 800835a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835e:	f000 b813 	b.w	8008388 <_close_r>
	...

08008364 <_write_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	2200      	movs	r2, #0
 800836e:	4d05      	ldr	r5, [pc, #20]	; (8008384 <_write_r+0x20>)
 8008370:	602a      	str	r2, [r5, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	f7f9 feb6 	bl	80020e4 <_write>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_write_r+0x1e>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_write_r+0x1e>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20000434 	.word	0x20000434

08008388 <_close_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	2300      	movs	r3, #0
 800838c:	4d05      	ldr	r5, [pc, #20]	; (80083a4 <_close_r+0x1c>)
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7f9 fec2 	bl	800211c <_close>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_close_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_close_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20000434 	.word	0x20000434

080083a8 <_fstat_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	2300      	movs	r3, #0
 80083ac:	4d06      	ldr	r5, [pc, #24]	; (80083c8 <_fstat_r+0x20>)
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	602b      	str	r3, [r5, #0]
 80083b6:	f7f9 febc 	bl	8002132 <_fstat>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d102      	bne.n	80083c4 <_fstat_r+0x1c>
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	b103      	cbz	r3, 80083c4 <_fstat_r+0x1c>
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	bf00      	nop
 80083c8:	20000434 	.word	0x20000434

080083cc <_isatty_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	2300      	movs	r3, #0
 80083d0:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_isatty_r+0x1c>)
 80083d2:	4604      	mov	r4, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	f7f9 feba 	bl	8002150 <_isatty>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_isatty_r+0x1a>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_isatty_r+0x1a>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000434 	.word	0x20000434

080083ec <_lseek_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	2200      	movs	r2, #0
 80083f6:	4d05      	ldr	r5, [pc, #20]	; (800840c <_lseek_r+0x20>)
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7f9 feb2 	bl	8002164 <_lseek>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_lseek_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_lseek_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20000434 	.word	0x20000434

08008410 <_read_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	2200      	movs	r2, #0
 800841a:	4d05      	ldr	r5, [pc, #20]	; (8008430 <_read_r+0x20>)
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7f9 fe43 	bl	80020aa <_read>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_read_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_read_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20000434 	.word	0x20000434

08008434 <asin>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	f000 f855 	bl	80084e8 <__ieee754_asin>
 800843e:	4b11      	ldr	r3, [pc, #68]	; (8008484 <asin+0x50>)
 8008440:	4606      	mov	r6, r0
 8008442:	f993 3000 	ldrsb.w	r3, [r3]
 8008446:	460f      	mov	r7, r1
 8008448:	3301      	adds	r3, #1
 800844a:	d018      	beq.n	800847e <asin+0x4a>
 800844c:	4622      	mov	r2, r4
 800844e:	462b      	mov	r3, r5
 8008450:	4620      	mov	r0, r4
 8008452:	4629      	mov	r1, r5
 8008454:	f7f8 fada 	bl	8000a0c <__aeabi_dcmpun>
 8008458:	b988      	cbnz	r0, 800847e <asin+0x4a>
 800845a:	4620      	mov	r0, r4
 800845c:	4629      	mov	r1, r5
 800845e:	f000 faeb 	bl	8008a38 <fabs>
 8008462:	2200      	movs	r2, #0
 8008464:	4b08      	ldr	r3, [pc, #32]	; (8008488 <asin+0x54>)
 8008466:	f7f8 fac7 	bl	80009f8 <__aeabi_dcmpgt>
 800846a:	b140      	cbz	r0, 800847e <asin+0x4a>
 800846c:	f7fd fada 	bl	8005a24 <__errno>
 8008470:	2321      	movs	r3, #33	; 0x21
 8008472:	6003      	str	r3, [r0, #0]
 8008474:	4805      	ldr	r0, [pc, #20]	; (800848c <asin+0x58>)
 8008476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800847a:	f000 bae1 	b.w	8008a40 <nan>
 800847e:	4630      	mov	r0, r6
 8008480:	4639      	mov	r1, r7
 8008482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008484:	200001f4 	.word	0x200001f4
 8008488:	3ff00000 	.word	0x3ff00000
 800848c:	08008cf7 	.word	0x08008cf7

08008490 <sqrt>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	f000 fa23 	bl	80088e0 <__ieee754_sqrt>
 800849a:	4b12      	ldr	r3, [pc, #72]	; (80084e4 <sqrt+0x54>)
 800849c:	4604      	mov	r4, r0
 800849e:	f993 3000 	ldrsb.w	r3, [r3]
 80084a2:	460d      	mov	r5, r1
 80084a4:	3301      	adds	r3, #1
 80084a6:	d019      	beq.n	80084dc <sqrt+0x4c>
 80084a8:	4632      	mov	r2, r6
 80084aa:	463b      	mov	r3, r7
 80084ac:	4630      	mov	r0, r6
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 faac 	bl	8000a0c <__aeabi_dcmpun>
 80084b4:	b990      	cbnz	r0, 80084dc <sqrt+0x4c>
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	f7f8 fa7d 	bl	80009bc <__aeabi_dcmplt>
 80084c2:	b158      	cbz	r0, 80084dc <sqrt+0x4c>
 80084c4:	f7fd faae 	bl	8005a24 <__errno>
 80084c8:	2321      	movs	r3, #33	; 0x21
 80084ca:	2200      	movs	r2, #0
 80084cc:	6003      	str	r3, [r0, #0]
 80084ce:	2300      	movs	r3, #0
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	f7f8 f92a 	bl	800072c <__aeabi_ddiv>
 80084d8:	4604      	mov	r4, r0
 80084da:	460d      	mov	r5, r1
 80084dc:	4620      	mov	r0, r4
 80084de:	4629      	mov	r1, r5
 80084e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200001f4 	.word	0x200001f4

080084e8 <__ieee754_asin>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	4bc4      	ldr	r3, [pc, #784]	; (8008800 <__ieee754_asin+0x318>)
 80084ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80084f2:	b087      	sub	sp, #28
 80084f4:	429e      	cmp	r6, r3
 80084f6:	4602      	mov	r2, r0
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	9105      	str	r1, [sp, #20]
 80084fe:	dd29      	ble.n	8008554 <__ieee754_asin+0x6c>
 8008500:	4603      	mov	r3, r0
 8008502:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8008506:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800850a:	4333      	orrs	r3, r6
 800850c:	d114      	bne.n	8008538 <__ieee754_asin+0x50>
 800850e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008798 <__ieee754_asin+0x2b0>)
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f7f7 ffe0 	bl	80004d8 <__aeabi_dmul>
 8008518:	a3a1      	add	r3, pc, #644	; (adr r3, 80087a0 <__ieee754_asin+0x2b8>)
 800851a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851e:	4606      	mov	r6, r0
 8008520:	460f      	mov	r7, r1
 8008522:	4620      	mov	r0, r4
 8008524:	4629      	mov	r1, r5
 8008526:	f7f7 ffd7 	bl	80004d8 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f7 fe1b 	bl	800016c <__adddf3>
 8008536:	e006      	b.n	8008546 <__ieee754_asin+0x5e>
 8008538:	460b      	mov	r3, r1
 800853a:	f7f7 fe15 	bl	8000168 <__aeabi_dsub>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	f7f8 f8f3 	bl	800072c <__aeabi_ddiv>
 8008546:	4604      	mov	r4, r0
 8008548:	460d      	mov	r5, r1
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	b007      	add	sp, #28
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	4bab      	ldr	r3, [pc, #684]	; (8008804 <__ieee754_asin+0x31c>)
 8008556:	429e      	cmp	r6, r3
 8008558:	dc0e      	bgt.n	8008578 <__ieee754_asin+0x90>
 800855a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800855e:	f280 80ab 	bge.w	80086b8 <__ieee754_asin+0x1d0>
 8008562:	a391      	add	r3, pc, #580	; (adr r3, 80087a8 <__ieee754_asin+0x2c0>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f7f7 fe00 	bl	800016c <__adddf3>
 800856c:	2200      	movs	r2, #0
 800856e:	4ba6      	ldr	r3, [pc, #664]	; (8008808 <__ieee754_asin+0x320>)
 8008570:	f7f8 fa42 	bl	80009f8 <__aeabi_dcmpgt>
 8008574:	2800      	cmp	r0, #0
 8008576:	d1e8      	bne.n	800854a <__ieee754_asin+0x62>
 8008578:	4620      	mov	r0, r4
 800857a:	4629      	mov	r1, r5
 800857c:	f000 fa5c 	bl	8008a38 <fabs>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	2000      	movs	r0, #0
 8008586:	49a0      	ldr	r1, [pc, #640]	; (8008808 <__ieee754_asin+0x320>)
 8008588:	f7f7 fdee 	bl	8000168 <__aeabi_dsub>
 800858c:	2200      	movs	r2, #0
 800858e:	4b9f      	ldr	r3, [pc, #636]	; (800880c <__ieee754_asin+0x324>)
 8008590:	f7f7 ffa2 	bl	80004d8 <__aeabi_dmul>
 8008594:	a386      	add	r3, pc, #536	; (adr r3, 80087b0 <__ieee754_asin+0x2c8>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	4604      	mov	r4, r0
 800859c:	460d      	mov	r5, r1
 800859e:	f7f7 ff9b 	bl	80004d8 <__aeabi_dmul>
 80085a2:	a385      	add	r3, pc, #532	; (adr r3, 80087b8 <__ieee754_asin+0x2d0>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 fde0 	bl	800016c <__adddf3>
 80085ac:	4622      	mov	r2, r4
 80085ae:	462b      	mov	r3, r5
 80085b0:	f7f7 ff92 	bl	80004d8 <__aeabi_dmul>
 80085b4:	a382      	add	r3, pc, #520	; (adr r3, 80087c0 <__ieee754_asin+0x2d8>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f7 fdd5 	bl	8000168 <__aeabi_dsub>
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	f7f7 ff89 	bl	80004d8 <__aeabi_dmul>
 80085c6:	a380      	add	r3, pc, #512	; (adr r3, 80087c8 <__ieee754_asin+0x2e0>)
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f7f7 fdce 	bl	800016c <__adddf3>
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	f7f7 ff80 	bl	80004d8 <__aeabi_dmul>
 80085d8:	a37d      	add	r3, pc, #500	; (adr r3, 80087d0 <__ieee754_asin+0x2e8>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 fdc3 	bl	8000168 <__aeabi_dsub>
 80085e2:	4622      	mov	r2, r4
 80085e4:	462b      	mov	r3, r5
 80085e6:	f7f7 ff77 	bl	80004d8 <__aeabi_dmul>
 80085ea:	a37b      	add	r3, pc, #492	; (adr r3, 80087d8 <__ieee754_asin+0x2f0>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f7 fdbc 	bl	800016c <__adddf3>
 80085f4:	4622      	mov	r2, r4
 80085f6:	462b      	mov	r3, r5
 80085f8:	f7f7 ff6e 	bl	80004d8 <__aeabi_dmul>
 80085fc:	a378      	add	r3, pc, #480	; (adr r3, 80087e0 <__ieee754_asin+0x2f8>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	e9cd 0100 	strd	r0, r1, [sp]
 8008606:	4620      	mov	r0, r4
 8008608:	4629      	mov	r1, r5
 800860a:	f7f7 ff65 	bl	80004d8 <__aeabi_dmul>
 800860e:	a376      	add	r3, pc, #472	; (adr r3, 80087e8 <__ieee754_asin+0x300>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f7f7 fda8 	bl	8000168 <__aeabi_dsub>
 8008618:	4622      	mov	r2, r4
 800861a:	462b      	mov	r3, r5
 800861c:	f7f7 ff5c 	bl	80004d8 <__aeabi_dmul>
 8008620:	a373      	add	r3, pc, #460	; (adr r3, 80087f0 <__ieee754_asin+0x308>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 fda1 	bl	800016c <__adddf3>
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	f7f7 ff53 	bl	80004d8 <__aeabi_dmul>
 8008632:	a371      	add	r3, pc, #452	; (adr r3, 80087f8 <__ieee754_asin+0x310>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fd96 	bl	8000168 <__aeabi_dsub>
 800863c:	4622      	mov	r2, r4
 800863e:	462b      	mov	r3, r5
 8008640:	f7f7 ff4a 	bl	80004d8 <__aeabi_dmul>
 8008644:	4b70      	ldr	r3, [pc, #448]	; (8008808 <__ieee754_asin+0x320>)
 8008646:	2200      	movs	r2, #0
 8008648:	f7f7 fd90 	bl	800016c <__adddf3>
 800864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008650:	4620      	mov	r0, r4
 8008652:	4629      	mov	r1, r5
 8008654:	f000 f944 	bl	80088e0 <__ieee754_sqrt>
 8008658:	4b6d      	ldr	r3, [pc, #436]	; (8008810 <__ieee754_asin+0x328>)
 800865a:	4682      	mov	sl, r0
 800865c:	429e      	cmp	r6, r3
 800865e:	468b      	mov	fp, r1
 8008660:	f340 80d8 	ble.w	8008814 <__ieee754_asin+0x32c>
 8008664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800866c:	f7f8 f85e 	bl	800072c <__aeabi_ddiv>
 8008670:	4652      	mov	r2, sl
 8008672:	465b      	mov	r3, fp
 8008674:	f7f7 ff30 	bl	80004d8 <__aeabi_dmul>
 8008678:	4652      	mov	r2, sl
 800867a:	465b      	mov	r3, fp
 800867c:	f7f7 fd76 	bl	800016c <__adddf3>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	f7f7 fd72 	bl	800016c <__adddf3>
 8008688:	a345      	add	r3, pc, #276	; (adr r3, 80087a0 <__ieee754_asin+0x2b8>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 fd6b 	bl	8000168 <__aeabi_dsub>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	a140      	add	r1, pc, #256	; (adr r1, 8008798 <__ieee754_asin+0x2b0>)
 8008698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869c:	f7f7 fd64 	bl	8000168 <__aeabi_dsub>
 80086a0:	9b05      	ldr	r3, [sp, #20]
 80086a2:	4604      	mov	r4, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bfdc      	itt	le
 80086a8:	4602      	movle	r2, r0
 80086aa:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80086ae:	460d      	mov	r5, r1
 80086b0:	bfdc      	itt	le
 80086b2:	4614      	movle	r4, r2
 80086b4:	461d      	movle	r5, r3
 80086b6:	e748      	b.n	800854a <__ieee754_asin+0x62>
 80086b8:	460b      	mov	r3, r1
 80086ba:	f7f7 ff0d 	bl	80004d8 <__aeabi_dmul>
 80086be:	a33c      	add	r3, pc, #240	; (adr r3, 80087b0 <__ieee754_asin+0x2c8>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	4606      	mov	r6, r0
 80086c6:	460f      	mov	r7, r1
 80086c8:	f7f7 ff06 	bl	80004d8 <__aeabi_dmul>
 80086cc:	a33a      	add	r3, pc, #232	; (adr r3, 80087b8 <__ieee754_asin+0x2d0>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f7f7 fd4b 	bl	800016c <__adddf3>
 80086d6:	4632      	mov	r2, r6
 80086d8:	463b      	mov	r3, r7
 80086da:	f7f7 fefd 	bl	80004d8 <__aeabi_dmul>
 80086de:	a338      	add	r3, pc, #224	; (adr r3, 80087c0 <__ieee754_asin+0x2d8>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 fd40 	bl	8000168 <__aeabi_dsub>
 80086e8:	4632      	mov	r2, r6
 80086ea:	463b      	mov	r3, r7
 80086ec:	f7f7 fef4 	bl	80004d8 <__aeabi_dmul>
 80086f0:	a335      	add	r3, pc, #212	; (adr r3, 80087c8 <__ieee754_asin+0x2e0>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 fd39 	bl	800016c <__adddf3>
 80086fa:	4632      	mov	r2, r6
 80086fc:	463b      	mov	r3, r7
 80086fe:	f7f7 feeb 	bl	80004d8 <__aeabi_dmul>
 8008702:	a333      	add	r3, pc, #204	; (adr r3, 80087d0 <__ieee754_asin+0x2e8>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f7f7 fd2e 	bl	8000168 <__aeabi_dsub>
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	f7f7 fee2 	bl	80004d8 <__aeabi_dmul>
 8008714:	a330      	add	r3, pc, #192	; (adr r3, 80087d8 <__ieee754_asin+0x2f0>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 fd27 	bl	800016c <__adddf3>
 800871e:	4632      	mov	r2, r6
 8008720:	463b      	mov	r3, r7
 8008722:	f7f7 fed9 	bl	80004d8 <__aeabi_dmul>
 8008726:	a32e      	add	r3, pc, #184	; (adr r3, 80087e0 <__ieee754_asin+0x2f8>)
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	4680      	mov	r8, r0
 800872e:	4689      	mov	r9, r1
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f7 fed0 	bl	80004d8 <__aeabi_dmul>
 8008738:	a32b      	add	r3, pc, #172	; (adr r3, 80087e8 <__ieee754_asin+0x300>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 fd13 	bl	8000168 <__aeabi_dsub>
 8008742:	4632      	mov	r2, r6
 8008744:	463b      	mov	r3, r7
 8008746:	f7f7 fec7 	bl	80004d8 <__aeabi_dmul>
 800874a:	a329      	add	r3, pc, #164	; (adr r3, 80087f0 <__ieee754_asin+0x308>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f7f7 fd0c 	bl	800016c <__adddf3>
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	f7f7 febe 	bl	80004d8 <__aeabi_dmul>
 800875c:	a326      	add	r3, pc, #152	; (adr r3, 80087f8 <__ieee754_asin+0x310>)
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 fd01 	bl	8000168 <__aeabi_dsub>
 8008766:	4632      	mov	r2, r6
 8008768:	463b      	mov	r3, r7
 800876a:	f7f7 feb5 	bl	80004d8 <__aeabi_dmul>
 800876e:	2200      	movs	r2, #0
 8008770:	4b25      	ldr	r3, [pc, #148]	; (8008808 <__ieee754_asin+0x320>)
 8008772:	f7f7 fcfb 	bl	800016c <__adddf3>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	f7f7 ffd5 	bl	800072c <__aeabi_ddiv>
 8008782:	4622      	mov	r2, r4
 8008784:	462b      	mov	r3, r5
 8008786:	f7f7 fea7 	bl	80004d8 <__aeabi_dmul>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4620      	mov	r0, r4
 8008790:	4629      	mov	r1, r5
 8008792:	e6ce      	b.n	8008532 <__ieee754_asin+0x4a>
 8008794:	f3af 8000 	nop.w
 8008798:	54442d18 	.word	0x54442d18
 800879c:	3ff921fb 	.word	0x3ff921fb
 80087a0:	33145c07 	.word	0x33145c07
 80087a4:	3c91a626 	.word	0x3c91a626
 80087a8:	8800759c 	.word	0x8800759c
 80087ac:	7e37e43c 	.word	0x7e37e43c
 80087b0:	0dfdf709 	.word	0x0dfdf709
 80087b4:	3f023de1 	.word	0x3f023de1
 80087b8:	7501b288 	.word	0x7501b288
 80087bc:	3f49efe0 	.word	0x3f49efe0
 80087c0:	b5688f3b 	.word	0xb5688f3b
 80087c4:	3fa48228 	.word	0x3fa48228
 80087c8:	0e884455 	.word	0x0e884455
 80087cc:	3fc9c155 	.word	0x3fc9c155
 80087d0:	03eb6f7d 	.word	0x03eb6f7d
 80087d4:	3fd4d612 	.word	0x3fd4d612
 80087d8:	55555555 	.word	0x55555555
 80087dc:	3fc55555 	.word	0x3fc55555
 80087e0:	b12e9282 	.word	0xb12e9282
 80087e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80087e8:	1b8d0159 	.word	0x1b8d0159
 80087ec:	3fe6066c 	.word	0x3fe6066c
 80087f0:	9c598ac8 	.word	0x9c598ac8
 80087f4:	40002ae5 	.word	0x40002ae5
 80087f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80087fc:	40033a27 	.word	0x40033a27
 8008800:	3fefffff 	.word	0x3fefffff
 8008804:	3fdfffff 	.word	0x3fdfffff
 8008808:	3ff00000 	.word	0x3ff00000
 800880c:	3fe00000 	.word	0x3fe00000
 8008810:	3fef3332 	.word	0x3fef3332
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	f7f7 fca8 	bl	800016c <__adddf3>
 800881c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008820:	4606      	mov	r6, r0
 8008822:	460f      	mov	r7, r1
 8008824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008828:	f7f7 ff80 	bl	800072c <__aeabi_ddiv>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f7 fe50 	bl	80004d8 <__aeabi_dmul>
 8008838:	f04f 0800 	mov.w	r8, #0
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	4642      	mov	r2, r8
 8008842:	465b      	mov	r3, fp
 8008844:	4640      	mov	r0, r8
 8008846:	4659      	mov	r1, fp
 8008848:	f7f7 fe46 	bl	80004d8 <__aeabi_dmul>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4620      	mov	r0, r4
 8008852:	4629      	mov	r1, r5
 8008854:	f7f7 fc88 	bl	8000168 <__aeabi_dsub>
 8008858:	4642      	mov	r2, r8
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	465b      	mov	r3, fp
 8008860:	4650      	mov	r0, sl
 8008862:	4659      	mov	r1, fp
 8008864:	f7f7 fc82 	bl	800016c <__adddf3>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 ff5c 	bl	800072c <__aeabi_ddiv>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	f7f7 fc78 	bl	800016c <__adddf3>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	a113      	add	r1, pc, #76	; (adr r1, 80088d0 <__ieee754_asin+0x3e8>)
 8008882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008886:	f7f7 fc6f 	bl	8000168 <__aeabi_dsub>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4630      	mov	r0, r6
 8008890:	4639      	mov	r1, r7
 8008892:	f7f7 fc69 	bl	8000168 <__aeabi_dsub>
 8008896:	4642      	mov	r2, r8
 8008898:	4604      	mov	r4, r0
 800889a:	460d      	mov	r5, r1
 800889c:	465b      	mov	r3, fp
 800889e:	4640      	mov	r0, r8
 80088a0:	4659      	mov	r1, fp
 80088a2:	f7f7 fc63 	bl	800016c <__adddf3>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	a10b      	add	r1, pc, #44	; (adr r1, 80088d8 <__ieee754_asin+0x3f0>)
 80088ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b0:	f7f7 fc5a 	bl	8000168 <__aeabi_dsub>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fc54 	bl	8000168 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	a104      	add	r1, pc, #16	; (adr r1, 80088d8 <__ieee754_asin+0x3f0>)
 80088c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ca:	e6e7      	b.n	800869c <__ieee754_asin+0x1b4>
 80088cc:	f3af 8000 	nop.w
 80088d0:	33145c07 	.word	0x33145c07
 80088d4:	3c91a626 	.word	0x3c91a626
 80088d8:	54442d18 	.word	0x54442d18
 80088dc:	3fe921fb 	.word	0x3fe921fb

080088e0 <__ieee754_sqrt>:
 80088e0:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008a34 <__ieee754_sqrt+0x154>
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	ea3c 0c01 	bics.w	ip, ip, r1
 80088ec:	460b      	mov	r3, r1
 80088ee:	4606      	mov	r6, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	460a      	mov	r2, r1
 80088f4:	4607      	mov	r7, r0
 80088f6:	4604      	mov	r4, r0
 80088f8:	d10e      	bne.n	8008918 <__ieee754_sqrt+0x38>
 80088fa:	4602      	mov	r2, r0
 80088fc:	f7f7 fdec 	bl	80004d8 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4630      	mov	r0, r6
 8008906:	4629      	mov	r1, r5
 8008908:	f7f7 fc30 	bl	800016c <__adddf3>
 800890c:	4606      	mov	r6, r0
 800890e:	460d      	mov	r5, r1
 8008910:	4630      	mov	r0, r6
 8008912:	4629      	mov	r1, r5
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	2900      	cmp	r1, #0
 800891a:	dc0d      	bgt.n	8008938 <__ieee754_sqrt+0x58>
 800891c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008920:	ea5c 0707 	orrs.w	r7, ip, r7
 8008924:	d0f4      	beq.n	8008910 <__ieee754_sqrt+0x30>
 8008926:	b139      	cbz	r1, 8008938 <__ieee754_sqrt+0x58>
 8008928:	4602      	mov	r2, r0
 800892a:	f7f7 fc1d 	bl	8000168 <__aeabi_dsub>
 800892e:	4602      	mov	r2, r0
 8008930:	460b      	mov	r3, r1
 8008932:	f7f7 fefb 	bl	800072c <__aeabi_ddiv>
 8008936:	e7e9      	b.n	800890c <__ieee754_sqrt+0x2c>
 8008938:	1512      	asrs	r2, r2, #20
 800893a:	d074      	beq.n	8008a26 <__ieee754_sqrt+0x146>
 800893c:	2000      	movs	r0, #0
 800893e:	07d5      	lsls	r5, r2, #31
 8008940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008944:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008948:	bf5e      	ittt	pl
 800894a:	0fe3      	lsrpl	r3, r4, #31
 800894c:	0064      	lslpl	r4, r4, #1
 800894e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8008952:	0fe3      	lsrs	r3, r4, #31
 8008954:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008958:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800895c:	2516      	movs	r5, #22
 800895e:	4601      	mov	r1, r0
 8008960:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008964:	1076      	asrs	r6, r6, #1
 8008966:	0064      	lsls	r4, r4, #1
 8008968:	188f      	adds	r7, r1, r2
 800896a:	429f      	cmp	r7, r3
 800896c:	bfde      	ittt	le
 800896e:	1bdb      	suble	r3, r3, r7
 8008970:	18b9      	addle	r1, r7, r2
 8008972:	1880      	addle	r0, r0, r2
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	3d01      	subs	r5, #1
 8008978:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800897c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008980:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008984:	d1f0      	bne.n	8008968 <__ieee754_sqrt+0x88>
 8008986:	462a      	mov	r2, r5
 8008988:	f04f 0e20 	mov.w	lr, #32
 800898c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008990:	428b      	cmp	r3, r1
 8008992:	eb07 0c05 	add.w	ip, r7, r5
 8008996:	dc02      	bgt.n	800899e <__ieee754_sqrt+0xbe>
 8008998:	d113      	bne.n	80089c2 <__ieee754_sqrt+0xe2>
 800899a:	45a4      	cmp	ip, r4
 800899c:	d811      	bhi.n	80089c2 <__ieee754_sqrt+0xe2>
 800899e:	f1bc 0f00 	cmp.w	ip, #0
 80089a2:	eb0c 0507 	add.w	r5, ip, r7
 80089a6:	da43      	bge.n	8008a30 <__ieee754_sqrt+0x150>
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	db41      	blt.n	8008a30 <__ieee754_sqrt+0x150>
 80089ac:	f101 0801 	add.w	r8, r1, #1
 80089b0:	1a5b      	subs	r3, r3, r1
 80089b2:	4641      	mov	r1, r8
 80089b4:	45a4      	cmp	ip, r4
 80089b6:	bf88      	it	hi
 80089b8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80089bc:	eba4 040c 	sub.w	r4, r4, ip
 80089c0:	443a      	add	r2, r7
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	f1be 0e01 	subs.w	lr, lr, #1
 80089c8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80089cc:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80089d0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80089d4:	d1dc      	bne.n	8008990 <__ieee754_sqrt+0xb0>
 80089d6:	4323      	orrs	r3, r4
 80089d8:	d006      	beq.n	80089e8 <__ieee754_sqrt+0x108>
 80089da:	1c54      	adds	r4, r2, #1
 80089dc:	bf0b      	itete	eq
 80089de:	4672      	moveq	r2, lr
 80089e0:	3201      	addne	r2, #1
 80089e2:	3001      	addeq	r0, #1
 80089e4:	f022 0201 	bicne.w	r2, r2, #1
 80089e8:	1043      	asrs	r3, r0, #1
 80089ea:	07c1      	lsls	r1, r0, #31
 80089ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80089f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089f8:	bf48      	it	mi
 80089fa:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80089fe:	4610      	mov	r0, r2
 8008a00:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008a04:	e782      	b.n	800890c <__ieee754_sqrt+0x2c>
 8008a06:	0ae3      	lsrs	r3, r4, #11
 8008a08:	3915      	subs	r1, #21
 8008a0a:	0564      	lsls	r4, r4, #21
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0fa      	beq.n	8008a06 <__ieee754_sqrt+0x126>
 8008a10:	02de      	lsls	r6, r3, #11
 8008a12:	d50a      	bpl.n	8008a2a <__ieee754_sqrt+0x14a>
 8008a14:	f1c2 0020 	rsb	r0, r2, #32
 8008a18:	fa24 f000 	lsr.w	r0, r4, r0
 8008a1c:	1e55      	subs	r5, r2, #1
 8008a1e:	4094      	lsls	r4, r2
 8008a20:	4303      	orrs	r3, r0
 8008a22:	1b4a      	subs	r2, r1, r5
 8008a24:	e78a      	b.n	800893c <__ieee754_sqrt+0x5c>
 8008a26:	4611      	mov	r1, r2
 8008a28:	e7f0      	b.n	8008a0c <__ieee754_sqrt+0x12c>
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	3201      	adds	r2, #1
 8008a2e:	e7ef      	b.n	8008a10 <__ieee754_sqrt+0x130>
 8008a30:	4688      	mov	r8, r1
 8008a32:	e7bd      	b.n	80089b0 <__ieee754_sqrt+0xd0>
 8008a34:	7ff00000 	.word	0x7ff00000

08008a38 <fabs>:
 8008a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008a3c:	4770      	bx	lr
	...

08008a40 <nan>:
 8008a40:	2000      	movs	r0, #0
 8008a42:	4901      	ldr	r1, [pc, #4]	; (8008a48 <nan+0x8>)
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	7ff80000 	.word	0x7ff80000

08008a4c <_init>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	bf00      	nop
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr

08008a58 <_fini>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr
