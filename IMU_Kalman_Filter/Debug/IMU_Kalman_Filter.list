
IMU_Kalman_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009000  08009000  00019000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800941c  0800941c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800941c  0800941c  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800941c  0800941c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001f8  0800961c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800961c  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f484  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  0002f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  000325e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018deb  00000000  00000000  00033440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb1e  00000000  00000000  0004c22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e638  00000000  00000000  0005bd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  000ea3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fe4 	.word	0x08008fe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08008fe4 	.word	0x08008fe4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f001 f937 	bl	800229c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f869 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 fa63 	bl	80014fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001036:	f000 f8a9 	bl	800118c <MX_I2C1_Init>
  MX_TIM2_Init();
 800103a:	f000 f965 	bl	8001308 <MX_TIM2_Init>
  MX_TIM1_Init();
 800103e:	f000 f8d3 	bl	80011e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001042:	f000 f9ad 	bl	80013a0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001046:	f000 fa2f 	bl	80014a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 800104a:	f000 fac3 	bl	80015d4 <MPU6050_Baslat>
  //Gyro kalibrasyon hatalarını hesapla.
  gyro_e_x = GyroErr(GYRO_X_ADDR);
 800104e:	2043      	movs	r0, #67	; 0x43
 8001050:	f000 fb16 	bl	8001680 <GyroErr>
 8001054:	4603      	mov	r3, r0
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <main+0xb4>)
 8001058:	6013      	str	r3, [r2, #0]

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 800105a:	4820      	ldr	r0, [pc, #128]	; (80010dc <main+0xb8>)
 800105c:	f003 f8d2 	bl	8004204 <HAL_TIM_Base_Start_IT>

  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001060:	2100      	movs	r1, #0
 8001062:	481f      	ldr	r0, [pc, #124]	; (80010e0 <main+0xbc>)
 8001064:	f003 f970 	bl	8004348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001068:	2104      	movs	r1, #4
 800106a:	481d      	ldr	r0, [pc, #116]	; (80010e0 <main+0xbc>)
 800106c:	f003 f96c 	bl	8004348 <HAL_TIM_PWM_Start>

  //PWM Input Capture Kanalları
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001070:	2104      	movs	r1, #4
 8001072:	481c      	ldr	r0, [pc, #112]	; (80010e4 <main+0xc0>)
 8001074:	f003 fa62 	bl	800453c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001078:	2108      	movs	r1, #8
 800107a:	481a      	ldr	r0, [pc, #104]	; (80010e4 <main+0xc0>)
 800107c:	f003 fa5e 	bl	800453c <HAL_TIM_IC_Start_IT>

  MotorBaslat();
 8001080:	f000 fd4b 	bl	8001b1a <MotorBaslat>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sprintf(buf,"%.3f||%.3f \n\r",alpha,alpha_des);
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <main+0xc4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f9cd 	bl	8000428 <__aeabi_f2d>
 800108e:	4604      	mov	r4, r0
 8001090:	460d      	mov	r5, r1
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <main+0xc8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f9c6 	bl	8000428 <__aeabi_f2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9cd 2300 	strd	r2, r3, [sp]
 80010a4:	4622      	mov	r2, r4
 80010a6:	462b      	mov	r3, r5
 80010a8:	4911      	ldr	r1, [pc, #68]	; (80010f0 <main+0xcc>)
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <main+0xd0>)
 80010ac:	f005 fa56 	bl	800655c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 1000);
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <main+0xd0>)
 80010b2:	f7ff f84d 	bl	8000150 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <main+0xd0>)
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <main+0xd4>)
 80010c2:	f004 fc4f 	bl	8005964 <HAL_UART_Transmit>
	  PWMYaz(pwm1, pwm2);
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <main+0xd8>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <main+0xdc>)
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fc49 	bl	8001968 <PWMYaz>
	  sprintf(buf,"%.3f||%.3f \n\r",alpha,alpha_des);
 80010d6:	e7d5      	b.n	8001084 <main+0x60>
 80010d8:	200002f8 	.word	0x200002f8
 80010dc:	20000374 	.word	0x20000374
 80010e0:	20000300 	.word	0x20000300
 80010e4:	200002a0 	.word	0x200002a0
 80010e8:	20000428 	.word	0x20000428
 80010ec:	20000408 	.word	0x20000408
 80010f0:	08009000 	.word	0x08009000
 80010f4:	20000350 	.word	0x20000350
 80010f8:	200003bc 	.word	0x200003bc
 80010fc:	20000224 	.word	0x20000224
 8001100:	20000226 	.word	0x20000226

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fdba 	bl	8005c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001142:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fbef 	bl	8003930 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001158:	f000 fdec 	bl	8001d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2101      	movs	r1, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fe5b 	bl	8003e30 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001180:	f000 fdd8 	bl	8001d34 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3740      	adds	r7, #64	; 0x40
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f001 fbb1 	bl	8002930 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 fdae 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000234 	.word	0x20000234
 80011e0:	40005400 	.word	0x40005400
 80011e4:	00061a80 	.word	0x00061a80

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b092      	sub	sp, #72	; 0x48
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
 800120a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2220      	movs	r2, #32
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fd3a 	bl	8005c8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001218:	4b39      	ldr	r3, [pc, #228]	; (8001300 <MX_TIM1_Init+0x118>)
 800121a:	4a3a      	ldr	r2, [pc, #232]	; (8001304 <MX_TIM1_Init+0x11c>)
 800121c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <MX_TIM1_Init+0x118>)
 8001220:	221f      	movs	r2, #31
 8001222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <MX_TIM1_Init+0x118>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <MX_TIM1_Init+0x118>)
 800122c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <MX_TIM1_Init+0x118>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_TIM1_Init+0x118>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <MX_TIM1_Init+0x118>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001244:	482e      	ldr	r0, [pc, #184]	; (8001300 <MX_TIM1_Init+0x118>)
 8001246:	f003 f82f 	bl	80042a8 <HAL_TIM_PWM_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001250:	f000 fd70 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001260:	4619      	mov	r1, r3
 8001262:	4827      	ldr	r0, [pc, #156]	; (8001300 <MX_TIM1_Init+0x118>)
 8001264:	f004 fa70 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800126e:	f000 fd61 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001272:	2360      	movs	r3, #96	; 0x60
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_TIM1_Init+0x118>)
 8001298:	f003 fbf2 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80012a2:	f000 fd47 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	2204      	movs	r2, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_TIM1_Init+0x118>)
 80012b0:	f003 fbe6 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012ba:	f000 fd3b 	bl	8001d34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4619      	mov	r1, r3
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MX_TIM1_Init+0x118>)
 80012e2:	f004 fa8f 	bl	8005804 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80012ec:	f000 fd22 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <MX_TIM1_Init+0x118>)
 80012f2:	f000 fe2d 	bl	8001f50 <HAL_TIM_MspPostInit>

}
 80012f6:	bf00      	nop
 80012f8:	3748      	adds	r7, #72	; 0x48
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000300 	.word	0x20000300
 8001304:	40012c00 	.word	0x40012c00

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM2_Init+0x94>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM2_Init+0x94>)
 800132e:	221f      	movs	r2, #31
 8001330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM2_Init+0x94>)
 800133a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800133e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM2_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM2_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM2_Init+0x94>)
 800134e:	f002 ff09 	bl	8004164 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 fcec 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM2_Init+0x94>)
 800136a:	f003 fc47 	bl	8004bfc <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 fcde 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM2_Init+0x94>)
 8001386:	f004 f9df 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fcd0 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000374 	.word	0x20000374

080013a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013ce:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <MX_TIM3_Init+0x104>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013d4:	221f      	movs	r2, #31
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f2:	482b      	ldr	r0, [pc, #172]	; (80014a0 <MX_TIM3_Init+0x100>)
 80013f4:	f002 feb6 	bl	8004164 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80013fe:	f000 fc99 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001402:	4827      	ldr	r0, [pc, #156]	; (80014a0 <MX_TIM3_Init+0x100>)
 8001404:	f003 f842 	bl	800448c <HAL_TIM_IC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800140e:	f000 fc91 	bl	8001d34 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001412:	2304      	movs	r3, #4
 8001414:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481d      	ldr	r0, [pc, #116]	; (80014a0 <MX_TIM3_Init+0x100>)
 800142a:	f003 fcab 	bl	8004d84 <HAL_TIM_SlaveConfigSynchro>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001434:	f000 fc7e 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4816      	ldr	r0, [pc, #88]	; (80014a0 <MX_TIM3_Init+0x100>)
 8001448:	f004 f97e 	bl	8005748 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001452:	f000 fc6f 	bl	8001d34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800145a:	2301      	movs	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2204      	movs	r2, #4
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM3_Init+0x100>)
 800146e:	f003 fa73 	bl	8004958 <HAL_TIM_IC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001478:	f000 fc5c 	bl	8001d34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800147c:	2302      	movs	r3, #2
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2208      	movs	r2, #8
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_TIM3_Init+0x100>)
 8001488:	f003 fa66 	bl	8004958 <HAL_TIM_IC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001492:	f000 fc4f 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3730      	adds	r7, #48	; 0x30
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200002a0 	.word	0x200002a0
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_USART2_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f004 f9f3 	bl	80058ca <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 fc23 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200003bc 	.word	0x200003bc
 80014f8:	40004400 	.word	0x40004400

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <MX_GPIO_Init+0xcc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a2c      	ldr	r2, [pc, #176]	; (80015c8 <MX_GPIO_Init+0xcc>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <MX_GPIO_Init+0xcc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <MX_GPIO_Init+0xcc>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <MX_GPIO_Init+0xcc>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_GPIO_Init+0xcc>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_GPIO_Init+0xcc>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <MX_GPIO_Init+0xcc>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_GPIO_Init+0xcc>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_GPIO_Init+0xcc>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <MX_GPIO_Init+0xcc>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_GPIO_Init+0xcc>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001576:	4815      	ldr	r0, [pc, #84]	; (80015cc <MX_GPIO_Init+0xd0>)
 8001578:	f001 f9a8 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2102      	movs	r1, #2
 8001580:	4813      	ldr	r0, [pc, #76]	; (80015d0 <MX_GPIO_Init+0xd4>)
 8001582:	f001 f9a3 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <MX_GPIO_Init+0xd0>)
 80015a0:	f001 f810 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_GPIO_Init+0xd4>)
 80015bc:	f001 f802 	bl	80025c4 <HAL_GPIO_Init>

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40010c00 	.word	0x40010c00

080015d4 <MPU6050_Baslat>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 80015de:	2305      	movs	r3, #5
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	226b      	movs	r2, #107	; 0x6b
 80015ee:	21d0      	movs	r1, #208	; 0xd0
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <MPU6050_Baslat+0x64>)
 80015f2:	f001 fae1 	bl	8002bb8 <HAL_I2C_Mem_Write>
	config = 0x08;
 80015f6:	2308      	movs	r3, #8
 80015f8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 500 d/s'ye ayarlandi.
 80015fa:	2305      	movs	r3, #5
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2301      	movs	r3, #1
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	221b      	movs	r2, #27
 800160a:	21d0      	movs	r1, #208	; 0xd0
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <MPU6050_Baslat+0x64>)
 800160e:	f001 fad3 	bl	8002bb8 <HAL_I2C_Mem_Write>
	config = 0x10;
 8001612:	2310      	movs	r3, #16
 8001614:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 8001616:	2305      	movs	r3, #5
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	2301      	movs	r3, #1
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	221c      	movs	r2, #28
 8001626:	21d0      	movs	r1, #208	; 0xd0
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MPU6050_Baslat+0x64>)
 800162a:	f001 fac5 	bl	8002bb8 <HAL_I2C_Mem_Write>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000234 	.word	0x20000234

0800163c <GyroOku>:

int16_t GyroOku (uint8_t addr) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af04      	add	r7, sp, #16
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	b29a      	uxth	r2, r3
 800164a:	2301      	movs	r3, #1
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2302      	movs	r3, #2
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	21d1      	movs	r1, #209	; 0xd1
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <GyroOku+0x40>)
 800165e:	f001 fba5 	bl	8002dac <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 8001662:	7b3b      	ldrb	r3, [r7, #12]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000234 	.word	0x20000234

08001680 <GyroErr>:

float GyroErr(uint8_t addr) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	float GyroXe=0;
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
	//2000 ornek al ve kayma degerini kaydet.
	for (int i=0; i<2000; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e011      	b.n	80016ba <GyroErr+0x3a>
	{
		GyroXe += (float)GyroOku(addr);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ffcf 	bl	800163c <GyroOku>
 800169e:	4603      	mov	r3, r0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fafb 	bl	8000c9c <__aeabi_i2f>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4619      	mov	r1, r3
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fa42 	bl	8000b34 <__addsf3>
 80016b0:	4603      	mov	r3, r0
 80016b2:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016c0:	dbe9      	blt.n	8001696 <GyroErr+0x16>

		} //Haberleşmeyi durdur.
	GyroXe=GyroXe/2000; //Son okunan değeri 2000'e böl.
 80016c2:	4905      	ldr	r1, [pc, #20]	; (80016d8 <GyroErr+0x58>)
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff fbf1 	bl	8000eac <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	60fb      	str	r3, [r7, #12]
	return GyroXe;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	44fa0000 	.word	0x44fa0000

080016dc <Kalman_Filtresi>:

void Kalman_Filtresi(void) {
 80016dc:	b598      	push	{r3, r4, r7, lr}
 80016de:	af00      	add	r7, sp, #0

	//**Tahmin**
	alpha = alpha - bias*st + gyroX*st;
 80016e0:	4b8f      	ldr	r3, [pc, #572]	; (8001920 <Kalman_Filtresi+0x244>)
 80016e2:	681c      	ldr	r4, [r3, #0]
 80016e4:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <Kalman_Filtresi+0x248>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a8f      	ldr	r2, [pc, #572]	; (8001928 <Kalman_Filtresi+0x24c>)
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fb29 	bl	8000d44 <__aeabi_fmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff fa1a 	bl	8000b30 <__aeabi_fsub>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461c      	mov	r4, r3
 8001700:	4b8a      	ldr	r3, [pc, #552]	; (800192c <Kalman_Filtresi+0x250>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a88      	ldr	r2, [pc, #544]	; (8001928 <Kalman_Filtresi+0x24c>)
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fb1b 	bl	8000d44 <__aeabi_fmul>
 800170e:	4603      	mov	r3, r0
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff fa0e 	bl	8000b34 <__addsf3>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4b80      	ldr	r3, [pc, #512]	; (8001920 <Kalman_Filtresi+0x244>)
 800171e:	601a      	str	r2, [r3, #0]
	S11_m = 2*sa+st*st*sb; S12_m=-st*sb;
 8001720:	4b83      	ldr	r3, [pc, #524]	; (8001930 <Kalman_Filtresi+0x254>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa04 	bl	8000b34 <__addsf3>
 800172c:	4603      	mov	r3, r0
 800172e:	461c      	mov	r4, r3
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <Kalman_Filtresi+0x24c>)
 8001732:	4a7d      	ldr	r2, [pc, #500]	; (8001928 <Kalman_Filtresi+0x24c>)
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb04 	bl	8000d44 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <Kalman_Filtresi+0x258>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4610      	mov	r0, r2
 8001748:	f7ff fafc 	bl	8000d44 <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff f9ef 	bl	8000b34 <__addsf3>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	4b77      	ldr	r3, [pc, #476]	; (8001938 <Kalman_Filtresi+0x25c>)
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	4b72      	ldr	r3, [pc, #456]	; (8001928 <Kalman_Filtresi+0x24c>)
 8001760:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001764:	4a73      	ldr	r2, [pc, #460]	; (8001934 <Kalman_Filtresi+0x258>)
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff faea 	bl	8000d44 <__aeabi_fmul>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b71      	ldr	r3, [pc, #452]	; (800193c <Kalman_Filtresi+0x260>)
 8001776:	601a      	str	r2, [r3, #0]
	S21_m = -st*sb; 	   S22_m=2*sb;
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <Kalman_Filtresi+0x24c>)
 800177a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800177e:	4a6d      	ldr	r2, [pc, #436]	; (8001934 <Kalman_Filtresi+0x258>)
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fadd 	bl	8000d44 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <Kalman_Filtresi+0x264>)
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	4b68      	ldr	r3, [pc, #416]	; (8001934 <Kalman_Filtresi+0x258>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f9cb 	bl	8000b34 <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b68      	ldr	r3, [pc, #416]	; (8001944 <Kalman_Filtresi+0x268>)
 80017a4:	601a      	str	r2, [r3, #0]

	//**Düzeltme**
	Kt11 = S11_m / (S11_m+Q);
 80017a6:	4b64      	ldr	r3, [pc, #400]	; (8001938 <Kalman_Filtresi+0x25c>)
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <Kalman_Filtresi+0x25c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a66      	ldr	r2, [pc, #408]	; (8001948 <Kalman_Filtresi+0x26c>)
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f9bd 	bl	8000b34 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff fb74 	bl	8000eac <__aeabi_fdiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b60      	ldr	r3, [pc, #384]	; (800194c <Kalman_Filtresi+0x270>)
 80017ca:	601a      	str	r2, [r3, #0]
	Kt21 = S21_m / (S21_m+Q);
 80017cc:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <Kalman_Filtresi+0x264>)
 80017ce:	681c      	ldr	r4, [r3, #0]
 80017d0:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <Kalman_Filtresi+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a5c      	ldr	r2, [pc, #368]	; (8001948 <Kalman_Filtresi+0x26c>)
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9aa 	bl	8000b34 <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff fb61 	bl	8000eac <__aeabi_fdiv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <Kalman_Filtresi+0x274>)
 80017f0:	601a      	str	r2, [r3, #0]

	alpha = alpha - Kt11*(alpha-pitch_acc);
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <Kalman_Filtresi+0x244>)
 80017f4:	681c      	ldr	r4, [r3, #0]
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <Kalman_Filtresi+0x244>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a56      	ldr	r2, [pc, #344]	; (8001954 <Kalman_Filtresi+0x278>)
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff f995 	bl	8000b30 <__aeabi_fsub>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <Kalman_Filtresi+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff fa97 	bl	8000d44 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff f988 	bl	8000b30 <__aeabi_fsub>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <Kalman_Filtresi+0x244>)
 8001826:	601a      	str	r2, [r3, #0]
	bias = bias - Kt21*(alpha-pitch_acc);
 8001828:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <Kalman_Filtresi+0x248>)
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <Kalman_Filtresi+0x244>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a48      	ldr	r2, [pc, #288]	; (8001954 <Kalman_Filtresi+0x278>)
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f97a 	bl	8000b30 <__aeabi_fsub>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <Kalman_Filtresi+0x274>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f7ff fa7c 	bl	8000d44 <__aeabi_fmul>
 800184c:	4603      	mov	r3, r0
 800184e:	4619      	mov	r1, r3
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff f96d 	bl	8000b30 <__aeabi_fsub>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <Kalman_Filtresi+0x248>)
 800185c:	601a      	str	r2, [r3, #0]

	S11_p = -S11_m*(Kt11-1);  S12_p = -S12_m*(Kt11-1);
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <Kalman_Filtresi+0x25c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <Kalman_Filtresi+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f95e 	bl	8000b30 <__aeabi_fsub>
 8001874:	4603      	mov	r3, r0
 8001876:	4619      	mov	r1, r3
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fa63 	bl	8000d44 <__aeabi_fmul>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <Kalman_Filtresi+0x27c>)
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <Kalman_Filtresi+0x260>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <Kalman_Filtresi+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f94a 	bl	8000b30 <__aeabi_fsub>
 800189c:	4603      	mov	r3, r0
 800189e:	4619      	mov	r1, r3
 80018a0:	4620      	mov	r0, r4
 80018a2:	f7ff fa4f 	bl	8000d44 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <Kalman_Filtresi+0x280>)
 80018ac:	601a      	str	r2, [r3, #0]
	S21_p = S21_m-S11_m*Kt21; S22_p = S22_m-S12_m*Kt21;
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <Kalman_Filtresi+0x264>)
 80018b0:	681c      	ldr	r4, [r3, #0]
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <Kalman_Filtresi+0x25c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a26      	ldr	r2, [pc, #152]	; (8001950 <Kalman_Filtresi+0x274>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fa41 	bl	8000d44 <__aeabi_fmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff f932 	bl	8000b30 <__aeabi_fsub>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <Kalman_Filtresi+0x284>)
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <Kalman_Filtresi+0x268>)
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <Kalman_Filtresi+0x260>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <Kalman_Filtresi+0x274>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	4611      	mov	r1, r2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fa2e 	bl	8000d44 <__aeabi_fmul>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4619      	mov	r1, r3
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff f91f 	bl	8000b30 <__aeabi_fsub>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <Kalman_Filtresi+0x288>)
 80018f8:	601a      	str	r2, [r3, #0]

	S11_m = S11_p; S12_m = S12_p; S21_m = S21_p; S22_m = S22_p;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <Kalman_Filtresi+0x27c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <Kalman_Filtresi+0x25c>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <Kalman_Filtresi+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <Kalman_Filtresi+0x260>)
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <Kalman_Filtresi+0x284>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <Kalman_Filtresi+0x264>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <Kalman_Filtresi+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <Kalman_Filtresi+0x268>)
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	bd98      	pop	{r3, r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	20000428 	.word	0x20000428
 8001924:	2000022c 	.word	0x2000022c
 8001928:	3a83126f 	.word	0x3a83126f
 800192c:	2000028c 	.word	0x2000028c
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004
 8001938:	20000420 	.word	0x20000420
 800193c:	200002e8 	.word	0x200002e8
 8001940:	200002f4 	.word	0x200002f4
 8001944:	2000042c 	.word	0x2000042c
 8001948:	20000008 	.word	0x20000008
 800194c:	200003fc 	.word	0x200003fc
 8001950:	20000230 	.word	0x20000230
 8001954:	20000414 	.word	0x20000414
 8001958:	2000041c 	.word	0x2000041c
 800195c:	20000294 	.word	0x20000294
 8001960:	20000290 	.word	0x20000290
 8001964:	2000029c 	.word	0x2000029c

08001968 <PWMYaz>:

void PWMYaz(uint16_t pwm1, uint16_t pwm2) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	80bb      	strh	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm1);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <PWMYaz+0x2c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	88fa      	ldrh	r2, [r7, #6]
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pwm2);
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <PWMYaz+0x2c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	88ba      	ldrh	r2, [r7, #4]
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000300 	.word	0x20000300

08001998 <PD>:

void PD(float alpha_des, float alpha) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	float P, D, pd,de;
	e_eski = e;
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <PD+0xd0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <PD+0xd4>)
 80019a8:	6013      	str	r3, [r2, #0]
	e = alpha_des - alpha;
 80019aa:	6839      	ldr	r1, [r7, #0]
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff f8bf 	bl	8000b30 <__aeabi_fsub>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <PD+0xd0>)
 80019b8:	601a      	str	r2, [r3, #0]
	de = e - e_eski;
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <PD+0xd0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <PD+0xd4>)
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f8b3 	bl	8000b30 <__aeabi_fsub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	617b      	str	r3, [r7, #20]
	P = Kp*e; D = Kd*de;
 80019ce:	4b28      	ldr	r3, [pc, #160]	; (8001a70 <PD+0xd8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <PD+0xd0>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff f9b3 	bl	8000d44 <__aeabi_fmul>
 80019de:	4603      	mov	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <PD+0xdc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4619      	mov	r1, r3
 80019e8:	6978      	ldr	r0, [r7, #20]
 80019ea:	f7ff f9ab 	bl	8000d44 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	60fb      	str	r3, [r7, #12]
	pd = P + D;
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	6938      	ldr	r0, [r7, #16]
 80019f6:	f7ff f89d 	bl	8000b34 <__addsf3>
 80019fa:	4603      	mov	r3, r0
 80019fc:	60bb      	str	r3, [r7, #8]
	pwm1 = Sat((uint16_t)(pwm_mid + pd)+150);
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <PD+0xe0>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f94a 	bl	8000c9c <__aeabi_i2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f891 	bl	8000b34 <__addsf3>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fae5 	bl	8000fe4 <__aeabi_f2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3396      	adds	r3, #150	; 0x96
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f82e 	bl	8001a84 <Sat>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <PD+0xe4>)
 8001a2e:	801a      	strh	r2, [r3, #0]
	pwm2 = Sat((uint16_t)(pwm_mid - pd));
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <PD+0xe0>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f931 	bl	8000c9c <__aeabi_i2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f876 	bl	8000b30 <__aeabi_fsub>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff facc 	bl	8000fe4 <__aeabi_f2uiz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f817 	bl	8001a84 <Sat>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <PD+0xe8>)
 8001a5c:	801a      	strh	r2, [r3, #0]

}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000040c 	.word	0x2000040c
 8001a6c:	20000400 	.word	0x20000400
 8001a70:	2000000c 	.word	0x2000000c
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000014 	.word	0x20000014
 8001a7c:	20000224 	.word	0x20000224
 8001a80:	20000226 	.word	0x20000226

08001a84 <Sat>:

uint16_t Sat(uint16_t pwm) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	uint16_t pwm_out;
	if(pwm > PWM_UPPER) {
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001a94:	d903      	bls.n	8001a9e <Sat+0x1a>
		pwm_out = PWM_UPPER;
 8001a96:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001a9a:	81fb      	strh	r3, [r7, #14]
 8001a9c:	e00a      	b.n	8001ab4 <Sat+0x30>
	}

	else if (pwm < PWM_LOWER) {
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f240 4219 	movw	r2, #1049	; 0x419
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d803      	bhi.n	8001ab0 <Sat+0x2c>
		pwm_out = PWM_LOWER;
 8001aa8:	f240 431a 	movw	r3, #1050	; 0x41a
 8001aac:	81fb      	strh	r3, [r7, #14]
 8001aae:	e001      	b.n	8001ab4 <Sat+0x30>
	}

	else {
		pwm_out = pwm;
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	81fb      	strh	r3, [r7, #14]
	}

	return pwm_out;
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <pwm2ang>:

float pwm2ang(uint16_t pwm) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
	int16_t in_min  = 1000;
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	81fb      	strh	r3, [r7, #14]
	int16_t in_max  = 2000;
 8001ad0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ad4:	81bb      	strh	r3, [r7, #12]
	int16_t out_min = -30;
 8001ad6:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 8001ada:	817b      	strh	r3, [r7, #10]
	int16_t out_max  = 30;
 8001adc:	231e      	movs	r3, #30
 8001ade:	813b      	strh	r3, [r7, #8]

	return (pwm - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001aec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af0:	1a8a      	subs	r2, r1, r2
 8001af2:	fb02 f203 	mul.w	r2, r2, r3
 8001af6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afe:	1acb      	subs	r3, r1, r3
 8001b00:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f8c6 	bl	8000c9c <__aeabi_i2f>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <MotorBaslat>:

void MotorBaslat(void) {
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
	PWMYaz(1000,1000);
 8001b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b26:	f7ff ff1f 	bl	8001968 <PWMYaz>
	HAL_Delay(1000);
 8001b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2e:	f000 fc17 	bl	8002360 <HAL_Delay>
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a57      	ldr	r2, [pc, #348]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	f040 809f 	bne.w	8001c88 <HAL_TIM_PeriodElapsedCallback+0x150>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5;
 8001b4a:	2043      	movs	r0, #67	; 0x43
 8001b4c:	f7ff fd76 	bl	800163c <GyroOku>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fc56 	bl	8000404 <__aeabi_i2d>
 8001b58:	a34d      	add	r3, pc, #308	; (adr r3, 8001c90 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fde5 	bl	800072c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7fe ff8d 	bl	8000a88 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a4c      	ldr	r2, [pc, #304]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b72:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 8001b74:	203b      	movs	r0, #59	; 0x3b
 8001b76:	f7ff fd61 	bl	800163c <GyroOku>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f88d 	bl	8000c9c <__aeabi_i2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b86:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001b88:	203d      	movs	r0, #61	; 0x3d
 8001b8a:	f7ff fd57 	bl	800163c <GyroOku>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f883 	bl	8000c9c <__aeabi_i2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a44      	ldr	r2, [pc, #272]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b9a:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001b9c:	203f      	movs	r0, #63	; 0x3f
 8001b9e:	f7ff fd4d 	bl	800163c <GyroOku>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f879 	bl	8000c9c <__aeabi_i2f>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a40      	ldr	r2, [pc, #256]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001bae:	6013      	str	r3, [r2, #0]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3c      	ldr	r2, [pc, #240]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f8c2 	bl	8000d44 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4b39      	ldr	r3, [pc, #228]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a38      	ldr	r2, [pc, #224]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8b8 	bl	8000d44 <__aeabi_fmul>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7fe ffab 	bl	8000b34 <__addsf3>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461c      	mov	r4, r3
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a32      	ldr	r2, [pc, #200]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f8a9 	bl	8000d44 <__aeabi_fmul>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7fe ff9c 	bl	8000b34 <__addsf3>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc12 	bl	8000428 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f006 ff0c 	bl	8008a28 <sqrt>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ff36 	bl	8000a88 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f940 	bl	8000eac <__aeabi_fdiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fbfa 	bl	8000428 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f006 fec6 	bl	80089cc <asin>
 8001c40:	a315      	add	r3, pc, #84	; (adr r3, 8001c98 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fc47 	bl	80004d8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ff19 	bl	8000a88 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c5a:	6013      	str	r3, [r2, #0]

		  Kalman_Filtresi();
 8001c5c:	f7ff fd3e 	bl	80016dc <Kalman_Filtresi>
		  alpha_des = pwm2ang(pwm_input);
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff2b 	bl	8001ac0 <pwm2ang>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c6e:	6013      	str	r3, [r2, #0]
		 // alpha_des = 0;
		  PD(alpha_des,alpha);
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe8c 	bl	8001998 <PD>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001c80:	2102      	movs	r1, #2
 8001c82:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001c84:	f000 fe3a 	bl	80028fc <HAL_GPIO_TogglePin>

	}
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40506000 	.word	0x40506000
 8001c98:	d4fdf3b6 	.word	0xd4fdf3b6
 8001c9c:	404ca978 	.word	0x404ca978
 8001ca0:	20000374 	.word	0x20000374
 8001ca4:	2000028c 	.word	0x2000028c
 8001ca8:	20000424 	.word	0x20000424
 8001cac:	20000410 	.word	0x20000410
 8001cb0:	20000298 	.word	0x20000298
 8001cb4:	20000414 	.word	0x20000414
 8001cb8:	20000418 	.word	0x20000418
 8001cbc:	20000408 	.word	0x20000408
 8001cc0:	20000428 	.word	0x20000428
 8001cc4:	40010c00 	.word	0x40010c00

08001cc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d120      	bne.n	8001d1a <HAL_TIM_IC_CaptureCallback+0x52>

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { //Yükselen kanal
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7f1b      	ldrb	r3, [r3, #28]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d11c      	bne.n	8001d1a <HAL_TIM_IC_CaptureCallback+0x52>
		IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f003 f890 	bl	8004e08 <HAL_TIM_ReadCapturedValue>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cee:	801a      	strh	r2, [r3, #0]

		if(IC_val1 != 0) { //alçalan kanal
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <HAL_TIM_IC_CaptureCallback+0x52>
			IC_val2  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f003 f884 	bl	8004e08 <HAL_TIM_ReadCapturedValue>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d06:	801a      	strh	r2, [r3, #0]
			pwm_input = Sat(IC_val2);
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff feb9 	bl	8001a84 <Sat>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001d18:	801a      	strh	r2, [r3, #0]
		}
	}

}

}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200002a0 	.word	0x200002a0
 8001d28:	200002fc 	.word	0x200002fc
 8001d2c:	2000034c 	.word	0x2000034c
 8001d30:	20000418 	.word	0x20000418

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>
	...

08001d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_MspInit+0x5c>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <HAL_MspInit+0x5c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6193      	str	r3, [r2, #24]
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_MspInit+0x5c>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_MspInit+0x5c>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_MspInit+0x5c>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_MspInit+0x5c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_MspInit+0x60>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_MspInit+0x60>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000

08001da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_I2C_MspInit+0x70>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d123      	bne.n	8001e0c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ddc:	23c0      	movs	r3, #192	; 0xc0
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001df0:	f000 fbe8 	bl	80025c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfe:	61d3      	str	r3, [r2, #28]
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010c00 	.word	0x40010c00

08001e20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_TIM_PWM_MspInit+0x34>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d10b      	bne.n	8001e4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_TIM_PWM_MspInit+0x38>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_TIM_PWM_MspInit+0x38>)
 8001e38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e3c:	6193      	str	r3, [r2, #24]
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_TIM_PWM_MspInit+0x38>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000

08001e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0318 	add.w	r3, r7, #24
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d114      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a2f      	ldr	r2, [pc, #188]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	61d3      	str	r3, [r2, #28]
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	201c      	movs	r0, #28
 8001e9a:	f000 fb5c 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e9e:	201c      	movs	r0, #28
 8001ea0:	f000 fb75 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ea4:	e048      	b.n	8001f38 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM3)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_TIM_Base_MspInit+0xe8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d143      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	61d3      	str	r3, [r2, #28]
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_TIM_Base_MspInit+0xe4>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480f      	ldr	r0, [pc, #60]	; (8001f48 <HAL_TIM_Base_MspInit+0xec>)
 8001f0c:	f000 fb5a 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	480a      	ldr	r0, [pc, #40]	; (8001f4c <HAL_TIM_Base_MspInit+0xf0>)
 8001f24:	f000 fb4e 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	201d      	movs	r0, #29
 8001f2e:	f000 fb12 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f32:	201d      	movs	r0, #29
 8001f34:	f000 fb2b 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40010c00 	.word	0x40010c00

08001f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_TIM_MspPostInit+0x5c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d118      	bne.n	8001fa2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_TIM_MspPostInit+0x60>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_TIM_MspPostInit+0x60>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_TIM_MspPostInit+0x60>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <HAL_TIM_MspPostInit+0x64>)
 8001f9e:	f000 fb11 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_UART_MspInit+0x88>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d12f      	bne.n	8002038 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_UART_MspInit+0x8c>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_UART_MspInit+0x8c>)
 8001fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe2:	61d3      	str	r3, [r2, #28]
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_UART_MspInit+0x8c>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_UART_MspInit+0x8c>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_UART_MspInit+0x8c>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_UART_MspInit+0x8c>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002008:	2304      	movs	r3, #4
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	480b      	ldr	r0, [pc, #44]	; (8002048 <HAL_UART_MspInit+0x90>)
 800201c:	f000 fad2 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002020:	2308      	movs	r3, #8
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_UART_MspInit+0x90>)
 8002034:	f000 fac6 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40004400 	.word	0x40004400
 8002044:	40021000 	.word	0x40021000
 8002048:	40010800 	.word	0x40010800

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <MemManage_Handler+0x4>

0800205e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler+0x4>

0800206a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002092:	f000 f949 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM2_IRQHandler+0x10>)
 80020a2:	f002 fb51 	bl	8004748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000374 	.word	0x20000374

080020b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM3_IRQHandler+0x10>)
 80020b6:	f002 fb47 	bl	8004748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200002a0 	.word	0x200002a0

080020c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <_kill>:

int _kill(int pid, int sig)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020dc:	f003 fdac 	bl	8005c38 <__errno>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2216      	movs	r2, #22
 80020e4:	601a      	str	r2, [r3, #0]
	return -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_exit>:

void _exit (int status)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020fa:	f04f 31ff 	mov.w	r1, #4294967295
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffe7 	bl	80020d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002104:	e7fe      	b.n	8002104 <_exit+0x12>

08002106 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e00a      	b.n	800212e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002118:	f3af 8000 	nop.w
 800211c:	4601      	mov	r1, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60ba      	str	r2, [r7, #8]
 8002124:	b2ca      	uxtb	r2, r1
 8002126:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbf0      	blt.n	8002118 <_read+0x12>
	}

return len;
 8002136:	687b      	ldr	r3, [r7, #4]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e009      	b.n	8002166 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	60ba      	str	r2, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbf1      	blt.n	8002152 <_write+0x12>
	}
	return len;
 800216e:	687b      	ldr	r3, [r7, #4]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_close>:

int _close(int file)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	605a      	str	r2, [r3, #4]
	return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <_isatty>:

int _isatty(int file)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f003 fd16 	bl	8005c38 <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	; (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20005000 	.word	0x20005000
 8002238:	00000400 	.word	0x00000400
 800223c:	20000214 	.word	0x20000214
 8002240:	20000448 	.word	0x20000448

08002244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002250:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002252:	e003      	b.n	800225c <LoopCopyDataInit>

08002254 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002256:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002258:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800225a:	3104      	adds	r1, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002260:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002262:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002264:	d3f6      	bcc.n	8002254 <CopyDataInit>
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002268:	e002      	b.n	8002270 <LoopFillZerobss>

0800226a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800226c:	f842 3b04 	str.w	r3, [r2], #4

08002270 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002272:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002274:	d3f9      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002276:	f7ff ffe5 	bl	8002244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f003 fce3 	bl	8005c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227e:	f7fe fed1 	bl	8001024 <main>
  bx lr
 8002282:	4770      	bx	lr
  ldr r3, =_sidata
 8002284:	08009424 	.word	0x08009424
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800228c:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 8002290:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002294:	20000444 	.word	0x20000444

08002298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_2_IRQHandler>
	...

0800229c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_Init+0x28>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_Init+0x28>)
 80022a6:	f043 0310 	orr.w	r3, r3, #16
 80022aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f947 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f000 f808 	bl	80022c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b8:	f7ff fd42 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x54>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x58>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f95f 	bl	80025aa <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f927 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <HAL_InitTick+0x5c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000018 	.word	0x20000018
 8002320:	20000020 	.word	0x20000020
 8002324:	2000001c 	.word	0x2000001c

08002328 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_IncTick+0x1c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x20>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a03      	ldr	r2, [pc, #12]	; (8002348 <HAL_IncTick+0x20>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	20000020 	.word	0x20000020
 8002348:	20000430 	.word	0x20000430

0800234c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <HAL_GetTick+0x10>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000430 	.word	0x20000430

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff fff0 	bl	800234c <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffe0 	bl	800234c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000020 	.word	0x20000020

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4906      	ldr	r1, [pc, #24]	; (8002440 <__NVIC_EnableIRQ+0x34>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff90 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff2d 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff42 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff90 	bl	8002498 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5f 	bl	8002444 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff35 	bl	800240c <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b08b      	sub	sp, #44	; 0x2c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d6:	e169      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d8:	2201      	movs	r2, #1
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8158 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a9a      	ldr	r2, [pc, #616]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d05e      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002600:	4a98      	ldr	r2, [pc, #608]	; (8002864 <HAL_GPIO_Init+0x2a0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d875      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002606:	4a98      	ldr	r2, [pc, #608]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d058      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 800260c:	4a96      	ldr	r2, [pc, #600]	; (8002868 <HAL_GPIO_Init+0x2a4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d86f      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002612:	4a96      	ldr	r2, [pc, #600]	; (800286c <HAL_GPIO_Init+0x2a8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d052      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002618:	4a94      	ldr	r2, [pc, #592]	; (800286c <HAL_GPIO_Init+0x2a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d869      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800261e:	4a94      	ldr	r2, [pc, #592]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d04c      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002624:	4a92      	ldr	r2, [pc, #584]	; (8002870 <HAL_GPIO_Init+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d863      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800262a:	4a92      	ldr	r2, [pc, #584]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d046      	beq.n	80026be <HAL_GPIO_Init+0xfa>
 8002630:	4a90      	ldr	r2, [pc, #576]	; (8002874 <HAL_GPIO_Init+0x2b0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d85d      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 8002636:	2b12      	cmp	r3, #18
 8002638:	d82a      	bhi.n	8002690 <HAL_GPIO_Init+0xcc>
 800263a:	2b12      	cmp	r3, #18
 800263c:	d859      	bhi.n	80026f2 <HAL_GPIO_Init+0x12e>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <HAL_GPIO_Init+0x80>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080026bf 	.word	0x080026bf
 8002648:	08002699 	.word	0x08002699
 800264c:	080026ab 	.word	0x080026ab
 8002650:	080026ed 	.word	0x080026ed
 8002654:	080026f3 	.word	0x080026f3
 8002658:	080026f3 	.word	0x080026f3
 800265c:	080026f3 	.word	0x080026f3
 8002660:	080026f3 	.word	0x080026f3
 8002664:	080026f3 	.word	0x080026f3
 8002668:	080026f3 	.word	0x080026f3
 800266c:	080026f3 	.word	0x080026f3
 8002670:	080026f3 	.word	0x080026f3
 8002674:	080026f3 	.word	0x080026f3
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026f3 	.word	0x080026f3
 8002680:	080026f3 	.word	0x080026f3
 8002684:	080026f3 	.word	0x080026f3
 8002688:	080026a1 	.word	0x080026a1
 800268c:	080026b5 	.word	0x080026b5
 8002690:	4a79      	ldr	r2, [pc, #484]	; (8002878 <HAL_GPIO_Init+0x2b4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002696:	e02c      	b.n	80026f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e029      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	3304      	adds	r3, #4
 80026a6:	623b      	str	r3, [r7, #32]
          break;
 80026a8:	e024      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	3308      	adds	r3, #8
 80026b0:	623b      	str	r3, [r7, #32]
          break;
 80026b2:	e01f      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	330c      	adds	r3, #12
 80026ba:	623b      	str	r3, [r7, #32]
          break;
 80026bc:	e01a      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c6:	2304      	movs	r3, #4
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e013      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d4:	2308      	movs	r3, #8
 80026d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	611a      	str	r2, [r3, #16]
          break;
 80026de:	e009      	b.n	80026f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	615a      	str	r2, [r3, #20]
          break;
 80026ea:	e003      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e000      	b.n	80026f4 <HAL_GPIO_Init+0x130>
          break;
 80026f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d801      	bhi.n	80026fe <HAL_GPIO_Init+0x13a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e001      	b.n	8002702 <HAL_GPIO_Init+0x13e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3304      	adds	r3, #4
 8002702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d802      	bhi.n	8002710 <HAL_GPIO_Init+0x14c>
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	e002      	b.n	8002716 <HAL_GPIO_Init+0x152>
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	3b08      	subs	r3, #8
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	210f      	movs	r1, #15
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	6a39      	ldr	r1, [r7, #32]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	431a      	orrs	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80b1 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a4c      	ldr	r2, [pc, #304]	; (800287c <HAL_GPIO_Init+0x2b8>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a40      	ldr	r2, [pc, #256]	; (8002884 <HAL_GPIO_Init+0x2c0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_GPIO_Init+0x1ec>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_GPIO_Init+0x2c4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00d      	beq.n	80027ac <HAL_GPIO_Init+0x1e8>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3e      	ldr	r2, [pc, #248]	; (800288c <HAL_GPIO_Init+0x2c8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0x1e4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <HAL_GPIO_Init+0x2cc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_GPIO_Init+0x1e0>
 80027a0:	2303      	movs	r3, #3
 80027a2:	e006      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e004      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e002      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_GPIO_Init+0x1ee>
 80027b0:	2300      	movs	r3, #0
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	f002 0203 	and.w	r2, r2, #3
 80027b8:	0092      	lsls	r2, r2, #2
 80027ba:	4093      	lsls	r3, r2
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027c2:	492f      	ldr	r1, [pc, #188]	; (8002880 <HAL_GPIO_Init+0x2bc>)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	492c      	ldr	r1, [pc, #176]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4928      	ldr	r1, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	43db      	mvns	r3, r3
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800281c:	4013      	ands	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4918      	ldr	r1, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	43db      	mvns	r3, r3
 8002842:	4914      	ldr	r1, [pc, #80]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002844:	4013      	ands	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	60cb      	str	r3, [r1, #12]
 8002860:	e021      	b.n	80028a6 <HAL_GPIO_Init+0x2e2>
 8002862:	bf00      	nop
 8002864:	10320000 	.word	0x10320000
 8002868:	10310000 	.word	0x10310000
 800286c:	10220000 	.word	0x10220000
 8002870:	10210000 	.word	0x10210000
 8002874:	10120000 	.word	0x10120000
 8002878:	10110000 	.word	0x10110000
 800287c:	40021000 	.word	0x40021000
 8002880:	40010000 	.word	0x40010000
 8002884:	40010800 	.word	0x40010800
 8002888:	40010c00 	.word	0x40010c00
 800288c:	40011000 	.word	0x40011000
 8002890:	40011400 	.word	0x40011400
 8002894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_GPIO_Init+0x304>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	43db      	mvns	r3, r3
 80028a0:	4909      	ldr	r1, [pc, #36]	; (80028c8 <HAL_GPIO_Init+0x304>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f47f ae8e 	bne.w	80025d8 <HAL_GPIO_Init+0x14>
  }
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	372c      	adds	r7, #44	; 0x2c
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40010400 	.word	0x40010400

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	611a      	str	r2, [r3, #16]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43d9      	mvns	r1, r3
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	400b      	ands	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
	...

08002930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e12b      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fa24 	bl	8001da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002994:	f001 fba0 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d807      	bhi.n	80029b4 <HAL_I2C_Init+0x84>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_I2C_Init+0x278>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e006      	b.n	80029c2 <HAL_I2C_Init+0x92>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	; (8002bac <HAL_I2C_Init+0x27c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e7      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_I2C_Init+0x280>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <HAL_I2C_Init+0xd4>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e009      	b.n	8002a18 <HAL_I2C_Init+0xe8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_I2C_Init+0x284>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	495c      	ldr	r1, [pc, #368]	; (8002ba4 <HAL_I2C_Init+0x274>)
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d819      	bhi.n	8002a6c <HAL_I2C_Init+0x13c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e59      	subs	r1, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_I2C_Init+0x138>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	e051      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e04f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_I2C_Init+0x168>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e012      	b.n	8002abe <HAL_I2C_Init+0x18e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x196>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_I2C_Init+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e58      	subs	r0, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6809      	ldr	r1, [r1, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6911      	ldr	r1, [r2, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	000186a0 	.word	0x000186a0
 8002ba8:	001e847f 	.word	0x001e847f
 8002bac:	003d08ff 	.word	0x003d08ff
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	813b      	strh	r3, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd2:	f7ff fbbb 	bl	800234c <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	f040 80d9 	bne.w	8002d98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2319      	movs	r3, #25
 8002bec:	2201      	movs	r2, #1
 8002bee:	496d      	ldr	r1, [pc, #436]	; (8002da4 <HAL_I2C_Mem_Write+0x1ec>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fcc1 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0cc      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Mem_Write+0x56>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0c5      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d007      	beq.n	8002c34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <HAL_I2C_Mem_Write+0x1f0>)
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c76:	88f8      	ldrh	r0, [r7, #6]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4603      	mov	r3, r0
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 faf8 	bl	800327c <I2C_RequestMemoryWrite>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d052      	beq.n	8002d38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e081      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fd42 	bl	8003724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11b      	bne.n	8002d38 <HAL_I2C_Mem_Write+0x180>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1aa      	bne.n	8002c96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fd2e 	bl	80037a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e016      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	00100002 	.word	0x00100002
 8002da8:	ffff0000 	.word	0xffff0000

08002dac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	817b      	strh	r3, [r7, #10]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	813b      	strh	r3, [r7, #8]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dca:	f7ff fabf 	bl	800234c <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	f040 8244 	bne.w	8003266 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2319      	movs	r3, #25
 8002de4:	2201      	movs	r2, #1
 8002de6:	4982      	ldr	r1, [pc, #520]	; (8002ff0 <HAL_I2C_Mem_Read+0x244>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fbc5 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
 8002df6:	e237      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Mem_Read+0x5a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e230      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d007      	beq.n	8002e2c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2222      	movs	r2, #34	; 0x22
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a62      	ldr	r2, [pc, #392]	; (8002ff4 <HAL_I2C_Mem_Read+0x248>)
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e6e:	88f8      	ldrh	r0, [r7, #6]
 8002e70:	893a      	ldrh	r2, [r7, #8]
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fa92 	bl	80033a8 <I2C_RequestMemoryRead>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1ec      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d113      	bne.n	8002ebe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e1c0      	b.n	8003240 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d11e      	bne.n	8002f04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed6:	b672      	cpsid	i
}
 8002ed8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f00:	b662      	cpsie	i
}
 8002f02:	e035      	b.n	8002f70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d11e      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1c:	b672      	cpsid	i
}
 8002f1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f46:	b662      	cpsie	i
}
 8002f48:	e012      	b.n	8002f70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f70:	e166      	b.n	8003240 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	f200 811f 	bhi.w	80031ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d123      	bne.n	8002fcc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fc4d 	bl	8003828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e167      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fca:	e139      	b.n	8003240 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d152      	bne.n	800307a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	2200      	movs	r2, #0
 8002fdc:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <HAL_I2C_Mem_Read+0x24c>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 faca 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e13c      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
 8002fee:	bf00      	nop
 8002ff0:	00100002 	.word	0x00100002
 8002ff4:	ffff0000 	.word	0xffff0000
 8002ff8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ffc:	b672      	cpsid	i
}
 8002ffe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003042:	b662      	cpsie	i
}
 8003044:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003078:	e0e2      	b.n	8003240 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2200      	movs	r2, #0
 8003082:	497b      	ldr	r1, [pc, #492]	; (8003270 <HAL_I2C_Mem_Read+0x4c4>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fa77 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0e9      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030a4:	b672      	cpsid	i
}
 80030a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030da:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_I2C_Mem_Read+0x4c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	08db      	lsrs	r3, r3, #3
 80030e0:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_I2C_Mem_Read+0x4cc>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0a1a      	lsrs	r2, r3, #8
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00da      	lsls	r2, r3, #3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d118      	bne.n	8003132 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003122:	b662      	cpsie	i
}
 8003124:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e09a      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d1d9      	bne.n	80030f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003182:	b662      	cpsie	i
}
 8003184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031b8:	e042      	b.n	8003240 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fb32 	bl	8003828 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e04c      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b04      	cmp	r3, #4
 800320c:	d118      	bne.n	8003240 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f ae94 	bne.w	8002f72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3728      	adds	r7, #40	; 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	00010004 	.word	0x00010004
 8003274:	20000018 	.word	0x20000018
 8003278:	14f8b589 	.word	0x14f8b589

0800327c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	461a      	mov	r2, r3
 800328a:	4603      	mov	r3, r0
 800328c:	817b      	strh	r3, [r7, #10]
 800328e:	460b      	mov	r3, r1
 8003290:	813b      	strh	r3, [r7, #8]
 8003292:	4613      	mov	r3, r2
 8003294:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f960 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00d      	beq.n	80032da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032cc:	d103      	bne.n	80032d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e05f      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	492d      	ldr	r1, [pc, #180]	; (80033a4 <I2C_RequestMemoryWrite+0x128>)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f998 	bl	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e04c      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa02 	bl	8003724 <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e02b      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	e021      	b.n	8003398 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003354:	893b      	ldrh	r3, [r7, #8]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	b29b      	uxth	r3, r3
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f9dc 	bl	8003724 <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e005      	b.n	800339a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	00010002 	.word	0x00010002

080033a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
 80033ba:	460b      	mov	r3, r1
 80033bc:	813b      	strh	r3, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8c2 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003408:	d103      	bne.n	8003412 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0aa      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	4952      	ldr	r1, [pc, #328]	; (8003574 <I2C_RequestMemoryRead+0x1cc>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f8fa 	bl	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e097      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f964 	bl	8003724 <I2C_WaitOnTXEFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b04      	cmp	r3, #4
 8003468:	d107      	bne.n	800347a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e076      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	e021      	b.n	80034d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	b29b      	uxth	r3, r3
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	6a39      	ldr	r1, [r7, #32]
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f93e 	bl	8003724 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d107      	bne.n	80034c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e050      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ca:	893b      	ldrh	r3, [r7, #8]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	6a39      	ldr	r1, [r7, #32]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f923 	bl	8003724 <I2C_WaitOnTXEFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d107      	bne.n	80034fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e035      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2200      	movs	r2, #0
 8003518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f82b 	bl	8003578 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d103      	bne.n	8003540 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e013      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	4906      	ldr	r1, [pc, #24]	; (8003574 <I2C_RequestMemoryRead+0x1cc>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f863 	bl	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	00010002 	.word	0x00010002

08003578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003588:	e025      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d021      	beq.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003592:	f7fe fedb 	bl	800234c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e023      	b.n	800361e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10d      	bne.n	80035fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf0c      	ite	eq
 80035f2:	2301      	moveq	r3, #1
 80035f4:	2300      	movne	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	e00c      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d0b6      	beq.n	800358a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003634:	e051      	b.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003644:	d123      	bne.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800365e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e046      	b.n	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d021      	beq.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7fe fe59 	bl	800234c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d116      	bne.n	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e020      	b.n	800371c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	0c1b      	lsrs	r3, r3, #16
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10c      	bne.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf14      	ite	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	2300      	moveq	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e00b      	b.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d18d      	bne.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003730:	e02d      	b.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f8ce 	bl	80038d4 <I2C_IsAcknowledgeFailed>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e02d      	b.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d021      	beq.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fe fdff 	bl	800234c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e007      	b.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b80      	cmp	r3, #128	; 0x80
 800379a:	d1ca      	bne.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037b2:	e02d      	b.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f88d 	bl	80038d4 <I2C_IsAcknowledgeFailed>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e02d      	b.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d021      	beq.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037cc:	f7fe fdbe 	bl	800234c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d302      	bcc.n	80037e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d116      	bne.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e007      	b.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d1ca      	bne.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003834:	e042      	b.n	80038bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b10      	cmp	r3, #16
 8003842:	d119      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e029      	b.n	80038cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003878:	f7fe fd68 	bl	800234c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d116      	bne.n	80038bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e007      	b.n	80038cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d1b5      	bne.n	8003836 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ea:	d11b      	bne.n	8003924 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0204 	orr.w	r2, r3, #4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e26c      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8087 	beq.w	8003a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003950:	4b92      	ldr	r3, [pc, #584]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	2b04      	cmp	r3, #4
 800395a:	d00c      	beq.n	8003976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800395c:	4b8f      	ldr	r3, [pc, #572]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b08      	cmp	r3, #8
 8003966:	d112      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
 8003968:	4b8c      	ldr	r3, [pc, #560]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d10b      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003976:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d06c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x12c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d168      	bne.n	8003a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e246      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76>
 8003998:	4b80      	ldr	r3, [pc, #512]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7f      	ldr	r2, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e02e      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7a      	ldr	r2, [pc, #488]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b78      	ldr	r3, [pc, #480]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a77      	ldr	r2, [pc, #476]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0xbc>
 80039d2:	4b72      	ldr	r3, [pc, #456]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a71      	ldr	r2, [pc, #452]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039ec:	4b6b      	ldr	r3, [pc, #428]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fc9e 	bl	800234c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe fc9a 	bl	800234c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1fa      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe4>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fe fc8a 	bl	800234c <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fc86 	bl	800234c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1e6      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x10c>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a6a:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a76:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x18c>
 8003a82:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b43      	ldr	r3, [pc, #268]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1ba      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4939      	ldr	r1, [pc, #228]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fe fc3f 	bl	800234c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fc3b 	bl	800234c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e19b      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4927      	ldr	r1, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fc1e 	bl	800234c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fc1a 	bl	800234c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e17a      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03a      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d019      	beq.n	8003b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fbfe 	bl	800234c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe fbfa 	bl	800234c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e15a      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_RCC_OscConfig+0x26c>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f000 fad8 	bl	8004128 <RCC_Delay>
 8003b78:	e01c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b80:	f7fe fbe4 	bl	800234c <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b88:	f7fe fbe0 	bl	800234c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d908      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e140      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	42420000 	.word	0x42420000
 8003ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba8:	4b9e      	ldr	r3, [pc, #632]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e9      	bne.n	8003b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a6 	beq.w	8003d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc6:	4b97      	ldr	r3, [pc, #604]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd2:	4b94      	ldr	r3, [pc, #592]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	4a93      	ldr	r2, [pc, #588]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	61d3      	str	r3, [r2, #28]
 8003bde:	4b91      	ldr	r3, [pc, #580]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b8e      	ldr	r3, [pc, #568]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d118      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a8a      	ldr	r2, [pc, #552]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c06:	f7fe fba1 	bl	800234c <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fe fb9d 	bl	800234c <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0fd      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x4f8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x312>
 8003c34:	4b7b      	ldr	r3, [pc, #492]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4a7a      	ldr	r2, [pc, #488]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6213      	str	r3, [r2, #32]
 8003c40:	e02d      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x334>
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	4b73      	ldr	r3, [pc, #460]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a72      	ldr	r2, [pc, #456]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	e01c      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCC_OscConfig+0x356>
 8003c6c:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4a6c      	ldr	r2, [pc, #432]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6213      	str	r3, [r2, #32]
 8003c78:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a69      	ldr	r2, [pc, #420]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e00b      	b.n	8003c9e <HAL_RCC_OscConfig+0x36e>
 8003c86:	4b67      	ldr	r3, [pc, #412]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4a66      	ldr	r2, [pc, #408]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6213      	str	r3, [r2, #32]
 8003c92:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4a63      	ldr	r2, [pc, #396]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fe fb51 	bl	800234c <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fe fb4d 	bl	800234c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0ab      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	4b57      	ldr	r3, [pc, #348]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0ee      	beq.n	8003cae <HAL_RCC_OscConfig+0x37e>
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd2:	f7fe fb3b 	bl	800234c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fe fb37 	bl	800234c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e095      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ee      	bne.n	8003cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	4a47      	ldr	r2, [pc, #284]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8081 	beq.w	8003e1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d18:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d061      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d146      	bne.n	8003dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2c:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_OscConfig+0x4fc>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe fb0b 	bl	800234c <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fe fb07 	bl	800234c <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e067      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	492d      	ldr	r1, [pc, #180]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d74:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a19      	ldr	r1, [r3, #32]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	430b      	orrs	r3, r1
 8003d86:	4927      	ldr	r1, [pc, #156]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x4fc>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d92:	f7fe fadb 	bl	800234c <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9a:	f7fe fad7 	bl	800234c <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e037      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x46a>
 8003db8:	e02f      	b.n	8003e1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_RCC_OscConfig+0x4fc>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fac4 	bl	800234c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fac0 	bl	800234c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e020      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x498>
 8003de6:	e018      	b.n	8003e1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e013      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42420060 	.word	0x42420060

08003e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0d0      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d910      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4965      	ldr	r1, [pc, #404]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b8      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a58      	ldr	r2, [pc, #352]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	494d      	ldr	r1, [pc, #308]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d040      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d115      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e073      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06b      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f023 0203 	bic.w	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4936      	ldr	r1, [pc, #216]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f20:	f7fe fa14 	bl	800234c <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7fe fa10 	bl	800234c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e053      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 020c 	and.w	r2, r3, #12
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1eb      	bne.n	8003f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d210      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4922      	ldr	r1, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4916      	ldr	r1, [pc, #88]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fbe:	f000 f821 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	490a      	ldr	r1, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	5ccb      	ldrb	r3, [r1, r3]
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1cc>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe f972 	bl	80022c8 <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08009020 	.word	0x08009020
 8003ffc:	20000018 	.word	0x20000018
 8004000:	2000001c 	.word	0x2000001c

08004004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b490      	push	{r4, r7}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800400c:	1d3c      	adds	r4, r7, #4
 800400e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004014:	f240 2301 	movw	r3, #513	; 0x201
 8004018:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x40>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x46>
 8004042:	e02d      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	623b      	str	r3, [r7, #32]
      break;
 8004048:	e02d      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	0c9b      	lsrs	r3, r3, #18
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004056:	4413      	add	r3, r2
 8004058:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800405c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	0c5b      	lsrs	r3, r3, #17
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004076:	4413      	add	r3, r2
 8004078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800407c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004082:	fb02 f203 	mul.w	r2, r2, r3
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	e004      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	623b      	str	r3, [r7, #32]
      break;
 800409e:	e002      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	623b      	str	r3, [r7, #32]
      break;
 80040a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a6:	6a3b      	ldr	r3, [r7, #32]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc90      	pop	{r4, r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	08009010 	.word	0x08009010
 80040b8:	40021000 	.word	0x40021000
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	003d0900 	.word	0x003d0900

080040c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c8:	4b02      	ldr	r3, [pc, #8]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000018 	.word	0x20000018

080040d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040dc:	f7ff fff2 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4903      	ldr	r1, [pc, #12]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08009030 	.word	0x08009030

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004104:	f7ff ffde 	bl	80040c4 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	0adb      	lsrs	r3, r3, #11
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	08009030 	.word	0x08009030

08004128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <RCC_Delay+0x34>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <RCC_Delay+0x38>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004144:	bf00      	nop
  }
  while (Delay --);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1e5a      	subs	r2, r3, #1
 800414a:	60fa      	str	r2, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f9      	bne.n	8004144 <RCC_Delay+0x1c>
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	20000018 	.word	0x20000018
 8004160:	10624dd3 	.word	0x10624dd3

08004164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e041      	b.n	80041fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fd fe66 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f000 fe90 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d001      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e03a      	b.n	8004292 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a18      	ldr	r2, [pc, #96]	; (800429c <HAL_TIM_Base_Start_IT+0x98>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00e      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x58>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d009      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x58>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x58>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d111      	bne.n	8004280 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b06      	cmp	r3, #6
 800426c:	d010      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	e007      	b.n	8004290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800

080042a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd fda6 	bl	8001e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fdee 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x24>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e022      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d109      	bne.n	8004386 <HAL_TIM_PWM_Start+0x3e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e015      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e05e      	b.n	8004478 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start+0x82>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	e013      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start+0x92>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d8:	e00b      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start+0xa2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e8:	e003      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 f97f 	bl	80056fe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <HAL_TIM_PWM_Start+0x138>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d107      	bne.n	800441a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a18      	ldr	r2, [pc, #96]	; (8004480 <HAL_TIM_PWM_Start+0x138>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442c:	d009      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a14      	ldr	r2, [pc, #80]	; (8004484 <HAL_TIM_PWM_Start+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <HAL_TIM_PWM_Start+0x140>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d010      	beq.n	8004476 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	e007      	b.n	8004476 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800

0800448c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f839 	bl	800452a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 fcfc 	bl	8004ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_TIM_IC_Start_IT+0x1a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e013      	b.n	800457e <HAL_TIM_IC_Start_IT+0x42>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d104      	bne.n	8004566 <HAL_TIM_IC_Start_IT+0x2a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e00b      	b.n	800457e <HAL_TIM_IC_Start_IT+0x42>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d104      	bne.n	8004576 <HAL_TIM_IC_Start_IT+0x3a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e003      	b.n	800457e <HAL_TIM_IC_Start_IT+0x42>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_TIM_IC_Start_IT+0x54>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e013      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x7c>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d104      	bne.n	80045a0 <HAL_TIM_IC_Start_IT+0x64>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e00b      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x7c>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d104      	bne.n	80045b0 <HAL_TIM_IC_Start_IT+0x74>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e003      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x7c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045c0:	7bbb      	ldrb	r3, [r7, #14]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d001      	beq.n	80045ca <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0b3      	b.n	8004732 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_TIM_IC_Start_IT+0x9e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d8:	e013      	b.n	8004602 <HAL_TIM_IC_Start_IT+0xc6>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d104      	bne.n	80045ea <HAL_TIM_IC_Start_IT+0xae>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_IC_Start_IT+0xc6>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_IC_Start_IT+0xbe>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	e003      	b.n	8004602 <HAL_TIM_IC_Start_IT+0xc6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_TIM_IC_Start_IT+0xd6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004610:	e013      	b.n	800463a <HAL_TIM_IC_Start_IT+0xfe>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d104      	bne.n	8004622 <HAL_TIM_IC_Start_IT+0xe6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004620:	e00b      	b.n	800463a <HAL_TIM_IC_Start_IT+0xfe>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d104      	bne.n	8004632 <HAL_TIM_IC_Start_IT+0xf6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	e003      	b.n	800463a <HAL_TIM_IC_Start_IT+0xfe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d841      	bhi.n	80046c4 <HAL_TIM_IC_Start_IT+0x188>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_IC_Start_IT+0x10c>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800467d 	.word	0x0800467d
 800464c:	080046c5 	.word	0x080046c5
 8004650:	080046c5 	.word	0x080046c5
 8004654:	080046c5 	.word	0x080046c5
 8004658:	0800468f 	.word	0x0800468f
 800465c:	080046c5 	.word	0x080046c5
 8004660:	080046c5 	.word	0x080046c5
 8004664:	080046c5 	.word	0x080046c5
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046c5 	.word	0x080046c5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046b3 	.word	0x080046b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0202 	orr.w	r2, r2, #2
 800468a:	60da      	str	r2, [r3, #12]
      break;
 800468c:	e01b      	b.n	80046c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0204 	orr.w	r2, r2, #4
 800469c:	60da      	str	r2, [r3, #12]
      break;
 800469e:	e012      	b.n	80046c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	60da      	str	r2, [r3, #12]
      break;
 80046b0:	e009      	b.n	80046c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0210 	orr.w	r2, r2, #16
 80046c0:	60da      	str	r2, [r3, #12]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80046c4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f815 	bl	80056fe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_TIM_IC_Start_IT+0x200>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_IC_Start_IT+0x1c0>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_IC_Start_IT+0x1c0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a14      	ldr	r2, [pc, #80]	; (8004740 <HAL_TIM_IC_Start_IT+0x204>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_IC_Start_IT+0x1c0>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <HAL_TIM_IC_Start_IT+0x208>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d010      	beq.n	8004730 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e007      	b.n	8004730 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d122      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b02      	cmp	r3, #2
 800476a:	d11b      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0202 	mvn.w	r2, #2
 8004774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fa9c 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fb7c 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fb82 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d122      	bne.n	80047f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d11b      	bne.n	80047f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0204 	mvn.w	r2, #4
 80047c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd fa72 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fb52 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb58 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d122      	bne.n	800484c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b08      	cmp	r3, #8
 8004812:	d11b      	bne.n	800484c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0208 	mvn.w	r2, #8
 800481c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2204      	movs	r2, #4
 8004822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd fa48 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 8004838:	e005      	b.n	8004846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fb28 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fb2e 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d122      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b10      	cmp	r3, #16
 8004866:	d11b      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0210 	mvn.w	r2, #16
 8004870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2208      	movs	r2, #8
 8004876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd fa1e 	bl	8001cc8 <HAL_TIM_IC_CaptureCallback>
 800488c:	e005      	b.n	800489a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fafe 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fb04 	bl	8004ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0201 	mvn.w	r2, #1
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd f936 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 ffe0 	bl	80058b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d10e      	bne.n	8004924 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d107      	bne.n	8004924 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fac8 	bl	8004eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d10e      	bne.n	8004950 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b20      	cmp	r3, #32
 800493e:	d107      	bne.n	8004950 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0220 	mvn.w	r2, #32
 8004948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 ffab 	bl	80058a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_IC_ConfigChannel+0x1a>
 800496e:	2302      	movs	r3, #2
 8004970:	e082      	b.n	8004a78 <HAL_TIM_IC_ConfigChannel+0x120>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f000 fd12 	bl	80053b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 020c 	bic.w	r2, r2, #12
 80049a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6999      	ldr	r1, [r3, #24]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	619a      	str	r2, [r3, #24]
 80049b6:	e05a      	b.n	8004a6e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d11c      	bne.n	80049f8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f000 fd7b 	bl	80054c8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6999      	ldr	r1, [r3, #24]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	619a      	str	r2, [r3, #24]
 80049f6:	e03a      	b.n	8004a6e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d11b      	bne.n	8004a36 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6819      	ldr	r1, [r3, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f000 fdc6 	bl	800559e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 020c 	bic.w	r2, r2, #12
 8004a20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69d9      	ldr	r1, [r3, #28]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	61da      	str	r2, [r3, #28]
 8004a34:	e01b      	b.n	8004a6e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f000 fde5 	bl	8005614 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a58:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69d9      	ldr	r1, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	021a      	lsls	r2, r3, #8
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0ac      	b.n	8004bf4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	f200 809f 	bhi.w	8004be8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ae5 	.word	0x08004ae5
 8004ab4:	08004be9 	.word	0x08004be9
 8004ab8:	08004be9 	.word	0x08004be9
 8004abc:	08004be9 	.word	0x08004be9
 8004ac0:	08004b25 	.word	0x08004b25
 8004ac4:	08004be9 	.word	0x08004be9
 8004ac8:	08004be9 	.word	0x08004be9
 8004acc:	08004be9 	.word	0x08004be9
 8004ad0:	08004b67 	.word	0x08004b67
 8004ad4:	08004be9 	.word	0x08004be9
 8004ad8:	08004be9 	.word	0x08004be9
 8004adc:	08004be9 	.word	0x08004be9
 8004ae0:	08004ba7 	.word	0x08004ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fa4e 	bl	8004f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0208 	orr.w	r2, r2, #8
 8004afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0204 	bic.w	r2, r2, #4
 8004b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6999      	ldr	r1, [r3, #24]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	619a      	str	r2, [r3, #24]
      break;
 8004b22:	e062      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa94 	bl	8005058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	021a      	lsls	r2, r3, #8
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	619a      	str	r2, [r3, #24]
      break;
 8004b64:	e041      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fadd 	bl	800512c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0208 	orr.w	r2, r2, #8
 8004b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0204 	bic.w	r2, r2, #4
 8004b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69d9      	ldr	r1, [r3, #28]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	61da      	str	r2, [r3, #28]
      break;
 8004ba4:	e021      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fb27 	bl	8005200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	021a      	lsls	r2, r3, #8
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	61da      	str	r2, [r3, #28]
      break;
 8004be6:	e000      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_ConfigClockSource+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0b3      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x180>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4c:	d03e      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0xd0>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	f200 8087 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	f000 8085 	beq.w	8004d68 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c62:	d87f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c64:	2b70      	cmp	r3, #112	; 0x70
 8004c66:	d01a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xa2>
 8004c68:	2b70      	cmp	r3, #112	; 0x70
 8004c6a:	d87b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c6c:	2b60      	cmp	r3, #96	; 0x60
 8004c6e:	d050      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x116>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d877      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c74:	2b50      	cmp	r3, #80	; 0x50
 8004c76:	d03c      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0xf6>
 8004c78:	2b50      	cmp	r3, #80	; 0x50
 8004c7a:	d873      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d058      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x136>
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d86f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c84:	2b30      	cmp	r3, #48	; 0x30
 8004c86:	d064      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x156>
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d86b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d060      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x156>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d867      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05c      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x156>
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d05a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c9c:	e062      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f000 fd07 	bl	80056c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
      break;
 8004cca:	e04e      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f000 fcf0 	bl	80056c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e03b      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 fbb4 	bl	800546c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2150      	movs	r1, #80	; 0x50
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fcbe 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 8004d10:	e02b      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 fc0e 	bl	8005540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2160      	movs	r1, #96	; 0x60
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 fcae 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 8004d30:	e01b      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 fb94 	bl	800546c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fc9e 	bl	800568c <TIM_ITRx_SetConfig>
      break;
 8004d50:	e00b      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 fc95 	bl	800568c <TIM_ITRx_SetConfig>
        break;
 8004d62:	e002      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d64:	bf00      	nop
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e031      	b.n	8004e00 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa74 	bl	800529c <TIM_SlaveTimer_SetConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e018      	b.n	8004e00 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d831      	bhi.n	8004e80 <HAL_TIM_ReadCapturedValue+0x78>
 8004e1c:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e81 	.word	0x08004e81
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08004e81 	.word	0x08004e81
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e81 	.word	0x08004e81
 8004e3c:	08004e81 	.word	0x08004e81
 8004e40:	08004e81 	.word	0x08004e81
 8004e44:	08004e6d 	.word	0x08004e6d
 8004e48:	08004e81 	.word	0x08004e81
 8004e4c:	08004e81 	.word	0x08004e81
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e77 	.word	0x08004e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	60fb      	str	r3, [r7, #12]

      break;
 8004e60:	e00f      	b.n	8004e82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	60fb      	str	r3, [r7, #12]

      break;
 8004e6a:	e00a      	b.n	8004e82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	60fb      	str	r3, [r7, #12]

      break;
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	60fb      	str	r3, [r7, #12]

      break;
 8004e7e:	e000      	b.n	8004e82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e80:	bf00      	nop
  }

  return tmpreg;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop

08004e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
	...

08004ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <TIM_Base_SetConfig+0xb8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x30>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x30>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <TIM_Base_SetConfig+0xbc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x30>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a25      	ldr	r2, [pc, #148]	; (8004f88 <TIM_Base_SetConfig+0xc0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <TIM_Base_SetConfig+0xb8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00b      	beq.n	8004f2a <TIM_Base_SetConfig+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d007      	beq.n	8004f2a <TIM_Base_SetConfig+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <TIM_Base_SetConfig+0xbc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d003      	beq.n	8004f2a <TIM_Base_SetConfig+0x62>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <TIM_Base_SetConfig+0xc0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d108      	bne.n	8004f3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <TIM_Base_SetConfig+0xb8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	615a      	str	r2, [r3, #20]
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800

08004f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 0302 	bic.w	r3, r3, #2
 8004fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <TIM_OC1_SetConfig+0xc8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d10c      	bne.n	8005002 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0308 	bic.w	r3, r3, #8
 8004fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 0304 	bic.w	r3, r3, #4
 8005000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a13      	ldr	r2, [pc, #76]	; (8005054 <TIM_OC1_SetConfig+0xc8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d111      	bne.n	800502e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	621a      	str	r2, [r3, #32]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40012c00 	.word	0x40012c00

08005058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0210 	bic.w	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0320 	bic.w	r3, r3, #32
 80050a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <TIM_OC2_SetConfig+0xd0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10d      	bne.n	80050d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a14      	ldr	r2, [pc, #80]	; (8005128 <TIM_OC2_SetConfig+0xd0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d113      	bne.n	8005104 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	621a      	str	r2, [r3, #32]
}
 800511e:	bf00      	nop
 8005120:	371c      	adds	r7, #28
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00

0800512c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	021b      	lsls	r3, r3, #8
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <TIM_OC3_SetConfig+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10d      	bne.n	80051a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <TIM_OC3_SetConfig+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d113      	bne.n	80051d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00

08005200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800524a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <TIM_OC4_SetConfig+0x98>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d109      	bne.n	8005274 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00

0800529c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0307 	bic.w	r3, r3, #7
 80052c6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b70      	cmp	r3, #112	; 0x70
 80052e0:	d01a      	beq.n	8005318 <TIM_SlaveTimer_SetConfig+0x7c>
 80052e2:	2b70      	cmp	r3, #112	; 0x70
 80052e4:	d860      	bhi.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80052e6:	2b60      	cmp	r3, #96	; 0x60
 80052e8:	d054      	beq.n	8005394 <TIM_SlaveTimer_SetConfig+0xf8>
 80052ea:	2b60      	cmp	r3, #96	; 0x60
 80052ec:	d85c      	bhi.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80052ee:	2b50      	cmp	r3, #80	; 0x50
 80052f0:	d046      	beq.n	8005380 <TIM_SlaveTimer_SetConfig+0xe4>
 80052f2:	2b50      	cmp	r3, #80	; 0x50
 80052f4:	d858      	bhi.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d019      	beq.n	800532e <TIM_SlaveTimer_SetConfig+0x92>
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d854      	bhi.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
 80052fe:	2b30      	cmp	r3, #48	; 0x30
 8005300:	d054      	beq.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 8005302:	2b30      	cmp	r3, #48	; 0x30
 8005304:	d850      	bhi.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
 8005306:	2b20      	cmp	r3, #32
 8005308:	d050      	beq.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 800530a:	2b20      	cmp	r3, #32
 800530c:	d84c      	bhi.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04c      	beq.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
 8005312:	2b10      	cmp	r3, #16
 8005314:	d04a      	beq.n	80053ac <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005316:	e047      	b.n	80053a8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68d9      	ldr	r1, [r3, #12]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f000 f9ca 	bl	80056c0 <TIM_ETR_SetConfig>
      break;
 800532c:	e03f      	b.n	80053ae <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b05      	cmp	r3, #5
 8005334:	d101      	bne.n	800533a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e03a      	b.n	80053b0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005360:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
      break;
 800537e:	e016      	b.n	80053ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6899      	ldr	r1, [r3, #8]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	461a      	mov	r2, r3
 800538e:	f000 f86d 	bl	800546c <TIM_TI1_ConfigInputStage>
      break;
 8005392:	e00c      	b.n	80053ae <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6899      	ldr	r1, [r3, #8]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f000 f8cd 	bl	8005540 <TIM_TI2_ConfigInputStage>
      break;
 80053a6:	e002      	b.n	80053ae <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80053ac:	bf00      	nop
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <TIM_TI1_SetConfig+0xa8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_TI1_SetConfig+0x46>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d007      	beq.n	80053fe <TIM_TI1_SetConfig+0x46>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_TI1_SetConfig+0xac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_TI1_SetConfig+0x46>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <TIM_TI1_SetConfig+0xb0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <TIM_TI1_SetConfig+0x4a>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <TIM_TI1_SetConfig+0x4c>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e003      	b.n	8005422 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	b2db      	uxtb	r3, r3
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f003 030a 	and.w	r3, r3, #10
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800

0800546c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f023 030a 	bic.w	r3, r3, #10
 80054a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	031b      	lsls	r3, r3, #12
 800550c:	b29b      	uxth	r3, r3
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f023 0210 	bic.w	r2, r3, #16
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	031b      	lsls	r3, r3, #12
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800557c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	621a      	str	r2, [r3, #32]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800559e:	b480      	push	{r7}
 80055a0:	b087      	sub	sp, #28
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
 80055aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005640:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005652:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	031b      	lsls	r3, r3, #12
 8005658:	b29b      	uxth	r3, r3
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005666:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	031b      	lsls	r3, r3, #12
 800566c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f043 0307 	orr.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr

080056fe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056fe:	b480      	push	{r7}
 8005700:	b087      	sub	sp, #28
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	2201      	movs	r2, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	43db      	mvns	r3, r3
 8005720:	401a      	ands	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	fa01 f303 	lsl.w	r3, r1, r3
 8005736:	431a      	orrs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr
	...

08005748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800575c:	2302      	movs	r3, #2
 800575e:	e046      	b.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a16      	ldr	r2, [pc, #88]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d009      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a12      	ldr	r2, [pc, #72]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a10      	ldr	r2, [pc, #64]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10c      	bne.n	80057dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800

08005804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800581c:	2302      	movs	r3, #2
 800581e:	e03d      	b.n	800589c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e03f      	b.n	800595c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fc fb61 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2224      	movs	r2, #36	; 0x24
 80058fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800590c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f904 	bl	8005b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005932:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005942:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	4613      	mov	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b20      	cmp	r3, #32
 8005982:	d17c      	bne.n	8005a7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_UART_Transmit+0x2c>
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e075      	b.n	8005a80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Transmit+0x3e>
 800599e:	2302      	movs	r3, #2
 80059a0:	e06e      	b.n	8005a80 <HAL_UART_Transmit+0x11c>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2221      	movs	r2, #33	; 0x21
 80059b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80059b8:	f7fc fcc8 	bl	800234c <HAL_GetTick>
 80059bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d2:	d108      	bne.n	80059e6 <HAL_UART_Transmit+0x82>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e003      	b.n	80059ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059f6:	e02a      	b.n	8005a4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f840 	bl	8005a88 <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e036      	b.n	8005a80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10b      	bne.n	8005a30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	e007      	b.n	8005a40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1cf      	bne.n	80059f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f810 	bl	8005a88 <UART_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e006      	b.n	8005a80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3720      	adds	r7, #32
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a98:	e02c      	b.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa0:	d028      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aa8:	f7fc fc50 	bl	800234c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d21d      	bcs.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e00f      	b.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d0c3      	beq.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b56:	f023 030c 	bic.w	r3, r3, #12
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	430b      	orrs	r3, r1
 8005b62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a2c      	ldr	r2, [pc, #176]	; (8005c30 <UART_SetConfig+0x114>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d103      	bne.n	8005b8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fe fabc 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	e002      	b.n	8005b92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b8c:	f7fe faa4 	bl	80040d8 <HAL_RCC_GetPCLK1Freq>
 8005b90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009a      	lsls	r2, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	4a22      	ldr	r2, [pc, #136]	; (8005c34 <UART_SetConfig+0x118>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	0119      	lsls	r1, r3, #4
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009a      	lsls	r2, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <UART_SetConfig+0x118>)
 8005bca:	fba3 0302 	umull	r0, r3, r3, r2
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	2064      	movs	r0, #100	; 0x64
 8005bd2:	fb00 f303 	mul.w	r3, r0, r3
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	3332      	adds	r3, #50	; 0x32
 8005bdc:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <UART_SetConfig+0x118>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be8:	4419      	add	r1, r3
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009a      	lsls	r2, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <UART_SetConfig+0x118>)
 8005c02:	fba3 0302 	umull	r0, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	2064      	movs	r0, #100	; 0x64
 8005c0a:	fb00 f303 	mul.w	r3, r0, r3
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	3332      	adds	r3, #50	; 0x32
 8005c14:	4a07      	ldr	r2, [pc, #28]	; (8005c34 <UART_SetConfig+0x118>)
 8005c16:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	f003 020f 	and.w	r2, r3, #15
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	440a      	add	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40013800 	.word	0x40013800
 8005c34:	51eb851f 	.word	0x51eb851f

08005c38 <__errno>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	; (8005c40 <__errno+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20000024 	.word	0x20000024

08005c44 <__libc_init_array>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	2600      	movs	r6, #0
 8005c48:	4d0c      	ldr	r5, [pc, #48]	; (8005c7c <__libc_init_array+0x38>)
 8005c4a:	4c0d      	ldr	r4, [pc, #52]	; (8005c80 <__libc_init_array+0x3c>)
 8005c4c:	1b64      	subs	r4, r4, r5
 8005c4e:	10a4      	asrs	r4, r4, #2
 8005c50:	42a6      	cmp	r6, r4
 8005c52:	d109      	bne.n	8005c68 <__libc_init_array+0x24>
 8005c54:	f003 f9c6 	bl	8008fe4 <_init>
 8005c58:	2600      	movs	r6, #0
 8005c5a:	4d0a      	ldr	r5, [pc, #40]	; (8005c84 <__libc_init_array+0x40>)
 8005c5c:	4c0a      	ldr	r4, [pc, #40]	; (8005c88 <__libc_init_array+0x44>)
 8005c5e:	1b64      	subs	r4, r4, r5
 8005c60:	10a4      	asrs	r4, r4, #2
 8005c62:	42a6      	cmp	r6, r4
 8005c64:	d105      	bne.n	8005c72 <__libc_init_array+0x2e>
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6c:	4798      	blx	r3
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7ee      	b.n	8005c50 <__libc_init_array+0xc>
 8005c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c76:	4798      	blx	r3
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7f2      	b.n	8005c62 <__libc_init_array+0x1e>
 8005c7c:	0800941c 	.word	0x0800941c
 8005c80:	0800941c 	.word	0x0800941c
 8005c84:	0800941c 	.word	0x0800941c
 8005c88:	08009420 	.word	0x08009420

08005c8c <memset>:
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4402      	add	r2, r0
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d100      	bne.n	8005c96 <memset+0xa>
 8005c94:	4770      	bx	lr
 8005c96:	f803 1b01 	strb.w	r1, [r3], #1
 8005c9a:	e7f9      	b.n	8005c90 <memset+0x4>

08005c9c <__cvt>:
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca2:	461f      	mov	r7, r3
 8005ca4:	bfbb      	ittet	lt
 8005ca6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005caa:	461f      	movlt	r7, r3
 8005cac:	2300      	movge	r3, #0
 8005cae:	232d      	movlt	r3, #45	; 0x2d
 8005cb0:	b088      	sub	sp, #32
 8005cb2:	4614      	mov	r4, r2
 8005cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005cb8:	7013      	strb	r3, [r2, #0]
 8005cba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cbc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005cc0:	f023 0820 	bic.w	r8, r3, #32
 8005cc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cc8:	d005      	beq.n	8005cd6 <__cvt+0x3a>
 8005cca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cce:	d100      	bne.n	8005cd2 <__cvt+0x36>
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e000      	b.n	8005cd8 <__cvt+0x3c>
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	aa07      	add	r2, sp, #28
 8005cda:	9204      	str	r2, [sp, #16]
 8005cdc:	aa06      	add	r2, sp, #24
 8005cde:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ce2:	e9cd 3500 	strd	r3, r5, [sp]
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	463b      	mov	r3, r7
 8005cea:	f000 fce5 	bl	80066b8 <_dtoa_r>
 8005cee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	d102      	bne.n	8005cfc <__cvt+0x60>
 8005cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cf8:	07db      	lsls	r3, r3, #31
 8005cfa:	d522      	bpl.n	8005d42 <__cvt+0xa6>
 8005cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d00:	eb06 0905 	add.w	r9, r6, r5
 8005d04:	d110      	bne.n	8005d28 <__cvt+0x8c>
 8005d06:	7833      	ldrb	r3, [r6, #0]
 8005d08:	2b30      	cmp	r3, #48	; 0x30
 8005d0a:	d10a      	bne.n	8005d22 <__cvt+0x86>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4620      	mov	r0, r4
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8005d18:	b918      	cbnz	r0, 8005d22 <__cvt+0x86>
 8005d1a:	f1c5 0501 	rsb	r5, r5, #1
 8005d1e:	f8ca 5000 	str.w	r5, [sl]
 8005d22:	f8da 3000 	ldr.w	r3, [sl]
 8005d26:	4499      	add	r9, r3
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005d34:	b108      	cbz	r0, 8005d3a <__cvt+0x9e>
 8005d36:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d3a:	2230      	movs	r2, #48	; 0x30
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	454b      	cmp	r3, r9
 8005d40:	d307      	bcc.n	8005d52 <__cvt+0xb6>
 8005d42:	4630      	mov	r0, r6
 8005d44:	9b07      	ldr	r3, [sp, #28]
 8005d46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d48:	1b9b      	subs	r3, r3, r6
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	b008      	add	sp, #32
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	9107      	str	r1, [sp, #28]
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	e7f0      	b.n	8005d3c <__cvt+0xa0>

08005d5a <__exponent>:
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5e:	2900      	cmp	r1, #0
 8005d60:	f803 2b02 	strb.w	r2, [r3], #2
 8005d64:	bfb6      	itet	lt
 8005d66:	222d      	movlt	r2, #45	; 0x2d
 8005d68:	222b      	movge	r2, #43	; 0x2b
 8005d6a:	4249      	neglt	r1, r1
 8005d6c:	2909      	cmp	r1, #9
 8005d6e:	7042      	strb	r2, [r0, #1]
 8005d70:	dd2b      	ble.n	8005dca <__exponent+0x70>
 8005d72:	f10d 0407 	add.w	r4, sp, #7
 8005d76:	46a4      	mov	ip, r4
 8005d78:	270a      	movs	r7, #10
 8005d7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d7e:	460a      	mov	r2, r1
 8005d80:	46a6      	mov	lr, r4
 8005d82:	fb07 1516 	mls	r5, r7, r6, r1
 8005d86:	2a63      	cmp	r2, #99	; 0x63
 8005d88:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d96:	dcf0      	bgt.n	8005d7a <__exponent+0x20>
 8005d98:	3130      	adds	r1, #48	; 0x30
 8005d9a:	f1ae 0502 	sub.w	r5, lr, #2
 8005d9e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005da2:	4629      	mov	r1, r5
 8005da4:	1c44      	adds	r4, r0, #1
 8005da6:	4561      	cmp	r1, ip
 8005da8:	d30a      	bcc.n	8005dc0 <__exponent+0x66>
 8005daa:	f10d 0209 	add.w	r2, sp, #9
 8005dae:	eba2 020e 	sub.w	r2, r2, lr
 8005db2:	4565      	cmp	r5, ip
 8005db4:	bf88      	it	hi
 8005db6:	2200      	movhi	r2, #0
 8005db8:	4413      	add	r3, r2
 8005dba:	1a18      	subs	r0, r3, r0
 8005dbc:	b003      	add	sp, #12
 8005dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dc4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005dc8:	e7ed      	b.n	8005da6 <__exponent+0x4c>
 8005dca:	2330      	movs	r3, #48	; 0x30
 8005dcc:	3130      	adds	r1, #48	; 0x30
 8005dce:	7083      	strb	r3, [r0, #2]
 8005dd0:	70c1      	strb	r1, [r0, #3]
 8005dd2:	1d03      	adds	r3, r0, #4
 8005dd4:	e7f1      	b.n	8005dba <__exponent+0x60>
	...

08005dd8 <_printf_float>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	b091      	sub	sp, #68	; 0x44
 8005dde:	460c      	mov	r4, r1
 8005de0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005de4:	4616      	mov	r6, r2
 8005de6:	461f      	mov	r7, r3
 8005de8:	4605      	mov	r5, r0
 8005dea:	f001 fa53 	bl	8007294 <_localeconv_r>
 8005dee:	6803      	ldr	r3, [r0, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	9309      	str	r3, [sp, #36]	; 0x24
 8005df4:	f7fa f9ac 	bl	8000150 <strlen>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8005dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8005e00:	900a      	str	r0, [sp, #40]	; 0x28
 8005e02:	3307      	adds	r3, #7
 8005e04:	f023 0307 	bic.w	r3, r3, #7
 8005e08:	f103 0208 	add.w	r2, r3, #8
 8005e0c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e10:	f8d4 b000 	ldr.w	fp, [r4]
 8005e14:	f8c8 2000 	str.w	r2, [r8]
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e20:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005e24:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	4640      	mov	r0, r8
 8005e30:	4b9c      	ldr	r3, [pc, #624]	; (80060a4 <_printf_float+0x2cc>)
 8005e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e34:	f7fa fdea 	bl	8000a0c <__aeabi_dcmpun>
 8005e38:	bb70      	cbnz	r0, 8005e98 <_printf_float+0xc0>
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4b98      	ldr	r3, [pc, #608]	; (80060a4 <_printf_float+0x2cc>)
 8005e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e44:	f7fa fdc4 	bl	80009d0 <__aeabi_dcmple>
 8005e48:	bb30      	cbnz	r0, 8005e98 <_printf_float+0xc0>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4651      	mov	r1, sl
 8005e52:	f7fa fdb3 	bl	80009bc <__aeabi_dcmplt>
 8005e56:	b110      	cbz	r0, 8005e5e <_printf_float+0x86>
 8005e58:	232d      	movs	r3, #45	; 0x2d
 8005e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5e:	4b92      	ldr	r3, [pc, #584]	; (80060a8 <_printf_float+0x2d0>)
 8005e60:	4892      	ldr	r0, [pc, #584]	; (80060ac <_printf_float+0x2d4>)
 8005e62:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e66:	bf94      	ite	ls
 8005e68:	4698      	movls	r8, r3
 8005e6a:	4680      	movhi	r8, r0
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	f04f 0a00 	mov.w	sl, #0
 8005e72:	6123      	str	r3, [r4, #16]
 8005e74:	f02b 0304 	bic.w	r3, fp, #4
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	4633      	mov	r3, r6
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	9700      	str	r7, [sp, #0]
 8005e82:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e84:	f000 f9d4 	bl	8006230 <_printf_common>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f040 8090 	bne.w	8005fae <_printf_float+0x1d6>
 8005e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e92:	b011      	add	sp, #68	; 0x44
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	4642      	mov	r2, r8
 8005e9a:	4653      	mov	r3, sl
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	f7fa fdb4 	bl	8000a0c <__aeabi_dcmpun>
 8005ea4:	b148      	cbz	r0, 8005eba <_printf_float+0xe2>
 8005ea6:	f1ba 0f00 	cmp.w	sl, #0
 8005eaa:	bfb8      	it	lt
 8005eac:	232d      	movlt	r3, #45	; 0x2d
 8005eae:	4880      	ldr	r0, [pc, #512]	; (80060b0 <_printf_float+0x2d8>)
 8005eb0:	bfb8      	it	lt
 8005eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005eb6:	4b7f      	ldr	r3, [pc, #508]	; (80060b4 <_printf_float+0x2dc>)
 8005eb8:	e7d3      	b.n	8005e62 <_printf_float+0x8a>
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	d142      	bne.n	8005f4a <_printf_float+0x172>
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	9206      	str	r2, [sp, #24]
 8005ecc:	aa0e      	add	r2, sp, #56	; 0x38
 8005ece:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ed2:	aa0d      	add	r2, sp, #52	; 0x34
 8005ed4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ed8:	9203      	str	r2, [sp, #12]
 8005eda:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005ede:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	6863      	ldr	r3, [r4, #4]
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4628      	mov	r0, r5
 8005eec:	4653      	mov	r3, sl
 8005eee:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ef0:	f7ff fed4 	bl	8005c9c <__cvt>
 8005ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	2947      	cmp	r1, #71	; 0x47
 8005efa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005efc:	d108      	bne.n	8005f10 <_printf_float+0x138>
 8005efe:	1cc8      	adds	r0, r1, #3
 8005f00:	db02      	blt.n	8005f08 <_printf_float+0x130>
 8005f02:	6863      	ldr	r3, [r4, #4]
 8005f04:	4299      	cmp	r1, r3
 8005f06:	dd40      	ble.n	8005f8a <_printf_float+0x1b2>
 8005f08:	f1a9 0902 	sub.w	r9, r9, #2
 8005f0c:	fa5f f989 	uxtb.w	r9, r9
 8005f10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f14:	d81f      	bhi.n	8005f56 <_printf_float+0x17e>
 8005f16:	464a      	mov	r2, r9
 8005f18:	3901      	subs	r1, #1
 8005f1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f1e:	910d      	str	r1, [sp, #52]	; 0x34
 8005f20:	f7ff ff1b 	bl	8005d5a <__exponent>
 8005f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f26:	4682      	mov	sl, r0
 8005f28:	1813      	adds	r3, r2, r0
 8005f2a:	2a01      	cmp	r2, #1
 8005f2c:	6123      	str	r3, [r4, #16]
 8005f2e:	dc02      	bgt.n	8005f36 <_printf_float+0x15e>
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	07d2      	lsls	r2, r2, #31
 8005f34:	d501      	bpl.n	8005f3a <_printf_float+0x162>
 8005f36:	3301      	adds	r3, #1
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d09b      	beq.n	8005e7a <_printf_float+0xa2>
 8005f42:	232d      	movs	r3, #45	; 0x2d
 8005f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f48:	e797      	b.n	8005e7a <_printf_float+0xa2>
 8005f4a:	2947      	cmp	r1, #71	; 0x47
 8005f4c:	d1bc      	bne.n	8005ec8 <_printf_float+0xf0>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1ba      	bne.n	8005ec8 <_printf_float+0xf0>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e7b7      	b.n	8005ec6 <_printf_float+0xee>
 8005f56:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f5a:	d118      	bne.n	8005f8e <_printf_float+0x1b6>
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	dd0b      	ble.n	8005f7a <_printf_float+0x1a2>
 8005f62:	6121      	str	r1, [r4, #16]
 8005f64:	b913      	cbnz	r3, 8005f6c <_printf_float+0x194>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	07d0      	lsls	r0, r2, #31
 8005f6a:	d502      	bpl.n	8005f72 <_printf_float+0x19a>
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	440b      	add	r3, r1
 8005f70:	6123      	str	r3, [r4, #16]
 8005f72:	f04f 0a00 	mov.w	sl, #0
 8005f76:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f78:	e7df      	b.n	8005f3a <_printf_float+0x162>
 8005f7a:	b913      	cbnz	r3, 8005f82 <_printf_float+0x1aa>
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	07d2      	lsls	r2, r2, #31
 8005f80:	d501      	bpl.n	8005f86 <_printf_float+0x1ae>
 8005f82:	3302      	adds	r3, #2
 8005f84:	e7f4      	b.n	8005f70 <_printf_float+0x198>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e7f2      	b.n	8005f70 <_printf_float+0x198>
 8005f8a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f90:	4299      	cmp	r1, r3
 8005f92:	db05      	blt.n	8005fa0 <_printf_float+0x1c8>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	6121      	str	r1, [r4, #16]
 8005f98:	07d8      	lsls	r0, r3, #31
 8005f9a:	d5ea      	bpl.n	8005f72 <_printf_float+0x19a>
 8005f9c:	1c4b      	adds	r3, r1, #1
 8005f9e:	e7e7      	b.n	8005f70 <_printf_float+0x198>
 8005fa0:	2900      	cmp	r1, #0
 8005fa2:	bfcc      	ite	gt
 8005fa4:	2201      	movgt	r2, #1
 8005fa6:	f1c1 0202 	rsble	r2, r1, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	e7e0      	b.n	8005f70 <_printf_float+0x198>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	055a      	lsls	r2, r3, #21
 8005fb2:	d407      	bmi.n	8005fc4 <_printf_float+0x1ec>
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	4642      	mov	r2, r8
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d12b      	bne.n	800601a <_printf_float+0x242>
 8005fc2:	e764      	b.n	8005e8e <_printf_float+0xb6>
 8005fc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fc8:	f240 80dd 	bls.w	8006186 <_printf_float+0x3ae>
 8005fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f7fa fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d033      	beq.n	8006044 <_printf_float+0x26c>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	4a35      	ldr	r2, [pc, #212]	; (80060b8 <_printf_float+0x2e0>)
 8005fe4:	47b8      	blx	r7
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f43f af51 	beq.w	8005e8e <_printf_float+0xb6>
 8005fec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	db02      	blt.n	8005ffa <_printf_float+0x222>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	07d8      	lsls	r0, r3, #31
 8005ff8:	d50f      	bpl.n	800601a <_printf_float+0x242>
 8005ffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ffe:	4631      	mov	r1, r6
 8006000:	4628      	mov	r0, r5
 8006002:	47b8      	blx	r7
 8006004:	3001      	adds	r0, #1
 8006006:	f43f af42 	beq.w	8005e8e <_printf_float+0xb6>
 800600a:	f04f 0800 	mov.w	r8, #0
 800600e:	f104 091a 	add.w	r9, r4, #26
 8006012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006014:	3b01      	subs	r3, #1
 8006016:	4543      	cmp	r3, r8
 8006018:	dc09      	bgt.n	800602e <_printf_float+0x256>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	079b      	lsls	r3, r3, #30
 800601e:	f100 8102 	bmi.w	8006226 <_printf_float+0x44e>
 8006022:	68e0      	ldr	r0, [r4, #12]
 8006024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006026:	4298      	cmp	r0, r3
 8006028:	bfb8      	it	lt
 800602a:	4618      	movlt	r0, r3
 800602c:	e731      	b.n	8005e92 <_printf_float+0xba>
 800602e:	2301      	movs	r3, #1
 8006030:	464a      	mov	r2, r9
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	f43f af28 	beq.w	8005e8e <_printf_float+0xb6>
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	e7e6      	b.n	8006012 <_printf_float+0x23a>
 8006044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	dc38      	bgt.n	80060bc <_printf_float+0x2e4>
 800604a:	2301      	movs	r3, #1
 800604c:	4631      	mov	r1, r6
 800604e:	4628      	mov	r0, r5
 8006050:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <_printf_float+0x2e0>)
 8006052:	47b8      	blx	r7
 8006054:	3001      	adds	r0, #1
 8006056:	f43f af1a 	beq.w	8005e8e <_printf_float+0xb6>
 800605a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800605e:	4313      	orrs	r3, r2
 8006060:	d102      	bne.n	8006068 <_printf_float+0x290>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	07d9      	lsls	r1, r3, #31
 8006066:	d5d8      	bpl.n	800601a <_printf_float+0x242>
 8006068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800606c:	4631      	mov	r1, r6
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	f43f af0b 	beq.w	8005e8e <_printf_float+0xb6>
 8006078:	f04f 0900 	mov.w	r9, #0
 800607c:	f104 0a1a 	add.w	sl, r4, #26
 8006080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006082:	425b      	negs	r3, r3
 8006084:	454b      	cmp	r3, r9
 8006086:	dc01      	bgt.n	800608c <_printf_float+0x2b4>
 8006088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800608a:	e794      	b.n	8005fb6 <_printf_float+0x1de>
 800608c:	2301      	movs	r3, #1
 800608e:	4652      	mov	r2, sl
 8006090:	4631      	mov	r1, r6
 8006092:	4628      	mov	r0, r5
 8006094:	47b8      	blx	r7
 8006096:	3001      	adds	r0, #1
 8006098:	f43f aef9 	beq.w	8005e8e <_printf_float+0xb6>
 800609c:	f109 0901 	add.w	r9, r9, #1
 80060a0:	e7ee      	b.n	8006080 <_printf_float+0x2a8>
 80060a2:	bf00      	nop
 80060a4:	7fefffff 	.word	0x7fefffff
 80060a8:	0800903c 	.word	0x0800903c
 80060ac:	08009040 	.word	0x08009040
 80060b0:	08009048 	.word	0x08009048
 80060b4:	08009044 	.word	0x08009044
 80060b8:	0800904c 	.word	0x0800904c
 80060bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bfa8      	it	ge
 80060c4:	461a      	movge	r2, r3
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	4691      	mov	r9, r2
 80060ca:	dc37      	bgt.n	800613c <_printf_float+0x364>
 80060cc:	f04f 0b00 	mov.w	fp, #0
 80060d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060d4:	f104 021a 	add.w	r2, r4, #26
 80060d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060dc:	ebaa 0309 	sub.w	r3, sl, r9
 80060e0:	455b      	cmp	r3, fp
 80060e2:	dc33      	bgt.n	800614c <_printf_float+0x374>
 80060e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060e8:	429a      	cmp	r2, r3
 80060ea:	db3b      	blt.n	8006164 <_printf_float+0x38c>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	07da      	lsls	r2, r3, #31
 80060f0:	d438      	bmi.n	8006164 <_printf_float+0x38c>
 80060f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060f6:	eba2 030a 	sub.w	r3, r2, sl
 80060fa:	eba2 0901 	sub.w	r9, r2, r1
 80060fe:	4599      	cmp	r9, r3
 8006100:	bfa8      	it	ge
 8006102:	4699      	movge	r9, r3
 8006104:	f1b9 0f00 	cmp.w	r9, #0
 8006108:	dc34      	bgt.n	8006174 <_printf_float+0x39c>
 800610a:	f04f 0800 	mov.w	r8, #0
 800610e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006112:	f104 0a1a 	add.w	sl, r4, #26
 8006116:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	eba3 0309 	sub.w	r3, r3, r9
 8006120:	4543      	cmp	r3, r8
 8006122:	f77f af7a 	ble.w	800601a <_printf_float+0x242>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4631      	mov	r1, r6
 800612c:	4628      	mov	r0, r5
 800612e:	47b8      	blx	r7
 8006130:	3001      	adds	r0, #1
 8006132:	f43f aeac 	beq.w	8005e8e <_printf_float+0xb6>
 8006136:	f108 0801 	add.w	r8, r8, #1
 800613a:	e7ec      	b.n	8006116 <_printf_float+0x33e>
 800613c:	4613      	mov	r3, r2
 800613e:	4631      	mov	r1, r6
 8006140:	4642      	mov	r2, r8
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	d1c0      	bne.n	80060cc <_printf_float+0x2f4>
 800614a:	e6a0      	b.n	8005e8e <_printf_float+0xb6>
 800614c:	2301      	movs	r3, #1
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	920b      	str	r2, [sp, #44]	; 0x2c
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	f43f ae99 	beq.w	8005e8e <_printf_float+0xb6>
 800615c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800615e:	f10b 0b01 	add.w	fp, fp, #1
 8006162:	e7b9      	b.n	80060d8 <_printf_float+0x300>
 8006164:	4631      	mov	r1, r6
 8006166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616a:	4628      	mov	r0, r5
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	d1bf      	bne.n	80060f2 <_printf_float+0x31a>
 8006172:	e68c      	b.n	8005e8e <_printf_float+0xb6>
 8006174:	464b      	mov	r3, r9
 8006176:	4631      	mov	r1, r6
 8006178:	4628      	mov	r0, r5
 800617a:	eb08 020a 	add.w	r2, r8, sl
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	d1c2      	bne.n	800610a <_printf_float+0x332>
 8006184:	e683      	b.n	8005e8e <_printf_float+0xb6>
 8006186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006188:	2a01      	cmp	r2, #1
 800618a:	dc01      	bgt.n	8006190 <_printf_float+0x3b8>
 800618c:	07db      	lsls	r3, r3, #31
 800618e:	d537      	bpl.n	8006200 <_printf_float+0x428>
 8006190:	2301      	movs	r3, #1
 8006192:	4642      	mov	r2, r8
 8006194:	4631      	mov	r1, r6
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	f43f ae77 	beq.w	8005e8e <_printf_float+0xb6>
 80061a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a4:	4631      	mov	r1, r6
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f ae6f 	beq.w	8005e8e <_printf_float+0xb6>
 80061b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	f7fa fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 80061bc:	b9d8      	cbnz	r0, 80061f6 <_printf_float+0x41e>
 80061be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c0:	f108 0201 	add.w	r2, r8, #1
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	d10e      	bne.n	80061ee <_printf_float+0x416>
 80061d0:	e65d      	b.n	8005e8e <_printf_float+0xb6>
 80061d2:	2301      	movs	r3, #1
 80061d4:	464a      	mov	r2, r9
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f ae56 	beq.w	8005e8e <_printf_float+0xb6>
 80061e2:	f108 0801 	add.w	r8, r8, #1
 80061e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061e8:	3b01      	subs	r3, #1
 80061ea:	4543      	cmp	r3, r8
 80061ec:	dcf1      	bgt.n	80061d2 <_printf_float+0x3fa>
 80061ee:	4653      	mov	r3, sl
 80061f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061f4:	e6e0      	b.n	8005fb8 <_printf_float+0x1e0>
 80061f6:	f04f 0800 	mov.w	r8, #0
 80061fa:	f104 091a 	add.w	r9, r4, #26
 80061fe:	e7f2      	b.n	80061e6 <_printf_float+0x40e>
 8006200:	2301      	movs	r3, #1
 8006202:	4642      	mov	r2, r8
 8006204:	e7df      	b.n	80061c6 <_printf_float+0x3ee>
 8006206:	2301      	movs	r3, #1
 8006208:	464a      	mov	r2, r9
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	47b8      	blx	r7
 8006210:	3001      	adds	r0, #1
 8006212:	f43f ae3c 	beq.w	8005e8e <_printf_float+0xb6>
 8006216:	f108 0801 	add.w	r8, r8, #1
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800621e:	1a5b      	subs	r3, r3, r1
 8006220:	4543      	cmp	r3, r8
 8006222:	dcf0      	bgt.n	8006206 <_printf_float+0x42e>
 8006224:	e6fd      	b.n	8006022 <_printf_float+0x24a>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	f104 0919 	add.w	r9, r4, #25
 800622e:	e7f4      	b.n	800621a <_printf_float+0x442>

08006230 <_printf_common>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	4616      	mov	r6, r2
 8006236:	4699      	mov	r9, r3
 8006238:	688a      	ldr	r2, [r1, #8]
 800623a:	690b      	ldr	r3, [r1, #16]
 800623c:	4607      	mov	r7, r0
 800623e:	4293      	cmp	r3, r2
 8006240:	bfb8      	it	lt
 8006242:	4613      	movlt	r3, r2
 8006244:	6033      	str	r3, [r6, #0]
 8006246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800624a:	460c      	mov	r4, r1
 800624c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006250:	b10a      	cbz	r2, 8006256 <_printf_common+0x26>
 8006252:	3301      	adds	r3, #1
 8006254:	6033      	str	r3, [r6, #0]
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	0699      	lsls	r1, r3, #26
 800625a:	bf42      	ittt	mi
 800625c:	6833      	ldrmi	r3, [r6, #0]
 800625e:	3302      	addmi	r3, #2
 8006260:	6033      	strmi	r3, [r6, #0]
 8006262:	6825      	ldr	r5, [r4, #0]
 8006264:	f015 0506 	ands.w	r5, r5, #6
 8006268:	d106      	bne.n	8006278 <_printf_common+0x48>
 800626a:	f104 0a19 	add.w	sl, r4, #25
 800626e:	68e3      	ldr	r3, [r4, #12]
 8006270:	6832      	ldr	r2, [r6, #0]
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	42ab      	cmp	r3, r5
 8006276:	dc28      	bgt.n	80062ca <_printf_common+0x9a>
 8006278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800627c:	1e13      	subs	r3, r2, #0
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	bf18      	it	ne
 8006282:	2301      	movne	r3, #1
 8006284:	0692      	lsls	r2, r2, #26
 8006286:	d42d      	bmi.n	80062e4 <_printf_common+0xb4>
 8006288:	4649      	mov	r1, r9
 800628a:	4638      	mov	r0, r7
 800628c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d020      	beq.n	80062d8 <_printf_common+0xa8>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	68e5      	ldr	r5, [r4, #12]
 800629a:	f003 0306 	and.w	r3, r3, #6
 800629e:	2b04      	cmp	r3, #4
 80062a0:	bf18      	it	ne
 80062a2:	2500      	movne	r5, #0
 80062a4:	6832      	ldr	r2, [r6, #0]
 80062a6:	f04f 0600 	mov.w	r6, #0
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	bf08      	it	eq
 80062ae:	1aad      	subeq	r5, r5, r2
 80062b0:	6922      	ldr	r2, [r4, #16]
 80062b2:	bf08      	it	eq
 80062b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b8:	4293      	cmp	r3, r2
 80062ba:	bfc4      	itt	gt
 80062bc:	1a9b      	subgt	r3, r3, r2
 80062be:	18ed      	addgt	r5, r5, r3
 80062c0:	341a      	adds	r4, #26
 80062c2:	42b5      	cmp	r5, r6
 80062c4:	d11a      	bne.n	80062fc <_printf_common+0xcc>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e008      	b.n	80062dc <_printf_common+0xac>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4652      	mov	r2, sl
 80062ce:	4649      	mov	r1, r9
 80062d0:	4638      	mov	r0, r7
 80062d2:	47c0      	blx	r8
 80062d4:	3001      	adds	r0, #1
 80062d6:	d103      	bne.n	80062e0 <_printf_common+0xb0>
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e0:	3501      	adds	r5, #1
 80062e2:	e7c4      	b.n	800626e <_printf_common+0x3e>
 80062e4:	2030      	movs	r0, #48	; 0x30
 80062e6:	18e1      	adds	r1, r4, r3
 80062e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062f2:	4422      	add	r2, r4
 80062f4:	3302      	adds	r3, #2
 80062f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062fa:	e7c5      	b.n	8006288 <_printf_common+0x58>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4622      	mov	r2, r4
 8006300:	4649      	mov	r1, r9
 8006302:	4638      	mov	r0, r7
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d0e6      	beq.n	80062d8 <_printf_common+0xa8>
 800630a:	3601      	adds	r6, #1
 800630c:	e7d9      	b.n	80062c2 <_printf_common+0x92>
	...

08006310 <_printf_i>:
 8006310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006314:	460c      	mov	r4, r1
 8006316:	7e27      	ldrb	r7, [r4, #24]
 8006318:	4691      	mov	r9, r2
 800631a:	2f78      	cmp	r7, #120	; 0x78
 800631c:	4680      	mov	r8, r0
 800631e:	469a      	mov	sl, r3
 8006320:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006326:	d807      	bhi.n	8006338 <_printf_i+0x28>
 8006328:	2f62      	cmp	r7, #98	; 0x62
 800632a:	d80a      	bhi.n	8006342 <_printf_i+0x32>
 800632c:	2f00      	cmp	r7, #0
 800632e:	f000 80d9 	beq.w	80064e4 <_printf_i+0x1d4>
 8006332:	2f58      	cmp	r7, #88	; 0x58
 8006334:	f000 80a4 	beq.w	8006480 <_printf_i+0x170>
 8006338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800633c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006340:	e03a      	b.n	80063b8 <_printf_i+0xa8>
 8006342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006346:	2b15      	cmp	r3, #21
 8006348:	d8f6      	bhi.n	8006338 <_printf_i+0x28>
 800634a:	a001      	add	r0, pc, #4	; (adr r0, 8006350 <_printf_i+0x40>)
 800634c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006350:	080063a9 	.word	0x080063a9
 8006354:	080063bd 	.word	0x080063bd
 8006358:	08006339 	.word	0x08006339
 800635c:	08006339 	.word	0x08006339
 8006360:	08006339 	.word	0x08006339
 8006364:	08006339 	.word	0x08006339
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006339 	.word	0x08006339
 8006370:	08006339 	.word	0x08006339
 8006374:	08006339 	.word	0x08006339
 8006378:	08006339 	.word	0x08006339
 800637c:	080064cb 	.word	0x080064cb
 8006380:	080063ed 	.word	0x080063ed
 8006384:	080064ad 	.word	0x080064ad
 8006388:	08006339 	.word	0x08006339
 800638c:	08006339 	.word	0x08006339
 8006390:	080064ed 	.word	0x080064ed
 8006394:	08006339 	.word	0x08006339
 8006398:	080063ed 	.word	0x080063ed
 800639c:	08006339 	.word	0x08006339
 80063a0:	08006339 	.word	0x08006339
 80063a4:	080064b5 	.word	0x080064b5
 80063a8:	680b      	ldr	r3, [r1, #0]
 80063aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	600a      	str	r2, [r1, #0]
 80063b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0a4      	b.n	8006506 <_printf_i+0x1f6>
 80063bc:	6825      	ldr	r5, [r4, #0]
 80063be:	6808      	ldr	r0, [r1, #0]
 80063c0:	062e      	lsls	r6, r5, #24
 80063c2:	f100 0304 	add.w	r3, r0, #4
 80063c6:	d50a      	bpl.n	80063de <_printf_i+0xce>
 80063c8:	6805      	ldr	r5, [r0, #0]
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	da03      	bge.n	80063d8 <_printf_i+0xc8>
 80063d0:	232d      	movs	r3, #45	; 0x2d
 80063d2:	426d      	negs	r5, r5
 80063d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d8:	230a      	movs	r3, #10
 80063da:	485e      	ldr	r0, [pc, #376]	; (8006554 <_printf_i+0x244>)
 80063dc:	e019      	b.n	8006412 <_printf_i+0x102>
 80063de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063e2:	6805      	ldr	r5, [r0, #0]
 80063e4:	600b      	str	r3, [r1, #0]
 80063e6:	bf18      	it	ne
 80063e8:	b22d      	sxthne	r5, r5
 80063ea:	e7ef      	b.n	80063cc <_printf_i+0xbc>
 80063ec:	680b      	ldr	r3, [r1, #0]
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	1d18      	adds	r0, r3, #4
 80063f2:	6008      	str	r0, [r1, #0]
 80063f4:	0628      	lsls	r0, r5, #24
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0xec>
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	e002      	b.n	8006402 <_printf_i+0xf2>
 80063fc:	0669      	lsls	r1, r5, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0xe8>
 8006400:	881d      	ldrh	r5, [r3, #0]
 8006402:	2f6f      	cmp	r7, #111	; 0x6f
 8006404:	bf0c      	ite	eq
 8006406:	2308      	moveq	r3, #8
 8006408:	230a      	movne	r3, #10
 800640a:	4852      	ldr	r0, [pc, #328]	; (8006554 <_printf_i+0x244>)
 800640c:	2100      	movs	r1, #0
 800640e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006412:	6866      	ldr	r6, [r4, #4]
 8006414:	2e00      	cmp	r6, #0
 8006416:	bfa8      	it	ge
 8006418:	6821      	ldrge	r1, [r4, #0]
 800641a:	60a6      	str	r6, [r4, #8]
 800641c:	bfa4      	itt	ge
 800641e:	f021 0104 	bicge.w	r1, r1, #4
 8006422:	6021      	strge	r1, [r4, #0]
 8006424:	b90d      	cbnz	r5, 800642a <_printf_i+0x11a>
 8006426:	2e00      	cmp	r6, #0
 8006428:	d04d      	beq.n	80064c6 <_printf_i+0x1b6>
 800642a:	4616      	mov	r6, r2
 800642c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006430:	fb03 5711 	mls	r7, r3, r1, r5
 8006434:	5dc7      	ldrb	r7, [r0, r7]
 8006436:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800643a:	462f      	mov	r7, r5
 800643c:	42bb      	cmp	r3, r7
 800643e:	460d      	mov	r5, r1
 8006440:	d9f4      	bls.n	800642c <_printf_i+0x11c>
 8006442:	2b08      	cmp	r3, #8
 8006444:	d10b      	bne.n	800645e <_printf_i+0x14e>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	07df      	lsls	r7, r3, #31
 800644a:	d508      	bpl.n	800645e <_printf_i+0x14e>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	6861      	ldr	r1, [r4, #4]
 8006450:	4299      	cmp	r1, r3
 8006452:	bfde      	ittt	le
 8006454:	2330      	movle	r3, #48	; 0x30
 8006456:	f806 3c01 	strble.w	r3, [r6, #-1]
 800645a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800645e:	1b92      	subs	r2, r2, r6
 8006460:	6122      	str	r2, [r4, #16]
 8006462:	464b      	mov	r3, r9
 8006464:	4621      	mov	r1, r4
 8006466:	4640      	mov	r0, r8
 8006468:	f8cd a000 	str.w	sl, [sp]
 800646c:	aa03      	add	r2, sp, #12
 800646e:	f7ff fedf 	bl	8006230 <_printf_common>
 8006472:	3001      	adds	r0, #1
 8006474:	d14c      	bne.n	8006510 <_printf_i+0x200>
 8006476:	f04f 30ff 	mov.w	r0, #4294967295
 800647a:	b004      	add	sp, #16
 800647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006480:	4834      	ldr	r0, [pc, #208]	; (8006554 <_printf_i+0x244>)
 8006482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006486:	680e      	ldr	r6, [r1, #0]
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	f856 5b04 	ldr.w	r5, [r6], #4
 800648e:	061f      	lsls	r7, r3, #24
 8006490:	600e      	str	r6, [r1, #0]
 8006492:	d514      	bpl.n	80064be <_printf_i+0x1ae>
 8006494:	07d9      	lsls	r1, r3, #31
 8006496:	bf44      	itt	mi
 8006498:	f043 0320 	orrmi.w	r3, r3, #32
 800649c:	6023      	strmi	r3, [r4, #0]
 800649e:	b91d      	cbnz	r5, 80064a8 <_printf_i+0x198>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	f023 0320 	bic.w	r3, r3, #32
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	2310      	movs	r3, #16
 80064aa:	e7af      	b.n	800640c <_printf_i+0xfc>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	f043 0320 	orr.w	r3, r3, #32
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	2378      	movs	r3, #120	; 0x78
 80064b6:	4828      	ldr	r0, [pc, #160]	; (8006558 <_printf_i+0x248>)
 80064b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064bc:	e7e3      	b.n	8006486 <_printf_i+0x176>
 80064be:	065e      	lsls	r6, r3, #25
 80064c0:	bf48      	it	mi
 80064c2:	b2ad      	uxthmi	r5, r5
 80064c4:	e7e6      	b.n	8006494 <_printf_i+0x184>
 80064c6:	4616      	mov	r6, r2
 80064c8:	e7bb      	b.n	8006442 <_printf_i+0x132>
 80064ca:	680b      	ldr	r3, [r1, #0]
 80064cc:	6826      	ldr	r6, [r4, #0]
 80064ce:	1d1d      	adds	r5, r3, #4
 80064d0:	6960      	ldr	r0, [r4, #20]
 80064d2:	600d      	str	r5, [r1, #0]
 80064d4:	0635      	lsls	r5, r6, #24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	d501      	bpl.n	80064de <_printf_i+0x1ce>
 80064da:	6018      	str	r0, [r3, #0]
 80064dc:	e002      	b.n	80064e4 <_printf_i+0x1d4>
 80064de:	0671      	lsls	r1, r6, #25
 80064e0:	d5fb      	bpl.n	80064da <_printf_i+0x1ca>
 80064e2:	8018      	strh	r0, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	4616      	mov	r6, r2
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	e7ba      	b.n	8006462 <_printf_i+0x152>
 80064ec:	680b      	ldr	r3, [r1, #0]
 80064ee:	1d1a      	adds	r2, r3, #4
 80064f0:	600a      	str	r2, [r1, #0]
 80064f2:	681e      	ldr	r6, [r3, #0]
 80064f4:	2100      	movs	r1, #0
 80064f6:	4630      	mov	r0, r6
 80064f8:	6862      	ldr	r2, [r4, #4]
 80064fa:	f000 fed7 	bl	80072ac <memchr>
 80064fe:	b108      	cbz	r0, 8006504 <_printf_i+0x1f4>
 8006500:	1b80      	subs	r0, r0, r6
 8006502:	6060      	str	r0, [r4, #4]
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	2300      	movs	r3, #0
 800650a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650e:	e7a8      	b.n	8006462 <_printf_i+0x152>
 8006510:	4632      	mov	r2, r6
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	47d0      	blx	sl
 800651a:	3001      	adds	r0, #1
 800651c:	d0ab      	beq.n	8006476 <_printf_i+0x166>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	079b      	lsls	r3, r3, #30
 8006522:	d413      	bmi.n	800654c <_printf_i+0x23c>
 8006524:	68e0      	ldr	r0, [r4, #12]
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	4298      	cmp	r0, r3
 800652a:	bfb8      	it	lt
 800652c:	4618      	movlt	r0, r3
 800652e:	e7a4      	b.n	800647a <_printf_i+0x16a>
 8006530:	2301      	movs	r3, #1
 8006532:	4632      	mov	r2, r6
 8006534:	4649      	mov	r1, r9
 8006536:	4640      	mov	r0, r8
 8006538:	47d0      	blx	sl
 800653a:	3001      	adds	r0, #1
 800653c:	d09b      	beq.n	8006476 <_printf_i+0x166>
 800653e:	3501      	adds	r5, #1
 8006540:	68e3      	ldr	r3, [r4, #12]
 8006542:	9903      	ldr	r1, [sp, #12]
 8006544:	1a5b      	subs	r3, r3, r1
 8006546:	42ab      	cmp	r3, r5
 8006548:	dcf2      	bgt.n	8006530 <_printf_i+0x220>
 800654a:	e7eb      	b.n	8006524 <_printf_i+0x214>
 800654c:	2500      	movs	r5, #0
 800654e:	f104 0619 	add.w	r6, r4, #25
 8006552:	e7f5      	b.n	8006540 <_printf_i+0x230>
 8006554:	0800904e 	.word	0x0800904e
 8006558:	0800905f 	.word	0x0800905f

0800655c <siprintf>:
 800655c:	b40e      	push	{r1, r2, r3}
 800655e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006562:	b500      	push	{lr}
 8006564:	b09c      	sub	sp, #112	; 0x70
 8006566:	ab1d      	add	r3, sp, #116	; 0x74
 8006568:	9002      	str	r0, [sp, #8]
 800656a:	9006      	str	r0, [sp, #24]
 800656c:	9107      	str	r1, [sp, #28]
 800656e:	9104      	str	r1, [sp, #16]
 8006570:	4808      	ldr	r0, [pc, #32]	; (8006594 <siprintf+0x38>)
 8006572:	4909      	ldr	r1, [pc, #36]	; (8006598 <siprintf+0x3c>)
 8006574:	f853 2b04 	ldr.w	r2, [r3], #4
 8006578:	9105      	str	r1, [sp, #20]
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	a902      	add	r1, sp, #8
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	f001 fb42 	bl	8007c08 <_svfiprintf_r>
 8006584:	2200      	movs	r2, #0
 8006586:	9b02      	ldr	r3, [sp, #8]
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	b01c      	add	sp, #112	; 0x70
 800658c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006590:	b003      	add	sp, #12
 8006592:	4770      	bx	lr
 8006594:	20000024 	.word	0x20000024
 8006598:	ffff0208 	.word	0xffff0208

0800659c <quorem>:
 800659c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	6903      	ldr	r3, [r0, #16]
 80065a2:	690c      	ldr	r4, [r1, #16]
 80065a4:	4607      	mov	r7, r0
 80065a6:	42a3      	cmp	r3, r4
 80065a8:	f2c0 8083 	blt.w	80066b2 <quorem+0x116>
 80065ac:	3c01      	subs	r4, #1
 80065ae:	f100 0514 	add.w	r5, r0, #20
 80065b2:	f101 0814 	add.w	r8, r1, #20
 80065b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065c4:	3301      	adds	r3, #1
 80065c6:	429a      	cmp	r2, r3
 80065c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80065cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065d4:	d332      	bcc.n	800663c <quorem+0xa0>
 80065d6:	f04f 0e00 	mov.w	lr, #0
 80065da:	4640      	mov	r0, r8
 80065dc:	46ac      	mov	ip, r5
 80065de:	46f2      	mov	sl, lr
 80065e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80065e4:	b293      	uxth	r3, r2
 80065e6:	fb06 e303 	mla	r3, r6, r3, lr
 80065ea:	0c12      	lsrs	r2, r2, #16
 80065ec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065f0:	fb06 e202 	mla	r2, r6, r2, lr
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ebaa 0303 	sub.w	r3, sl, r3
 80065fa:	f8dc a000 	ldr.w	sl, [ip]
 80065fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006602:	fa1f fa8a 	uxth.w	sl, sl
 8006606:	4453      	add	r3, sl
 8006608:	fa1f fa82 	uxth.w	sl, r2
 800660c:	f8dc 2000 	ldr.w	r2, [ip]
 8006610:	4581      	cmp	r9, r0
 8006612:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006616:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800661a:	b29b      	uxth	r3, r3
 800661c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006620:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006624:	f84c 3b04 	str.w	r3, [ip], #4
 8006628:	d2da      	bcs.n	80065e0 <quorem+0x44>
 800662a:	f855 300b 	ldr.w	r3, [r5, fp]
 800662e:	b92b      	cbnz	r3, 800663c <quorem+0xa0>
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	3b04      	subs	r3, #4
 8006634:	429d      	cmp	r5, r3
 8006636:	461a      	mov	r2, r3
 8006638:	d32f      	bcc.n	800669a <quorem+0xfe>
 800663a:	613c      	str	r4, [r7, #16]
 800663c:	4638      	mov	r0, r7
 800663e:	f001 f8cb 	bl	80077d8 <__mcmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	db25      	blt.n	8006692 <quorem+0xf6>
 8006646:	4628      	mov	r0, r5
 8006648:	f04f 0c00 	mov.w	ip, #0
 800664c:	3601      	adds	r6, #1
 800664e:	f858 1b04 	ldr.w	r1, [r8], #4
 8006652:	f8d0 e000 	ldr.w	lr, [r0]
 8006656:	b28b      	uxth	r3, r1
 8006658:	ebac 0303 	sub.w	r3, ip, r3
 800665c:	fa1f f28e 	uxth.w	r2, lr
 8006660:	4413      	add	r3, r2
 8006662:	0c0a      	lsrs	r2, r1, #16
 8006664:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800666c:	b29b      	uxth	r3, r3
 800666e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006672:	45c1      	cmp	r9, r8
 8006674:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006678:	f840 3b04 	str.w	r3, [r0], #4
 800667c:	d2e7      	bcs.n	800664e <quorem+0xb2>
 800667e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006686:	b922      	cbnz	r2, 8006692 <quorem+0xf6>
 8006688:	3b04      	subs	r3, #4
 800668a:	429d      	cmp	r5, r3
 800668c:	461a      	mov	r2, r3
 800668e:	d30a      	bcc.n	80066a6 <quorem+0x10a>
 8006690:	613c      	str	r4, [r7, #16]
 8006692:	4630      	mov	r0, r6
 8006694:	b003      	add	sp, #12
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	3b04      	subs	r3, #4
 800669e:	2a00      	cmp	r2, #0
 80066a0:	d1cb      	bne.n	800663a <quorem+0x9e>
 80066a2:	3c01      	subs	r4, #1
 80066a4:	e7c6      	b.n	8006634 <quorem+0x98>
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	3b04      	subs	r3, #4
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	d1f0      	bne.n	8006690 <quorem+0xf4>
 80066ae:	3c01      	subs	r4, #1
 80066b0:	e7eb      	b.n	800668a <quorem+0xee>
 80066b2:	2000      	movs	r0, #0
 80066b4:	e7ee      	b.n	8006694 <quorem+0xf8>
	...

080066b8 <_dtoa_r>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	4616      	mov	r6, r2
 80066be:	461f      	mov	r7, r3
 80066c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80066c2:	b099      	sub	sp, #100	; 0x64
 80066c4:	4605      	mov	r5, r0
 80066c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80066ce:	b974      	cbnz	r4, 80066ee <_dtoa_r+0x36>
 80066d0:	2010      	movs	r0, #16
 80066d2:	f000 fde3 	bl	800729c <malloc>
 80066d6:	4602      	mov	r2, r0
 80066d8:	6268      	str	r0, [r5, #36]	; 0x24
 80066da:	b920      	cbnz	r0, 80066e6 <_dtoa_r+0x2e>
 80066dc:	21ea      	movs	r1, #234	; 0xea
 80066de:	4bae      	ldr	r3, [pc, #696]	; (8006998 <_dtoa_r+0x2e0>)
 80066e0:	48ae      	ldr	r0, [pc, #696]	; (800699c <_dtoa_r+0x2e4>)
 80066e2:	f001 fba1 	bl	8007e28 <__assert_func>
 80066e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066ea:	6004      	str	r4, [r0, #0]
 80066ec:	60c4      	str	r4, [r0, #12]
 80066ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066f0:	6819      	ldr	r1, [r3, #0]
 80066f2:	b151      	cbz	r1, 800670a <_dtoa_r+0x52>
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	2301      	movs	r3, #1
 80066f8:	4093      	lsls	r3, r2
 80066fa:	604a      	str	r2, [r1, #4]
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 fe30 	bl	8007364 <_Bfree>
 8006704:	2200      	movs	r2, #0
 8006706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	1e3b      	subs	r3, r7, #0
 800670c:	bfaf      	iteee	ge
 800670e:	2300      	movge	r3, #0
 8006710:	2201      	movlt	r2, #1
 8006712:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006716:	9305      	strlt	r3, [sp, #20]
 8006718:	bfa8      	it	ge
 800671a:	f8c8 3000 	strge.w	r3, [r8]
 800671e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006722:	4b9f      	ldr	r3, [pc, #636]	; (80069a0 <_dtoa_r+0x2e8>)
 8006724:	bfb8      	it	lt
 8006726:	f8c8 2000 	strlt.w	r2, [r8]
 800672a:	ea33 0309 	bics.w	r3, r3, r9
 800672e:	d119      	bne.n	8006764 <_dtoa_r+0xac>
 8006730:	f242 730f 	movw	r3, #9999	; 0x270f
 8006734:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800673c:	4333      	orrs	r3, r6
 800673e:	f000 8580 	beq.w	8007242 <_dtoa_r+0xb8a>
 8006742:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006744:	b953      	cbnz	r3, 800675c <_dtoa_r+0xa4>
 8006746:	4b97      	ldr	r3, [pc, #604]	; (80069a4 <_dtoa_r+0x2ec>)
 8006748:	e022      	b.n	8006790 <_dtoa_r+0xd8>
 800674a:	4b97      	ldr	r3, [pc, #604]	; (80069a8 <_dtoa_r+0x2f0>)
 800674c:	9308      	str	r3, [sp, #32]
 800674e:	3308      	adds	r3, #8
 8006750:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	9808      	ldr	r0, [sp, #32]
 8006756:	b019      	add	sp, #100	; 0x64
 8006758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675c:	4b91      	ldr	r3, [pc, #580]	; (80069a4 <_dtoa_r+0x2ec>)
 800675e:	9308      	str	r3, [sp, #32]
 8006760:	3303      	adds	r3, #3
 8006762:	e7f5      	b.n	8006750 <_dtoa_r+0x98>
 8006764:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006768:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800676c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006770:	2200      	movs	r2, #0
 8006772:	2300      	movs	r3, #0
 8006774:	f7fa f918 	bl	80009a8 <__aeabi_dcmpeq>
 8006778:	4680      	mov	r8, r0
 800677a:	b158      	cbz	r0, 8006794 <_dtoa_r+0xdc>
 800677c:	2301      	movs	r3, #1
 800677e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8559 	beq.w	800723c <_dtoa_r+0xb84>
 800678a:	4888      	ldr	r0, [pc, #544]	; (80069ac <_dtoa_r+0x2f4>)
 800678c:	6018      	str	r0, [r3, #0]
 800678e:	1e43      	subs	r3, r0, #1
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	e7df      	b.n	8006754 <_dtoa_r+0x9c>
 8006794:	ab16      	add	r3, sp, #88	; 0x58
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	ab17      	add	r3, sp, #92	; 0x5c
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4628      	mov	r0, r5
 800679e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067a2:	f001 f8c5 	bl	8007930 <__d2b>
 80067a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80067aa:	4682      	mov	sl, r0
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	d07e      	beq.n	80068ae <_dtoa_r+0x1f6>
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80067ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80067c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80067c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80067ca:	2200      	movs	r2, #0
 80067cc:	4b78      	ldr	r3, [pc, #480]	; (80069b0 <_dtoa_r+0x2f8>)
 80067ce:	f7f9 fccb 	bl	8000168 <__aeabi_dsub>
 80067d2:	a36b      	add	r3, pc, #428	; (adr r3, 8006980 <_dtoa_r+0x2c8>)
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f7f9 fe7e 	bl	80004d8 <__aeabi_dmul>
 80067dc:	a36a      	add	r3, pc, #424	; (adr r3, 8006988 <_dtoa_r+0x2d0>)
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f7f9 fcc3 	bl	800016c <__adddf3>
 80067e6:	4606      	mov	r6, r0
 80067e8:	4620      	mov	r0, r4
 80067ea:	460f      	mov	r7, r1
 80067ec:	f7f9 fe0a 	bl	8000404 <__aeabi_i2d>
 80067f0:	a367      	add	r3, pc, #412	; (adr r3, 8006990 <_dtoa_r+0x2d8>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 fe6f 	bl	80004d8 <__aeabi_dmul>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4630      	mov	r0, r6
 8006800:	4639      	mov	r1, r7
 8006802:	f7f9 fcb3 	bl	800016c <__adddf3>
 8006806:	4606      	mov	r6, r0
 8006808:	460f      	mov	r7, r1
 800680a:	f7fa f915 	bl	8000a38 <__aeabi_d2iz>
 800680e:	2200      	movs	r2, #0
 8006810:	4681      	mov	r9, r0
 8006812:	2300      	movs	r3, #0
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7fa f8d0 	bl	80009bc <__aeabi_dcmplt>
 800681c:	b148      	cbz	r0, 8006832 <_dtoa_r+0x17a>
 800681e:	4648      	mov	r0, r9
 8006820:	f7f9 fdf0 	bl	8000404 <__aeabi_i2d>
 8006824:	4632      	mov	r2, r6
 8006826:	463b      	mov	r3, r7
 8006828:	f7fa f8be 	bl	80009a8 <__aeabi_dcmpeq>
 800682c:	b908      	cbnz	r0, 8006832 <_dtoa_r+0x17a>
 800682e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006832:	f1b9 0f16 	cmp.w	r9, #22
 8006836:	d857      	bhi.n	80068e8 <_dtoa_r+0x230>
 8006838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800683c:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <_dtoa_r+0x2fc>)
 800683e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7fa f8b9 	bl	80009bc <__aeabi_dcmplt>
 800684a:	2800      	cmp	r0, #0
 800684c:	d04e      	beq.n	80068ec <_dtoa_r+0x234>
 800684e:	2300      	movs	r3, #0
 8006850:	f109 39ff 	add.w	r9, r9, #4294967295
 8006854:	930f      	str	r3, [sp, #60]	; 0x3c
 8006856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006858:	1b1c      	subs	r4, r3, r4
 800685a:	1e63      	subs	r3, r4, #1
 800685c:	9309      	str	r3, [sp, #36]	; 0x24
 800685e:	bf49      	itett	mi
 8006860:	f1c4 0301 	rsbmi	r3, r4, #1
 8006864:	2300      	movpl	r3, #0
 8006866:	9306      	strmi	r3, [sp, #24]
 8006868:	2300      	movmi	r3, #0
 800686a:	bf54      	ite	pl
 800686c:	9306      	strpl	r3, [sp, #24]
 800686e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006870:	f1b9 0f00 	cmp.w	r9, #0
 8006874:	db3c      	blt.n	80068f0 <_dtoa_r+0x238>
 8006876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006878:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800687c:	444b      	add	r3, r9
 800687e:	9309      	str	r3, [sp, #36]	; 0x24
 8006880:	2300      	movs	r3, #0
 8006882:	930a      	str	r3, [sp, #40]	; 0x28
 8006884:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006886:	2b09      	cmp	r3, #9
 8006888:	d86c      	bhi.n	8006964 <_dtoa_r+0x2ac>
 800688a:	2b05      	cmp	r3, #5
 800688c:	bfc4      	itt	gt
 800688e:	3b04      	subgt	r3, #4
 8006890:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006894:	bfc8      	it	gt
 8006896:	2400      	movgt	r4, #0
 8006898:	f1a3 0302 	sub.w	r3, r3, #2
 800689c:	bfd8      	it	le
 800689e:	2401      	movle	r4, #1
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	f200 808b 	bhi.w	80069bc <_dtoa_r+0x304>
 80068a6:	e8df f003 	tbb	[pc, r3]
 80068aa:	4f2d      	.short	0x4f2d
 80068ac:	5b4d      	.short	0x5b4d
 80068ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80068b2:	441c      	add	r4, r3
 80068b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	bfc3      	ittte	gt
 80068bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80068c4:	fa09 f303 	lslgt.w	r3, r9, r3
 80068c8:	f1c3 0320 	rsble	r3, r3, #32
 80068cc:	bfc6      	itte	gt
 80068ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068d2:	4318      	orrgt	r0, r3
 80068d4:	fa06 f003 	lslle.w	r0, r6, r3
 80068d8:	f7f9 fd84 	bl	80003e4 <__aeabi_ui2d>
 80068dc:	2301      	movs	r3, #1
 80068de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80068e2:	3c01      	subs	r4, #1
 80068e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80068e6:	e770      	b.n	80067ca <_dtoa_r+0x112>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e7b3      	b.n	8006854 <_dtoa_r+0x19c>
 80068ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80068ee:	e7b2      	b.n	8006856 <_dtoa_r+0x19e>
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	eba3 0309 	sub.w	r3, r3, r9
 80068f6:	9306      	str	r3, [sp, #24]
 80068f8:	f1c9 0300 	rsb	r3, r9, #0
 80068fc:	930a      	str	r3, [sp, #40]	; 0x28
 80068fe:	2300      	movs	r3, #0
 8006900:	930e      	str	r3, [sp, #56]	; 0x38
 8006902:	e7bf      	b.n	8006884 <_dtoa_r+0x1cc>
 8006904:	2300      	movs	r3, #0
 8006906:	930b      	str	r3, [sp, #44]	; 0x2c
 8006908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800690a:	2b00      	cmp	r3, #0
 800690c:	dc59      	bgt.n	80069c2 <_dtoa_r+0x30a>
 800690e:	f04f 0b01 	mov.w	fp, #1
 8006912:	465b      	mov	r3, fp
 8006914:	f8cd b008 	str.w	fp, [sp, #8]
 8006918:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800691c:	2200      	movs	r2, #0
 800691e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006920:	6042      	str	r2, [r0, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	f102 0614 	add.w	r6, r2, #20
 8006928:	429e      	cmp	r6, r3
 800692a:	6841      	ldr	r1, [r0, #4]
 800692c:	d94f      	bls.n	80069ce <_dtoa_r+0x316>
 800692e:	4628      	mov	r0, r5
 8006930:	f000 fcd8 	bl	80072e4 <_Balloc>
 8006934:	9008      	str	r0, [sp, #32]
 8006936:	2800      	cmp	r0, #0
 8006938:	d14d      	bne.n	80069d6 <_dtoa_r+0x31e>
 800693a:	4602      	mov	r2, r0
 800693c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006940:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <_dtoa_r+0x300>)
 8006942:	e6cd      	b.n	80066e0 <_dtoa_r+0x28>
 8006944:	2301      	movs	r3, #1
 8006946:	e7de      	b.n	8006906 <_dtoa_r+0x24e>
 8006948:	2300      	movs	r3, #0
 800694a:	930b      	str	r3, [sp, #44]	; 0x2c
 800694c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800694e:	eb09 0b03 	add.w	fp, r9, r3
 8006952:	f10b 0301 	add.w	r3, fp, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	9302      	str	r3, [sp, #8]
 800695a:	bfb8      	it	lt
 800695c:	2301      	movlt	r3, #1
 800695e:	e7dd      	b.n	800691c <_dtoa_r+0x264>
 8006960:	2301      	movs	r3, #1
 8006962:	e7f2      	b.n	800694a <_dtoa_r+0x292>
 8006964:	2401      	movs	r4, #1
 8006966:	2300      	movs	r3, #0
 8006968:	940b      	str	r4, [sp, #44]	; 0x2c
 800696a:	9322      	str	r3, [sp, #136]	; 0x88
 800696c:	f04f 3bff 	mov.w	fp, #4294967295
 8006970:	2200      	movs	r2, #0
 8006972:	2312      	movs	r3, #18
 8006974:	f8cd b008 	str.w	fp, [sp, #8]
 8006978:	9223      	str	r2, [sp, #140]	; 0x8c
 800697a:	e7cf      	b.n	800691c <_dtoa_r+0x264>
 800697c:	f3af 8000 	nop.w
 8006980:	636f4361 	.word	0x636f4361
 8006984:	3fd287a7 	.word	0x3fd287a7
 8006988:	8b60c8b3 	.word	0x8b60c8b3
 800698c:	3fc68a28 	.word	0x3fc68a28
 8006990:	509f79fb 	.word	0x509f79fb
 8006994:	3fd34413 	.word	0x3fd34413
 8006998:	0800907d 	.word	0x0800907d
 800699c:	08009094 	.word	0x08009094
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	08009079 	.word	0x08009079
 80069a8:	08009070 	.word	0x08009070
 80069ac:	0800904d 	.word	0x0800904d
 80069b0:	3ff80000 	.word	0x3ff80000
 80069b4:	08009190 	.word	0x08009190
 80069b8:	080090f3 	.word	0x080090f3
 80069bc:	2301      	movs	r3, #1
 80069be:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c0:	e7d4      	b.n	800696c <_dtoa_r+0x2b4>
 80069c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80069c6:	465b      	mov	r3, fp
 80069c8:	f8cd b008 	str.w	fp, [sp, #8]
 80069cc:	e7a6      	b.n	800691c <_dtoa_r+0x264>
 80069ce:	3101      	adds	r1, #1
 80069d0:	6041      	str	r1, [r0, #4]
 80069d2:	0052      	lsls	r2, r2, #1
 80069d4:	e7a6      	b.n	8006924 <_dtoa_r+0x26c>
 80069d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069d8:	9a08      	ldr	r2, [sp, #32]
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	2b0e      	cmp	r3, #14
 80069e0:	f200 80a8 	bhi.w	8006b34 <_dtoa_r+0x47c>
 80069e4:	2c00      	cmp	r4, #0
 80069e6:	f000 80a5 	beq.w	8006b34 <_dtoa_r+0x47c>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	dd34      	ble.n	8006a5a <_dtoa_r+0x3a2>
 80069f0:	4a9a      	ldr	r2, [pc, #616]	; (8006c5c <_dtoa_r+0x5a4>)
 80069f2:	f009 030f 	and.w	r3, r9, #15
 80069f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80069fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a06:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006a0a:	d016      	beq.n	8006a3a <_dtoa_r+0x382>
 8006a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a10:	4b93      	ldr	r3, [pc, #588]	; (8006c60 <_dtoa_r+0x5a8>)
 8006a12:	2703      	movs	r7, #3
 8006a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a18:	f7f9 fe88 	bl	800072c <__aeabi_ddiv>
 8006a1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a20:	f004 040f 	and.w	r4, r4, #15
 8006a24:	4e8e      	ldr	r6, [pc, #568]	; (8006c60 <_dtoa_r+0x5a8>)
 8006a26:	b954      	cbnz	r4, 8006a3e <_dtoa_r+0x386>
 8006a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a30:	f7f9 fe7c 	bl	800072c <__aeabi_ddiv>
 8006a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a38:	e029      	b.n	8006a8e <_dtoa_r+0x3d6>
 8006a3a:	2702      	movs	r7, #2
 8006a3c:	e7f2      	b.n	8006a24 <_dtoa_r+0x36c>
 8006a3e:	07e1      	lsls	r1, r4, #31
 8006a40:	d508      	bpl.n	8006a54 <_dtoa_r+0x39c>
 8006a42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a4a:	f7f9 fd45 	bl	80004d8 <__aeabi_dmul>
 8006a4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a52:	3701      	adds	r7, #1
 8006a54:	1064      	asrs	r4, r4, #1
 8006a56:	3608      	adds	r6, #8
 8006a58:	e7e5      	b.n	8006a26 <_dtoa_r+0x36e>
 8006a5a:	f000 80a5 	beq.w	8006ba8 <_dtoa_r+0x4f0>
 8006a5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a62:	f1c9 0400 	rsb	r4, r9, #0
 8006a66:	4b7d      	ldr	r3, [pc, #500]	; (8006c5c <_dtoa_r+0x5a4>)
 8006a68:	f004 020f 	and.w	r2, r4, #15
 8006a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fd30 	bl	80004d8 <__aeabi_dmul>
 8006a78:	2702      	movs	r7, #2
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a80:	4e77      	ldr	r6, [pc, #476]	; (8006c60 <_dtoa_r+0x5a8>)
 8006a82:	1124      	asrs	r4, r4, #4
 8006a84:	2c00      	cmp	r4, #0
 8006a86:	f040 8084 	bne.w	8006b92 <_dtoa_r+0x4da>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1d2      	bne.n	8006a34 <_dtoa_r+0x37c>
 8006a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 808b 	beq.w	8006bac <_dtoa_r+0x4f4>
 8006a96:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	4b6f      	ldr	r3, [pc, #444]	; (8006c64 <_dtoa_r+0x5ac>)
 8006aa6:	f7f9 ff89 	bl	80009bc <__aeabi_dcmplt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d07e      	beq.n	8006bac <_dtoa_r+0x4f4>
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d07b      	beq.n	8006bac <_dtoa_r+0x4f4>
 8006ab4:	f1bb 0f00 	cmp.w	fp, #0
 8006ab8:	dd38      	ble.n	8006b2c <_dtoa_r+0x474>
 8006aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4b69      	ldr	r3, [pc, #420]	; (8006c68 <_dtoa_r+0x5b0>)
 8006ac2:	f7f9 fd09 	bl	80004d8 <__aeabi_dmul>
 8006ac6:	465c      	mov	r4, fp
 8006ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006acc:	f109 38ff 	add.w	r8, r9, #4294967295
 8006ad0:	3701      	adds	r7, #1
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7f9 fc96 	bl	8000404 <__aeabi_i2d>
 8006ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006adc:	f7f9 fcfc 	bl	80004d8 <__aeabi_dmul>
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4b62      	ldr	r3, [pc, #392]	; (8006c6c <_dtoa_r+0x5b4>)
 8006ae4:	f7f9 fb42 	bl	800016c <__adddf3>
 8006ae8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006aec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006af0:	9611      	str	r6, [sp, #68]	; 0x44
 8006af2:	2c00      	cmp	r4, #0
 8006af4:	d15d      	bne.n	8006bb2 <_dtoa_r+0x4fa>
 8006af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006afa:	2200      	movs	r2, #0
 8006afc:	4b5c      	ldr	r3, [pc, #368]	; (8006c70 <_dtoa_r+0x5b8>)
 8006afe:	f7f9 fb33 	bl	8000168 <__aeabi_dsub>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b0a:	4633      	mov	r3, r6
 8006b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b0e:	f7f9 ff73 	bl	80009f8 <__aeabi_dcmpgt>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f040 829e 	bne.w	8007054 <_dtoa_r+0x99c>
 8006b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b1e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b22:	f7f9 ff4b 	bl	80009bc <__aeabi_dcmplt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f040 8292 	bne.w	8007050 <_dtoa_r+0x998>
 8006b2c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006b30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f2c0 8153 	blt.w	8006de2 <_dtoa_r+0x72a>
 8006b3c:	f1b9 0f0e 	cmp.w	r9, #14
 8006b40:	f300 814f 	bgt.w	8006de2 <_dtoa_r+0x72a>
 8006b44:	4b45      	ldr	r3, [pc, #276]	; (8006c5c <_dtoa_r+0x5a4>)
 8006b46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b4e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f280 80db 	bge.w	8006d10 <_dtoa_r+0x658>
 8006b5a:	9b02      	ldr	r3, [sp, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f300 80d7 	bgt.w	8006d10 <_dtoa_r+0x658>
 8006b62:	f040 8274 	bne.w	800704e <_dtoa_r+0x996>
 8006b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <_dtoa_r+0x5b8>)
 8006b6e:	f7f9 fcb3 	bl	80004d8 <__aeabi_dmul>
 8006b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b76:	f7f9 ff35 	bl	80009e4 <__aeabi_dcmpge>
 8006b7a:	9c02      	ldr	r4, [sp, #8]
 8006b7c:	4626      	mov	r6, r4
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	f040 824a 	bne.w	8007018 <_dtoa_r+0x960>
 8006b84:	2331      	movs	r3, #49	; 0x31
 8006b86:	9f08      	ldr	r7, [sp, #32]
 8006b88:	f109 0901 	add.w	r9, r9, #1
 8006b8c:	f807 3b01 	strb.w	r3, [r7], #1
 8006b90:	e246      	b.n	8007020 <_dtoa_r+0x968>
 8006b92:	07e2      	lsls	r2, r4, #31
 8006b94:	d505      	bpl.n	8006ba2 <_dtoa_r+0x4ea>
 8006b96:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b9a:	f7f9 fc9d 	bl	80004d8 <__aeabi_dmul>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	3701      	adds	r7, #1
 8006ba2:	1064      	asrs	r4, r4, #1
 8006ba4:	3608      	adds	r6, #8
 8006ba6:	e76d      	b.n	8006a84 <_dtoa_r+0x3cc>
 8006ba8:	2702      	movs	r7, #2
 8006baa:	e770      	b.n	8006a8e <_dtoa_r+0x3d6>
 8006bac:	46c8      	mov	r8, r9
 8006bae:	9c02      	ldr	r4, [sp, #8]
 8006bb0:	e78f      	b.n	8006ad2 <_dtoa_r+0x41a>
 8006bb2:	9908      	ldr	r1, [sp, #32]
 8006bb4:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <_dtoa_r+0x5a4>)
 8006bb6:	4421      	add	r1, r4
 8006bb8:	9112      	str	r1, [sp, #72]	; 0x48
 8006bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bc0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006bc4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	d055      	beq.n	8006c78 <_dtoa_r+0x5c0>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	4929      	ldr	r1, [pc, #164]	; (8006c74 <_dtoa_r+0x5bc>)
 8006bd0:	f7f9 fdac 	bl	800072c <__aeabi_ddiv>
 8006bd4:	463b      	mov	r3, r7
 8006bd6:	4632      	mov	r2, r6
 8006bd8:	f7f9 fac6 	bl	8000168 <__aeabi_dsub>
 8006bdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006be0:	9f08      	ldr	r7, [sp, #32]
 8006be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be6:	f7f9 ff27 	bl	8000a38 <__aeabi_d2iz>
 8006bea:	4604      	mov	r4, r0
 8006bec:	f7f9 fc0a 	bl	8000404 <__aeabi_i2d>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf8:	f7f9 fab6 	bl	8000168 <__aeabi_dsub>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	3430      	adds	r4, #48	; 0x30
 8006c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c0a:	f807 4b01 	strb.w	r4, [r7], #1
 8006c0e:	f7f9 fed5 	bl	80009bc <__aeabi_dcmplt>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d174      	bne.n	8006d00 <_dtoa_r+0x648>
 8006c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	4911      	ldr	r1, [pc, #68]	; (8006c64 <_dtoa_r+0x5ac>)
 8006c1e:	f7f9 faa3 	bl	8000168 <__aeabi_dsub>
 8006c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c26:	f7f9 fec9 	bl	80009bc <__aeabi_dcmplt>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f040 80b6 	bne.w	8006d9c <_dtoa_r+0x6e4>
 8006c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c32:	429f      	cmp	r7, r3
 8006c34:	f43f af7a 	beq.w	8006b2c <_dtoa_r+0x474>
 8006c38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <_dtoa_r+0x5b0>)
 8006c40:	f7f9 fc4a 	bl	80004d8 <__aeabi_dmul>
 8006c44:	2200      	movs	r2, #0
 8006c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <_dtoa_r+0x5b0>)
 8006c50:	f7f9 fc42 	bl	80004d8 <__aeabi_dmul>
 8006c54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c58:	e7c3      	b.n	8006be2 <_dtoa_r+0x52a>
 8006c5a:	bf00      	nop
 8006c5c:	08009190 	.word	0x08009190
 8006c60:	08009168 	.word	0x08009168
 8006c64:	3ff00000 	.word	0x3ff00000
 8006c68:	40240000 	.word	0x40240000
 8006c6c:	401c0000 	.word	0x401c0000
 8006c70:	40140000 	.word	0x40140000
 8006c74:	3fe00000 	.word	0x3fe00000
 8006c78:	4630      	mov	r0, r6
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c86:	9c08      	ldr	r4, [sp, #32]
 8006c88:	9314      	str	r3, [sp, #80]	; 0x50
 8006c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c8e:	f7f9 fed3 	bl	8000a38 <__aeabi_d2iz>
 8006c92:	9015      	str	r0, [sp, #84]	; 0x54
 8006c94:	f7f9 fbb6 	bl	8000404 <__aeabi_i2d>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca0:	f7f9 fa62 	bl	8000168 <__aeabi_dsub>
 8006ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	3330      	adds	r3, #48	; 0x30
 8006caa:	f804 3b01 	strb.w	r3, [r4], #1
 8006cae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	429c      	cmp	r4, r3
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	d124      	bne.n	8006d04 <_dtoa_r+0x64c>
 8006cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cbe:	4bb3      	ldr	r3, [pc, #716]	; (8006f8c <_dtoa_r+0x8d4>)
 8006cc0:	f7f9 fa54 	bl	800016c <__adddf3>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 fe94 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d162      	bne.n	8006d9a <_dtoa_r+0x6e2>
 8006cd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cd8:	2000      	movs	r0, #0
 8006cda:	49ac      	ldr	r1, [pc, #688]	; (8006f8c <_dtoa_r+0x8d4>)
 8006cdc:	f7f9 fa44 	bl	8000168 <__aeabi_dsub>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fe68 	bl	80009bc <__aeabi_dcmplt>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f43f af1d 	beq.w	8006b2c <_dtoa_r+0x474>
 8006cf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006cf4:	1e7b      	subs	r3, r7, #1
 8006cf6:	9314      	str	r3, [sp, #80]	; 0x50
 8006cf8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006cfc:	2b30      	cmp	r3, #48	; 0x30
 8006cfe:	d0f8      	beq.n	8006cf2 <_dtoa_r+0x63a>
 8006d00:	46c1      	mov	r9, r8
 8006d02:	e03a      	b.n	8006d7a <_dtoa_r+0x6c2>
 8006d04:	4ba2      	ldr	r3, [pc, #648]	; (8006f90 <_dtoa_r+0x8d8>)
 8006d06:	f7f9 fbe7 	bl	80004d8 <__aeabi_dmul>
 8006d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d0e:	e7bc      	b.n	8006c8a <_dtoa_r+0x5d2>
 8006d10:	9f08      	ldr	r7, [sp, #32]
 8006d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d1a:	f7f9 fd07 	bl	800072c <__aeabi_ddiv>
 8006d1e:	f7f9 fe8b 	bl	8000a38 <__aeabi_d2iz>
 8006d22:	4604      	mov	r4, r0
 8006d24:	f7f9 fb6e 	bl	8000404 <__aeabi_i2d>
 8006d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d2c:	f7f9 fbd4 	bl	80004d8 <__aeabi_dmul>
 8006d30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006d34:	460b      	mov	r3, r1
 8006d36:	4602      	mov	r2, r0
 8006d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d3c:	f7f9 fa14 	bl	8000168 <__aeabi_dsub>
 8006d40:	f807 6b01 	strb.w	r6, [r7], #1
 8006d44:	9e08      	ldr	r6, [sp, #32]
 8006d46:	9b02      	ldr	r3, [sp, #8]
 8006d48:	1bbe      	subs	r6, r7, r6
 8006d4a:	42b3      	cmp	r3, r6
 8006d4c:	d13a      	bne.n	8006dc4 <_dtoa_r+0x70c>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	f7f9 fa0b 	bl	800016c <__adddf3>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d62:	f7f9 fe49 	bl	80009f8 <__aeabi_dcmpgt>
 8006d66:	bb58      	cbnz	r0, 8006dc0 <_dtoa_r+0x708>
 8006d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d70:	f7f9 fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006d74:	b108      	cbz	r0, 8006d7a <_dtoa_r+0x6c2>
 8006d76:	07e1      	lsls	r1, r4, #31
 8006d78:	d422      	bmi.n	8006dc0 <_dtoa_r+0x708>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	4651      	mov	r1, sl
 8006d7e:	f000 faf1 	bl	8007364 <_Bfree>
 8006d82:	2300      	movs	r3, #0
 8006d84:	703b      	strb	r3, [r7, #0]
 8006d86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d88:	f109 0001 	add.w	r0, r9, #1
 8006d8c:	6018      	str	r0, [r3, #0]
 8006d8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f43f acdf 	beq.w	8006754 <_dtoa_r+0x9c>
 8006d96:	601f      	str	r7, [r3, #0]
 8006d98:	e4dc      	b.n	8006754 <_dtoa_r+0x9c>
 8006d9a:	4627      	mov	r7, r4
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	461f      	mov	r7, r3
 8006da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006da4:	2a39      	cmp	r2, #57	; 0x39
 8006da6:	d107      	bne.n	8006db8 <_dtoa_r+0x700>
 8006da8:	9a08      	ldr	r2, [sp, #32]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d1f7      	bne.n	8006d9e <_dtoa_r+0x6e6>
 8006dae:	2230      	movs	r2, #48	; 0x30
 8006db0:	9908      	ldr	r1, [sp, #32]
 8006db2:	f108 0801 	add.w	r8, r8, #1
 8006db6:	700a      	strb	r2, [r1, #0]
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	3201      	adds	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e79f      	b.n	8006d00 <_dtoa_r+0x648>
 8006dc0:	46c8      	mov	r8, r9
 8006dc2:	e7eb      	b.n	8006d9c <_dtoa_r+0x6e4>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4b72      	ldr	r3, [pc, #456]	; (8006f90 <_dtoa_r+0x8d8>)
 8006dc8:	f7f9 fb86 	bl	80004d8 <__aeabi_dmul>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f7f9 fde6 	bl	80009a8 <__aeabi_dcmpeq>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d098      	beq.n	8006d12 <_dtoa_r+0x65a>
 8006de0:	e7cb      	b.n	8006d7a <_dtoa_r+0x6c2>
 8006de2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	f000 80cd 	beq.w	8006f84 <_dtoa_r+0x8cc>
 8006dea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006dec:	2a01      	cmp	r2, #1
 8006dee:	f300 80af 	bgt.w	8006f50 <_dtoa_r+0x898>
 8006df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006df4:	2a00      	cmp	r2, #0
 8006df6:	f000 80a7 	beq.w	8006f48 <_dtoa_r+0x890>
 8006dfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e00:	9f06      	ldr	r7, [sp, #24]
 8006e02:	9a06      	ldr	r2, [sp, #24]
 8006e04:	2101      	movs	r1, #1
 8006e06:	441a      	add	r2, r3
 8006e08:	9206      	str	r2, [sp, #24]
 8006e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	441a      	add	r2, r3
 8006e10:	9209      	str	r2, [sp, #36]	; 0x24
 8006e12:	f000 fb61 	bl	80074d8 <__i2b>
 8006e16:	4606      	mov	r6, r0
 8006e18:	2f00      	cmp	r7, #0
 8006e1a:	dd0c      	ble.n	8006e36 <_dtoa_r+0x77e>
 8006e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dd09      	ble.n	8006e36 <_dtoa_r+0x77e>
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	bfa8      	it	ge
 8006e26:	463b      	movge	r3, r7
 8006e28:	9a06      	ldr	r2, [sp, #24]
 8006e2a:	1aff      	subs	r7, r7, r3
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	9206      	str	r2, [sp, #24]
 8006e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	9309      	str	r3, [sp, #36]	; 0x24
 8006e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e38:	b1f3      	cbz	r3, 8006e78 <_dtoa_r+0x7c0>
 8006e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80a9 	beq.w	8006f94 <_dtoa_r+0x8dc>
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	dd10      	ble.n	8006e68 <_dtoa_r+0x7b0>
 8006e46:	4631      	mov	r1, r6
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 fbfe 	bl	800764c <__pow5mult>
 8006e50:	4652      	mov	r2, sl
 8006e52:	4601      	mov	r1, r0
 8006e54:	4606      	mov	r6, r0
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 fb54 	bl	8007504 <__multiply>
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	4651      	mov	r1, sl
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 fa7f 	bl	8007364 <_Bfree>
 8006e66:	46c2      	mov	sl, r8
 8006e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6a:	1b1a      	subs	r2, r3, r4
 8006e6c:	d004      	beq.n	8006e78 <_dtoa_r+0x7c0>
 8006e6e:	4651      	mov	r1, sl
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 fbeb 	bl	800764c <__pow5mult>
 8006e76:	4682      	mov	sl, r0
 8006e78:	2101      	movs	r1, #1
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 fb2c 	bl	80074d8 <__i2b>
 8006e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e82:	4604      	mov	r4, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f340 8087 	ble.w	8006f98 <_dtoa_r+0x8e0>
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	4601      	mov	r1, r0
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 fbdc 	bl	800764c <__pow5mult>
 8006e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e96:	4604      	mov	r4, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	f340 8080 	ble.w	8006f9e <_dtoa_r+0x8e6>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ea8:	6918      	ldr	r0, [r3, #16]
 8006eaa:	f000 fac7 	bl	800743c <__hi0bits>
 8006eae:	f1c0 0020 	rsb	r0, r0, #32
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	4418      	add	r0, r3
 8006eb6:	f010 001f 	ands.w	r0, r0, #31
 8006eba:	f000 8092 	beq.w	8006fe2 <_dtoa_r+0x92a>
 8006ebe:	f1c0 0320 	rsb	r3, r0, #32
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	f340 808a 	ble.w	8006fdc <_dtoa_r+0x924>
 8006ec8:	f1c0 001c 	rsb	r0, r0, #28
 8006ecc:	9b06      	ldr	r3, [sp, #24]
 8006ece:	4407      	add	r7, r0
 8006ed0:	4403      	add	r3, r0
 8006ed2:	9306      	str	r3, [sp, #24]
 8006ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed6:	4403      	add	r3, r0
 8006ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eda:	9b06      	ldr	r3, [sp, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd05      	ble.n	8006eec <_dtoa_r+0x834>
 8006ee0:	4651      	mov	r1, sl
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 fc0b 	bl	8007700 <__lshift>
 8006eea:	4682      	mov	sl, r0
 8006eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dd05      	ble.n	8006efe <_dtoa_r+0x846>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 fc02 	bl	8007700 <__lshift>
 8006efc:	4604      	mov	r4, r0
 8006efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d070      	beq.n	8006fe6 <_dtoa_r+0x92e>
 8006f04:	4621      	mov	r1, r4
 8006f06:	4650      	mov	r0, sl
 8006f08:	f000 fc66 	bl	80077d8 <__mcmp>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	da6a      	bge.n	8006fe6 <_dtoa_r+0x92e>
 8006f10:	2300      	movs	r3, #0
 8006f12:	4651      	mov	r1, sl
 8006f14:	220a      	movs	r2, #10
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 fa46 	bl	80073a8 <__multadd>
 8006f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1e:	4682      	mov	sl, r0
 8006f20:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8193 	beq.w	8007250 <_dtoa_r+0xb98>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	220a      	movs	r2, #10
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 fa39 	bl	80073a8 <__multadd>
 8006f36:	f1bb 0f00 	cmp.w	fp, #0
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	f300 8093 	bgt.w	8007066 <_dtoa_r+0x9ae>
 8006f40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	dc57      	bgt.n	8006ff6 <_dtoa_r+0x93e>
 8006f46:	e08e      	b.n	8007066 <_dtoa_r+0x9ae>
 8006f48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f4e:	e756      	b.n	8006dfe <_dtoa_r+0x746>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	1e5c      	subs	r4, r3, #1
 8006f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	bfb7      	itett	lt
 8006f5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f5c:	1b1c      	subge	r4, r3, r4
 8006f5e:	1ae2      	sublt	r2, r4, r3
 8006f60:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006f62:	bfbe      	ittt	lt
 8006f64:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006f66:	189b      	addlt	r3, r3, r2
 8006f68:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006f6a:	9b02      	ldr	r3, [sp, #8]
 8006f6c:	bfb8      	it	lt
 8006f6e:	2400      	movlt	r4, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bfbb      	ittet	lt
 8006f74:	9b06      	ldrlt	r3, [sp, #24]
 8006f76:	9a02      	ldrlt	r2, [sp, #8]
 8006f78:	9f06      	ldrge	r7, [sp, #24]
 8006f7a:	1a9f      	sublt	r7, r3, r2
 8006f7c:	bfac      	ite	ge
 8006f7e:	9b02      	ldrge	r3, [sp, #8]
 8006f80:	2300      	movlt	r3, #0
 8006f82:	e73e      	b.n	8006e02 <_dtoa_r+0x74a>
 8006f84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f86:	9f06      	ldr	r7, [sp, #24]
 8006f88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f8a:	e745      	b.n	8006e18 <_dtoa_r+0x760>
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	40240000 	.word	0x40240000
 8006f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f96:	e76a      	b.n	8006e6e <_dtoa_r+0x7b6>
 8006f98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	dc19      	bgt.n	8006fd2 <_dtoa_r+0x91a>
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	b9bb      	cbnz	r3, 8006fd2 <_dtoa_r+0x91a>
 8006fa2:	9b05      	ldr	r3, [sp, #20]
 8006fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fa8:	b99b      	cbnz	r3, 8006fd2 <_dtoa_r+0x91a>
 8006faa:	9b05      	ldr	r3, [sp, #20]
 8006fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fb0:	0d1b      	lsrs	r3, r3, #20
 8006fb2:	051b      	lsls	r3, r3, #20
 8006fb4:	b183      	cbz	r3, 8006fd8 <_dtoa_r+0x920>
 8006fb6:	f04f 0801 	mov.w	r8, #1
 8006fba:	9b06      	ldr	r3, [sp, #24]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	9306      	str	r3, [sp, #24]
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f47f af6a 	bne.w	8006ea2 <_dtoa_r+0x7ea>
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e76f      	b.n	8006eb2 <_dtoa_r+0x7fa>
 8006fd2:	f04f 0800 	mov.w	r8, #0
 8006fd6:	e7f6      	b.n	8006fc6 <_dtoa_r+0x90e>
 8006fd8:	4698      	mov	r8, r3
 8006fda:	e7f4      	b.n	8006fc6 <_dtoa_r+0x90e>
 8006fdc:	f43f af7d 	beq.w	8006eda <_dtoa_r+0x822>
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	301c      	adds	r0, #28
 8006fe4:	e772      	b.n	8006ecc <_dtoa_r+0x814>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dc36      	bgt.n	800705a <_dtoa_r+0x9a2>
 8006fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	dd33      	ble.n	800705a <_dtoa_r+0x9a2>
 8006ff2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006ff6:	f1bb 0f00 	cmp.w	fp, #0
 8006ffa:	d10d      	bne.n	8007018 <_dtoa_r+0x960>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	465b      	mov	r3, fp
 8007000:	2205      	movs	r2, #5
 8007002:	4628      	mov	r0, r5
 8007004:	f000 f9d0 	bl	80073a8 <__multadd>
 8007008:	4601      	mov	r1, r0
 800700a:	4604      	mov	r4, r0
 800700c:	4650      	mov	r0, sl
 800700e:	f000 fbe3 	bl	80077d8 <__mcmp>
 8007012:	2800      	cmp	r0, #0
 8007014:	f73f adb6 	bgt.w	8006b84 <_dtoa_r+0x4cc>
 8007018:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800701a:	9f08      	ldr	r7, [sp, #32]
 800701c:	ea6f 0903 	mvn.w	r9, r3
 8007020:	f04f 0800 	mov.w	r8, #0
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f000 f99c 	bl	8007364 <_Bfree>
 800702c:	2e00      	cmp	r6, #0
 800702e:	f43f aea4 	beq.w	8006d7a <_dtoa_r+0x6c2>
 8007032:	f1b8 0f00 	cmp.w	r8, #0
 8007036:	d005      	beq.n	8007044 <_dtoa_r+0x98c>
 8007038:	45b0      	cmp	r8, r6
 800703a:	d003      	beq.n	8007044 <_dtoa_r+0x98c>
 800703c:	4641      	mov	r1, r8
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f990 	bl	8007364 <_Bfree>
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	f000 f98c 	bl	8007364 <_Bfree>
 800704c:	e695      	b.n	8006d7a <_dtoa_r+0x6c2>
 800704e:	2400      	movs	r4, #0
 8007050:	4626      	mov	r6, r4
 8007052:	e7e1      	b.n	8007018 <_dtoa_r+0x960>
 8007054:	46c1      	mov	r9, r8
 8007056:	4626      	mov	r6, r4
 8007058:	e594      	b.n	8006b84 <_dtoa_r+0x4cc>
 800705a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80fc 	beq.w	800725e <_dtoa_r+0xba6>
 8007066:	2f00      	cmp	r7, #0
 8007068:	dd05      	ble.n	8007076 <_dtoa_r+0x9be>
 800706a:	4631      	mov	r1, r6
 800706c:	463a      	mov	r2, r7
 800706e:	4628      	mov	r0, r5
 8007070:	f000 fb46 	bl	8007700 <__lshift>
 8007074:	4606      	mov	r6, r0
 8007076:	f1b8 0f00 	cmp.w	r8, #0
 800707a:	d05c      	beq.n	8007136 <_dtoa_r+0xa7e>
 800707c:	4628      	mov	r0, r5
 800707e:	6871      	ldr	r1, [r6, #4]
 8007080:	f000 f930 	bl	80072e4 <_Balloc>
 8007084:	4607      	mov	r7, r0
 8007086:	b928      	cbnz	r0, 8007094 <_dtoa_r+0x9dc>
 8007088:	4602      	mov	r2, r0
 800708a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800708e:	4b7e      	ldr	r3, [pc, #504]	; (8007288 <_dtoa_r+0xbd0>)
 8007090:	f7ff bb26 	b.w	80066e0 <_dtoa_r+0x28>
 8007094:	6932      	ldr	r2, [r6, #16]
 8007096:	f106 010c 	add.w	r1, r6, #12
 800709a:	3202      	adds	r2, #2
 800709c:	0092      	lsls	r2, r2, #2
 800709e:	300c      	adds	r0, #12
 80070a0:	f000 f912 	bl	80072c8 <memcpy>
 80070a4:	2201      	movs	r2, #1
 80070a6:	4639      	mov	r1, r7
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 fb29 	bl	8007700 <__lshift>
 80070ae:	46b0      	mov	r8, r6
 80070b0:	4606      	mov	r6, r0
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	3301      	adds	r3, #1
 80070b6:	9302      	str	r3, [sp, #8]
 80070b8:	9b08      	ldr	r3, [sp, #32]
 80070ba:	445b      	add	r3, fp
 80070bc:	930a      	str	r3, [sp, #40]	; 0x28
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	9309      	str	r3, [sp, #36]	; 0x24
 80070c6:	9b02      	ldr	r3, [sp, #8]
 80070c8:	4621      	mov	r1, r4
 80070ca:	4650      	mov	r0, sl
 80070cc:	f103 3bff 	add.w	fp, r3, #4294967295
 80070d0:	f7ff fa64 	bl	800659c <quorem>
 80070d4:	4603      	mov	r3, r0
 80070d6:	4641      	mov	r1, r8
 80070d8:	3330      	adds	r3, #48	; 0x30
 80070da:	9004      	str	r0, [sp, #16]
 80070dc:	4650      	mov	r0, sl
 80070de:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e0:	f000 fb7a 	bl	80077d8 <__mcmp>
 80070e4:	4632      	mov	r2, r6
 80070e6:	9006      	str	r0, [sp, #24]
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 fb90 	bl	8007810 <__mdiff>
 80070f0:	68c2      	ldr	r2, [r0, #12]
 80070f2:	4607      	mov	r7, r0
 80070f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f6:	bb02      	cbnz	r2, 800713a <_dtoa_r+0xa82>
 80070f8:	4601      	mov	r1, r0
 80070fa:	4650      	mov	r0, sl
 80070fc:	f000 fb6c 	bl	80077d8 <__mcmp>
 8007100:	4602      	mov	r2, r0
 8007102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007104:	4639      	mov	r1, r7
 8007106:	4628      	mov	r0, r5
 8007108:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800710c:	f000 f92a 	bl	8007364 <_Bfree>
 8007110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007114:	9f02      	ldr	r7, [sp, #8]
 8007116:	ea43 0102 	orr.w	r1, r3, r2
 800711a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711c:	430b      	orrs	r3, r1
 800711e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007120:	d10d      	bne.n	800713e <_dtoa_r+0xa86>
 8007122:	2b39      	cmp	r3, #57	; 0x39
 8007124:	d027      	beq.n	8007176 <_dtoa_r+0xabe>
 8007126:	9a06      	ldr	r2, [sp, #24]
 8007128:	2a00      	cmp	r2, #0
 800712a:	dd01      	ble.n	8007130 <_dtoa_r+0xa78>
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	3331      	adds	r3, #49	; 0x31
 8007130:	f88b 3000 	strb.w	r3, [fp]
 8007134:	e776      	b.n	8007024 <_dtoa_r+0x96c>
 8007136:	4630      	mov	r0, r6
 8007138:	e7b9      	b.n	80070ae <_dtoa_r+0x9f6>
 800713a:	2201      	movs	r2, #1
 800713c:	e7e2      	b.n	8007104 <_dtoa_r+0xa4c>
 800713e:	9906      	ldr	r1, [sp, #24]
 8007140:	2900      	cmp	r1, #0
 8007142:	db04      	blt.n	800714e <_dtoa_r+0xa96>
 8007144:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007146:	4301      	orrs	r1, r0
 8007148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800714a:	4301      	orrs	r1, r0
 800714c:	d120      	bne.n	8007190 <_dtoa_r+0xad8>
 800714e:	2a00      	cmp	r2, #0
 8007150:	ddee      	ble.n	8007130 <_dtoa_r+0xa78>
 8007152:	4651      	mov	r1, sl
 8007154:	2201      	movs	r2, #1
 8007156:	4628      	mov	r0, r5
 8007158:	9302      	str	r3, [sp, #8]
 800715a:	f000 fad1 	bl	8007700 <__lshift>
 800715e:	4621      	mov	r1, r4
 8007160:	4682      	mov	sl, r0
 8007162:	f000 fb39 	bl	80077d8 <__mcmp>
 8007166:	2800      	cmp	r0, #0
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	dc02      	bgt.n	8007172 <_dtoa_r+0xaba>
 800716c:	d1e0      	bne.n	8007130 <_dtoa_r+0xa78>
 800716e:	07da      	lsls	r2, r3, #31
 8007170:	d5de      	bpl.n	8007130 <_dtoa_r+0xa78>
 8007172:	2b39      	cmp	r3, #57	; 0x39
 8007174:	d1da      	bne.n	800712c <_dtoa_r+0xa74>
 8007176:	2339      	movs	r3, #57	; 0x39
 8007178:	f88b 3000 	strb.w	r3, [fp]
 800717c:	463b      	mov	r3, r7
 800717e:	461f      	mov	r7, r3
 8007180:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007184:	3b01      	subs	r3, #1
 8007186:	2a39      	cmp	r2, #57	; 0x39
 8007188:	d050      	beq.n	800722c <_dtoa_r+0xb74>
 800718a:	3201      	adds	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e749      	b.n	8007024 <_dtoa_r+0x96c>
 8007190:	2a00      	cmp	r2, #0
 8007192:	dd03      	ble.n	800719c <_dtoa_r+0xae4>
 8007194:	2b39      	cmp	r3, #57	; 0x39
 8007196:	d0ee      	beq.n	8007176 <_dtoa_r+0xabe>
 8007198:	3301      	adds	r3, #1
 800719a:	e7c9      	b.n	8007130 <_dtoa_r+0xa78>
 800719c:	9a02      	ldr	r2, [sp, #8]
 800719e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071a4:	428a      	cmp	r2, r1
 80071a6:	d02a      	beq.n	80071fe <_dtoa_r+0xb46>
 80071a8:	4651      	mov	r1, sl
 80071aa:	2300      	movs	r3, #0
 80071ac:	220a      	movs	r2, #10
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f8fa 	bl	80073a8 <__multadd>
 80071b4:	45b0      	cmp	r8, r6
 80071b6:	4682      	mov	sl, r0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	f04f 020a 	mov.w	r2, #10
 80071c0:	4641      	mov	r1, r8
 80071c2:	4628      	mov	r0, r5
 80071c4:	d107      	bne.n	80071d6 <_dtoa_r+0xb1e>
 80071c6:	f000 f8ef 	bl	80073a8 <__multadd>
 80071ca:	4680      	mov	r8, r0
 80071cc:	4606      	mov	r6, r0
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	3301      	adds	r3, #1
 80071d2:	9302      	str	r3, [sp, #8]
 80071d4:	e777      	b.n	80070c6 <_dtoa_r+0xa0e>
 80071d6:	f000 f8e7 	bl	80073a8 <__multadd>
 80071da:	4631      	mov	r1, r6
 80071dc:	4680      	mov	r8, r0
 80071de:	2300      	movs	r3, #0
 80071e0:	220a      	movs	r2, #10
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 f8e0 	bl	80073a8 <__multadd>
 80071e8:	4606      	mov	r6, r0
 80071ea:	e7f0      	b.n	80071ce <_dtoa_r+0xb16>
 80071ec:	f1bb 0f00 	cmp.w	fp, #0
 80071f0:	bfcc      	ite	gt
 80071f2:	465f      	movgt	r7, fp
 80071f4:	2701      	movle	r7, #1
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	9a08      	ldr	r2, [sp, #32]
 80071fc:	4417      	add	r7, r2
 80071fe:	4651      	mov	r1, sl
 8007200:	2201      	movs	r2, #1
 8007202:	4628      	mov	r0, r5
 8007204:	9302      	str	r3, [sp, #8]
 8007206:	f000 fa7b 	bl	8007700 <__lshift>
 800720a:	4621      	mov	r1, r4
 800720c:	4682      	mov	sl, r0
 800720e:	f000 fae3 	bl	80077d8 <__mcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	dcb2      	bgt.n	800717c <_dtoa_r+0xac4>
 8007216:	d102      	bne.n	800721e <_dtoa_r+0xb66>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	07db      	lsls	r3, r3, #31
 800721c:	d4ae      	bmi.n	800717c <_dtoa_r+0xac4>
 800721e:	463b      	mov	r3, r7
 8007220:	461f      	mov	r7, r3
 8007222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007226:	2a30      	cmp	r2, #48	; 0x30
 8007228:	d0fa      	beq.n	8007220 <_dtoa_r+0xb68>
 800722a:	e6fb      	b.n	8007024 <_dtoa_r+0x96c>
 800722c:	9a08      	ldr	r2, [sp, #32]
 800722e:	429a      	cmp	r2, r3
 8007230:	d1a5      	bne.n	800717e <_dtoa_r+0xac6>
 8007232:	2331      	movs	r3, #49	; 0x31
 8007234:	f109 0901 	add.w	r9, r9, #1
 8007238:	7013      	strb	r3, [r2, #0]
 800723a:	e6f3      	b.n	8007024 <_dtoa_r+0x96c>
 800723c:	4b13      	ldr	r3, [pc, #76]	; (800728c <_dtoa_r+0xbd4>)
 800723e:	f7ff baa7 	b.w	8006790 <_dtoa_r+0xd8>
 8007242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007244:	2b00      	cmp	r3, #0
 8007246:	f47f aa80 	bne.w	800674a <_dtoa_r+0x92>
 800724a:	4b11      	ldr	r3, [pc, #68]	; (8007290 <_dtoa_r+0xbd8>)
 800724c:	f7ff baa0 	b.w	8006790 <_dtoa_r+0xd8>
 8007250:	f1bb 0f00 	cmp.w	fp, #0
 8007254:	dc03      	bgt.n	800725e <_dtoa_r+0xba6>
 8007256:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007258:	2b02      	cmp	r3, #2
 800725a:	f73f aecc 	bgt.w	8006ff6 <_dtoa_r+0x93e>
 800725e:	9f08      	ldr	r7, [sp, #32]
 8007260:	4621      	mov	r1, r4
 8007262:	4650      	mov	r0, sl
 8007264:	f7ff f99a 	bl	800659c <quorem>
 8007268:	9a08      	ldr	r2, [sp, #32]
 800726a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800726e:	f807 3b01 	strb.w	r3, [r7], #1
 8007272:	1aba      	subs	r2, r7, r2
 8007274:	4593      	cmp	fp, r2
 8007276:	ddb9      	ble.n	80071ec <_dtoa_r+0xb34>
 8007278:	4651      	mov	r1, sl
 800727a:	2300      	movs	r3, #0
 800727c:	220a      	movs	r2, #10
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f892 	bl	80073a8 <__multadd>
 8007284:	4682      	mov	sl, r0
 8007286:	e7eb      	b.n	8007260 <_dtoa_r+0xba8>
 8007288:	080090f3 	.word	0x080090f3
 800728c:	0800904c 	.word	0x0800904c
 8007290:	08009070 	.word	0x08009070

08007294 <_localeconv_r>:
 8007294:	4800      	ldr	r0, [pc, #0]	; (8007298 <_localeconv_r+0x4>)
 8007296:	4770      	bx	lr
 8007298:	20000178 	.word	0x20000178

0800729c <malloc>:
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <malloc+0xc>)
 800729e:	4601      	mov	r1, r0
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f000 bbfb 	b.w	8007a9c <_malloc_r>
 80072a6:	bf00      	nop
 80072a8:	20000024 	.word	0x20000024

080072ac <memchr>:
 80072ac:	4603      	mov	r3, r0
 80072ae:	b510      	push	{r4, lr}
 80072b0:	b2c9      	uxtb	r1, r1
 80072b2:	4402      	add	r2, r0
 80072b4:	4293      	cmp	r3, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	d101      	bne.n	80072be <memchr+0x12>
 80072ba:	2000      	movs	r0, #0
 80072bc:	e003      	b.n	80072c6 <memchr+0x1a>
 80072be:	7804      	ldrb	r4, [r0, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	428c      	cmp	r4, r1
 80072c4:	d1f6      	bne.n	80072b4 <memchr+0x8>
 80072c6:	bd10      	pop	{r4, pc}

080072c8 <memcpy>:
 80072c8:	440a      	add	r2, r1
 80072ca:	4291      	cmp	r1, r2
 80072cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d0:	d100      	bne.n	80072d4 <memcpy+0xc>
 80072d2:	4770      	bx	lr
 80072d4:	b510      	push	{r4, lr}
 80072d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072da:	4291      	cmp	r1, r2
 80072dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e0:	d1f9      	bne.n	80072d6 <memcpy+0xe>
 80072e2:	bd10      	pop	{r4, pc}

080072e4 <_Balloc>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072e8:	4604      	mov	r4, r0
 80072ea:	460d      	mov	r5, r1
 80072ec:	b976      	cbnz	r6, 800730c <_Balloc+0x28>
 80072ee:	2010      	movs	r0, #16
 80072f0:	f7ff ffd4 	bl	800729c <malloc>
 80072f4:	4602      	mov	r2, r0
 80072f6:	6260      	str	r0, [r4, #36]	; 0x24
 80072f8:	b920      	cbnz	r0, 8007304 <_Balloc+0x20>
 80072fa:	2166      	movs	r1, #102	; 0x66
 80072fc:	4b17      	ldr	r3, [pc, #92]	; (800735c <_Balloc+0x78>)
 80072fe:	4818      	ldr	r0, [pc, #96]	; (8007360 <_Balloc+0x7c>)
 8007300:	f000 fd92 	bl	8007e28 <__assert_func>
 8007304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007308:	6006      	str	r6, [r0, #0]
 800730a:	60c6      	str	r6, [r0, #12]
 800730c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800730e:	68f3      	ldr	r3, [r6, #12]
 8007310:	b183      	cbz	r3, 8007334 <_Balloc+0x50>
 8007312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800731a:	b9b8      	cbnz	r0, 800734c <_Balloc+0x68>
 800731c:	2101      	movs	r1, #1
 800731e:	fa01 f605 	lsl.w	r6, r1, r5
 8007322:	1d72      	adds	r2, r6, #5
 8007324:	4620      	mov	r0, r4
 8007326:	0092      	lsls	r2, r2, #2
 8007328:	f000 fb5e 	bl	80079e8 <_calloc_r>
 800732c:	b160      	cbz	r0, 8007348 <_Balloc+0x64>
 800732e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007332:	e00e      	b.n	8007352 <_Balloc+0x6e>
 8007334:	2221      	movs	r2, #33	; 0x21
 8007336:	2104      	movs	r1, #4
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fb55 	bl	80079e8 <_calloc_r>
 800733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007340:	60f0      	str	r0, [r6, #12]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <_Balloc+0x2e>
 8007348:	2000      	movs	r0, #0
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	6802      	ldr	r2, [r0, #0]
 800734e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007352:	2300      	movs	r3, #0
 8007354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007358:	e7f7      	b.n	800734a <_Balloc+0x66>
 800735a:	bf00      	nop
 800735c:	0800907d 	.word	0x0800907d
 8007360:	08009104 	.word	0x08009104

08007364 <_Bfree>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007368:	4605      	mov	r5, r0
 800736a:	460c      	mov	r4, r1
 800736c:	b976      	cbnz	r6, 800738c <_Bfree+0x28>
 800736e:	2010      	movs	r0, #16
 8007370:	f7ff ff94 	bl	800729c <malloc>
 8007374:	4602      	mov	r2, r0
 8007376:	6268      	str	r0, [r5, #36]	; 0x24
 8007378:	b920      	cbnz	r0, 8007384 <_Bfree+0x20>
 800737a:	218a      	movs	r1, #138	; 0x8a
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <_Bfree+0x3c>)
 800737e:	4809      	ldr	r0, [pc, #36]	; (80073a4 <_Bfree+0x40>)
 8007380:	f000 fd52 	bl	8007e28 <__assert_func>
 8007384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007388:	6006      	str	r6, [r0, #0]
 800738a:	60c6      	str	r6, [r0, #12]
 800738c:	b13c      	cbz	r4, 800739e <_Bfree+0x3a>
 800738e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007390:	6862      	ldr	r2, [r4, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007398:	6021      	str	r1, [r4, #0]
 800739a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	0800907d 	.word	0x0800907d
 80073a4:	08009104 	.word	0x08009104

080073a8 <__multadd>:
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	4698      	mov	r8, r3
 80073ae:	460c      	mov	r4, r1
 80073b0:	2300      	movs	r3, #0
 80073b2:	690e      	ldr	r6, [r1, #16]
 80073b4:	4607      	mov	r7, r0
 80073b6:	f101 0014 	add.w	r0, r1, #20
 80073ba:	6805      	ldr	r5, [r0, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	b2a9      	uxth	r1, r5
 80073c0:	fb02 8101 	mla	r1, r2, r1, r8
 80073c4:	0c2d      	lsrs	r5, r5, #16
 80073c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80073ca:	fb02 c505 	mla	r5, r2, r5, ip
 80073ce:	b289      	uxth	r1, r1
 80073d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80073d4:	429e      	cmp	r6, r3
 80073d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80073da:	f840 1b04 	str.w	r1, [r0], #4
 80073de:	dcec      	bgt.n	80073ba <__multadd+0x12>
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	d022      	beq.n	800742c <__multadd+0x84>
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	42b3      	cmp	r3, r6
 80073ea:	dc19      	bgt.n	8007420 <__multadd+0x78>
 80073ec:	6861      	ldr	r1, [r4, #4]
 80073ee:	4638      	mov	r0, r7
 80073f0:	3101      	adds	r1, #1
 80073f2:	f7ff ff77 	bl	80072e4 <_Balloc>
 80073f6:	4605      	mov	r5, r0
 80073f8:	b928      	cbnz	r0, 8007406 <__multadd+0x5e>
 80073fa:	4602      	mov	r2, r0
 80073fc:	21b5      	movs	r1, #181	; 0xb5
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <__multadd+0x8c>)
 8007400:	480d      	ldr	r0, [pc, #52]	; (8007438 <__multadd+0x90>)
 8007402:	f000 fd11 	bl	8007e28 <__assert_func>
 8007406:	6922      	ldr	r2, [r4, #16]
 8007408:	f104 010c 	add.w	r1, r4, #12
 800740c:	3202      	adds	r2, #2
 800740e:	0092      	lsls	r2, r2, #2
 8007410:	300c      	adds	r0, #12
 8007412:	f7ff ff59 	bl	80072c8 <memcpy>
 8007416:	4621      	mov	r1, r4
 8007418:	4638      	mov	r0, r7
 800741a:	f7ff ffa3 	bl	8007364 <_Bfree>
 800741e:	462c      	mov	r4, r5
 8007420:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007424:	3601      	adds	r6, #1
 8007426:	f8c3 8014 	str.w	r8, [r3, #20]
 800742a:	6126      	str	r6, [r4, #16]
 800742c:	4620      	mov	r0, r4
 800742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007432:	bf00      	nop
 8007434:	080090f3 	.word	0x080090f3
 8007438:	08009104 	.word	0x08009104

0800743c <__hi0bits>:
 800743c:	0c02      	lsrs	r2, r0, #16
 800743e:	0412      	lsls	r2, r2, #16
 8007440:	4603      	mov	r3, r0
 8007442:	b9ca      	cbnz	r2, 8007478 <__hi0bits+0x3c>
 8007444:	0403      	lsls	r3, r0, #16
 8007446:	2010      	movs	r0, #16
 8007448:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800744c:	bf04      	itt	eq
 800744e:	021b      	lsleq	r3, r3, #8
 8007450:	3008      	addeq	r0, #8
 8007452:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007456:	bf04      	itt	eq
 8007458:	011b      	lsleq	r3, r3, #4
 800745a:	3004      	addeq	r0, #4
 800745c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007460:	bf04      	itt	eq
 8007462:	009b      	lsleq	r3, r3, #2
 8007464:	3002      	addeq	r0, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	db05      	blt.n	8007476 <__hi0bits+0x3a>
 800746a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800746e:	f100 0001 	add.w	r0, r0, #1
 8007472:	bf08      	it	eq
 8007474:	2020      	moveq	r0, #32
 8007476:	4770      	bx	lr
 8007478:	2000      	movs	r0, #0
 800747a:	e7e5      	b.n	8007448 <__hi0bits+0xc>

0800747c <__lo0bits>:
 800747c:	6803      	ldr	r3, [r0, #0]
 800747e:	4602      	mov	r2, r0
 8007480:	f013 0007 	ands.w	r0, r3, #7
 8007484:	d00b      	beq.n	800749e <__lo0bits+0x22>
 8007486:	07d9      	lsls	r1, r3, #31
 8007488:	d422      	bmi.n	80074d0 <__lo0bits+0x54>
 800748a:	0798      	lsls	r0, r3, #30
 800748c:	bf49      	itett	mi
 800748e:	085b      	lsrmi	r3, r3, #1
 8007490:	089b      	lsrpl	r3, r3, #2
 8007492:	2001      	movmi	r0, #1
 8007494:	6013      	strmi	r3, [r2, #0]
 8007496:	bf5c      	itt	pl
 8007498:	2002      	movpl	r0, #2
 800749a:	6013      	strpl	r3, [r2, #0]
 800749c:	4770      	bx	lr
 800749e:	b299      	uxth	r1, r3
 80074a0:	b909      	cbnz	r1, 80074a6 <__lo0bits+0x2a>
 80074a2:	2010      	movs	r0, #16
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074aa:	bf04      	itt	eq
 80074ac:	0a1b      	lsreq	r3, r3, #8
 80074ae:	3008      	addeq	r0, #8
 80074b0:	0719      	lsls	r1, r3, #28
 80074b2:	bf04      	itt	eq
 80074b4:	091b      	lsreq	r3, r3, #4
 80074b6:	3004      	addeq	r0, #4
 80074b8:	0799      	lsls	r1, r3, #30
 80074ba:	bf04      	itt	eq
 80074bc:	089b      	lsreq	r3, r3, #2
 80074be:	3002      	addeq	r0, #2
 80074c0:	07d9      	lsls	r1, r3, #31
 80074c2:	d403      	bmi.n	80074cc <__lo0bits+0x50>
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	f100 0001 	add.w	r0, r0, #1
 80074ca:	d003      	beq.n	80074d4 <__lo0bits+0x58>
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	4770      	bx	lr
 80074d0:	2000      	movs	r0, #0
 80074d2:	4770      	bx	lr
 80074d4:	2020      	movs	r0, #32
 80074d6:	4770      	bx	lr

080074d8 <__i2b>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	460c      	mov	r4, r1
 80074dc:	2101      	movs	r1, #1
 80074de:	f7ff ff01 	bl	80072e4 <_Balloc>
 80074e2:	4602      	mov	r2, r0
 80074e4:	b928      	cbnz	r0, 80074f2 <__i2b+0x1a>
 80074e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074ea:	4b04      	ldr	r3, [pc, #16]	; (80074fc <__i2b+0x24>)
 80074ec:	4804      	ldr	r0, [pc, #16]	; (8007500 <__i2b+0x28>)
 80074ee:	f000 fc9b 	bl	8007e28 <__assert_func>
 80074f2:	2301      	movs	r3, #1
 80074f4:	6144      	str	r4, [r0, #20]
 80074f6:	6103      	str	r3, [r0, #16]
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	bf00      	nop
 80074fc:	080090f3 	.word	0x080090f3
 8007500:	08009104 	.word	0x08009104

08007504 <__multiply>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	4614      	mov	r4, r2
 800750a:	690a      	ldr	r2, [r1, #16]
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	460d      	mov	r5, r1
 8007510:	429a      	cmp	r2, r3
 8007512:	bfbe      	ittt	lt
 8007514:	460b      	movlt	r3, r1
 8007516:	4625      	movlt	r5, r4
 8007518:	461c      	movlt	r4, r3
 800751a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800751e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007522:	68ab      	ldr	r3, [r5, #8]
 8007524:	6869      	ldr	r1, [r5, #4]
 8007526:	eb0a 0709 	add.w	r7, sl, r9
 800752a:	42bb      	cmp	r3, r7
 800752c:	b085      	sub	sp, #20
 800752e:	bfb8      	it	lt
 8007530:	3101      	addlt	r1, #1
 8007532:	f7ff fed7 	bl	80072e4 <_Balloc>
 8007536:	b930      	cbnz	r0, 8007546 <__multiply+0x42>
 8007538:	4602      	mov	r2, r0
 800753a:	f240 115d 	movw	r1, #349	; 0x15d
 800753e:	4b41      	ldr	r3, [pc, #260]	; (8007644 <__multiply+0x140>)
 8007540:	4841      	ldr	r0, [pc, #260]	; (8007648 <__multiply+0x144>)
 8007542:	f000 fc71 	bl	8007e28 <__assert_func>
 8007546:	f100 0614 	add.w	r6, r0, #20
 800754a:	4633      	mov	r3, r6
 800754c:	2200      	movs	r2, #0
 800754e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007552:	4543      	cmp	r3, r8
 8007554:	d31e      	bcc.n	8007594 <__multiply+0x90>
 8007556:	f105 0c14 	add.w	ip, r5, #20
 800755a:	f104 0314 	add.w	r3, r4, #20
 800755e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007562:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007566:	9202      	str	r2, [sp, #8]
 8007568:	ebac 0205 	sub.w	r2, ip, r5
 800756c:	3a15      	subs	r2, #21
 800756e:	f022 0203 	bic.w	r2, r2, #3
 8007572:	3204      	adds	r2, #4
 8007574:	f105 0115 	add.w	r1, r5, #21
 8007578:	458c      	cmp	ip, r1
 800757a:	bf38      	it	cc
 800757c:	2204      	movcc	r2, #4
 800757e:	9201      	str	r2, [sp, #4]
 8007580:	9a02      	ldr	r2, [sp, #8]
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	429a      	cmp	r2, r3
 8007586:	d808      	bhi.n	800759a <__multiply+0x96>
 8007588:	2f00      	cmp	r7, #0
 800758a:	dc55      	bgt.n	8007638 <__multiply+0x134>
 800758c:	6107      	str	r7, [r0, #16]
 800758e:	b005      	add	sp, #20
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	f843 2b04 	str.w	r2, [r3], #4
 8007598:	e7db      	b.n	8007552 <__multiply+0x4e>
 800759a:	f8b3 a000 	ldrh.w	sl, [r3]
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	d020      	beq.n	80075e6 <__multiply+0xe2>
 80075a4:	46b1      	mov	r9, r6
 80075a6:	2200      	movs	r2, #0
 80075a8:	f105 0e14 	add.w	lr, r5, #20
 80075ac:	f85e 4b04 	ldr.w	r4, [lr], #4
 80075b0:	f8d9 b000 	ldr.w	fp, [r9]
 80075b4:	b2a1      	uxth	r1, r4
 80075b6:	fa1f fb8b 	uxth.w	fp, fp
 80075ba:	fb0a b101 	mla	r1, sl, r1, fp
 80075be:	4411      	add	r1, r2
 80075c0:	f8d9 2000 	ldr.w	r2, [r9]
 80075c4:	0c24      	lsrs	r4, r4, #16
 80075c6:	0c12      	lsrs	r2, r2, #16
 80075c8:	fb0a 2404 	mla	r4, sl, r4, r2
 80075cc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80075d0:	b289      	uxth	r1, r1
 80075d2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80075d6:	45f4      	cmp	ip, lr
 80075d8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80075dc:	f849 1b04 	str.w	r1, [r9], #4
 80075e0:	d8e4      	bhi.n	80075ac <__multiply+0xa8>
 80075e2:	9901      	ldr	r1, [sp, #4]
 80075e4:	5072      	str	r2, [r6, r1]
 80075e6:	9a03      	ldr	r2, [sp, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075ee:	f1b9 0f00 	cmp.w	r9, #0
 80075f2:	d01f      	beq.n	8007634 <__multiply+0x130>
 80075f4:	46b6      	mov	lr, r6
 80075f6:	f04f 0a00 	mov.w	sl, #0
 80075fa:	6834      	ldr	r4, [r6, #0]
 80075fc:	f105 0114 	add.w	r1, r5, #20
 8007600:	880a      	ldrh	r2, [r1, #0]
 8007602:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007606:	b2a4      	uxth	r4, r4
 8007608:	fb09 b202 	mla	r2, r9, r2, fp
 800760c:	4492      	add	sl, r2
 800760e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007612:	f84e 4b04 	str.w	r4, [lr], #4
 8007616:	f851 4b04 	ldr.w	r4, [r1], #4
 800761a:	f8be 2000 	ldrh.w	r2, [lr]
 800761e:	0c24      	lsrs	r4, r4, #16
 8007620:	fb09 2404 	mla	r4, r9, r4, r2
 8007624:	458c      	cmp	ip, r1
 8007626:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800762a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800762e:	d8e7      	bhi.n	8007600 <__multiply+0xfc>
 8007630:	9a01      	ldr	r2, [sp, #4]
 8007632:	50b4      	str	r4, [r6, r2]
 8007634:	3604      	adds	r6, #4
 8007636:	e7a3      	b.n	8007580 <__multiply+0x7c>
 8007638:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1a5      	bne.n	800758c <__multiply+0x88>
 8007640:	3f01      	subs	r7, #1
 8007642:	e7a1      	b.n	8007588 <__multiply+0x84>
 8007644:	080090f3 	.word	0x080090f3
 8007648:	08009104 	.word	0x08009104

0800764c <__pow5mult>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	4615      	mov	r5, r2
 8007652:	f012 0203 	ands.w	r2, r2, #3
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
 800765a:	d007      	beq.n	800766c <__pow5mult+0x20>
 800765c:	4c25      	ldr	r4, [pc, #148]	; (80076f4 <__pow5mult+0xa8>)
 800765e:	3a01      	subs	r2, #1
 8007660:	2300      	movs	r3, #0
 8007662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007666:	f7ff fe9f 	bl	80073a8 <__multadd>
 800766a:	4607      	mov	r7, r0
 800766c:	10ad      	asrs	r5, r5, #2
 800766e:	d03d      	beq.n	80076ec <__pow5mult+0xa0>
 8007670:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007672:	b97c      	cbnz	r4, 8007694 <__pow5mult+0x48>
 8007674:	2010      	movs	r0, #16
 8007676:	f7ff fe11 	bl	800729c <malloc>
 800767a:	4602      	mov	r2, r0
 800767c:	6270      	str	r0, [r6, #36]	; 0x24
 800767e:	b928      	cbnz	r0, 800768c <__pow5mult+0x40>
 8007680:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007684:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <__pow5mult+0xac>)
 8007686:	481d      	ldr	r0, [pc, #116]	; (80076fc <__pow5mult+0xb0>)
 8007688:	f000 fbce 	bl	8007e28 <__assert_func>
 800768c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007690:	6004      	str	r4, [r0, #0]
 8007692:	60c4      	str	r4, [r0, #12]
 8007694:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800769c:	b94c      	cbnz	r4, 80076b2 <__pow5mult+0x66>
 800769e:	f240 2171 	movw	r1, #625	; 0x271
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ff18 	bl	80074d8 <__i2b>
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80076b0:	6003      	str	r3, [r0, #0]
 80076b2:	f04f 0900 	mov.w	r9, #0
 80076b6:	07eb      	lsls	r3, r5, #31
 80076b8:	d50a      	bpl.n	80076d0 <__pow5mult+0x84>
 80076ba:	4639      	mov	r1, r7
 80076bc:	4622      	mov	r2, r4
 80076be:	4630      	mov	r0, r6
 80076c0:	f7ff ff20 	bl	8007504 <__multiply>
 80076c4:	4680      	mov	r8, r0
 80076c6:	4639      	mov	r1, r7
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7ff fe4b 	bl	8007364 <_Bfree>
 80076ce:	4647      	mov	r7, r8
 80076d0:	106d      	asrs	r5, r5, #1
 80076d2:	d00b      	beq.n	80076ec <__pow5mult+0xa0>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	b938      	cbnz	r0, 80076e8 <__pow5mult+0x9c>
 80076d8:	4622      	mov	r2, r4
 80076da:	4621      	mov	r1, r4
 80076dc:	4630      	mov	r0, r6
 80076de:	f7ff ff11 	bl	8007504 <__multiply>
 80076e2:	6020      	str	r0, [r4, #0]
 80076e4:	f8c0 9000 	str.w	r9, [r0]
 80076e8:	4604      	mov	r4, r0
 80076ea:	e7e4      	b.n	80076b6 <__pow5mult+0x6a>
 80076ec:	4638      	mov	r0, r7
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	bf00      	nop
 80076f4:	08009258 	.word	0x08009258
 80076f8:	0800907d 	.word	0x0800907d
 80076fc:	08009104 	.word	0x08009104

08007700 <__lshift>:
 8007700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	460c      	mov	r4, r1
 8007706:	4607      	mov	r7, r0
 8007708:	4691      	mov	r9, r2
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	6849      	ldr	r1, [r1, #4]
 800770e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007712:	68a3      	ldr	r3, [r4, #8]
 8007714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007718:	f108 0601 	add.w	r6, r8, #1
 800771c:	42b3      	cmp	r3, r6
 800771e:	db0b      	blt.n	8007738 <__lshift+0x38>
 8007720:	4638      	mov	r0, r7
 8007722:	f7ff fddf 	bl	80072e4 <_Balloc>
 8007726:	4605      	mov	r5, r0
 8007728:	b948      	cbnz	r0, 800773e <__lshift+0x3e>
 800772a:	4602      	mov	r2, r0
 800772c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <__lshift+0xd0>)
 8007732:	4828      	ldr	r0, [pc, #160]	; (80077d4 <__lshift+0xd4>)
 8007734:	f000 fb78 	bl	8007e28 <__assert_func>
 8007738:	3101      	adds	r1, #1
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	e7ee      	b.n	800771c <__lshift+0x1c>
 800773e:	2300      	movs	r3, #0
 8007740:	f100 0114 	add.w	r1, r0, #20
 8007744:	f100 0210 	add.w	r2, r0, #16
 8007748:	4618      	mov	r0, r3
 800774a:	4553      	cmp	r3, sl
 800774c:	db33      	blt.n	80077b6 <__lshift+0xb6>
 800774e:	6920      	ldr	r0, [r4, #16]
 8007750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007754:	f104 0314 	add.w	r3, r4, #20
 8007758:	f019 091f 	ands.w	r9, r9, #31
 800775c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007764:	d02b      	beq.n	80077be <__lshift+0xbe>
 8007766:	468a      	mov	sl, r1
 8007768:	2200      	movs	r2, #0
 800776a:	f1c9 0e20 	rsb	lr, r9, #32
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	fa00 f009 	lsl.w	r0, r0, r9
 8007774:	4302      	orrs	r2, r0
 8007776:	f84a 2b04 	str.w	r2, [sl], #4
 800777a:	f853 2b04 	ldr.w	r2, [r3], #4
 800777e:	459c      	cmp	ip, r3
 8007780:	fa22 f20e 	lsr.w	r2, r2, lr
 8007784:	d8f3      	bhi.n	800776e <__lshift+0x6e>
 8007786:	ebac 0304 	sub.w	r3, ip, r4
 800778a:	3b15      	subs	r3, #21
 800778c:	f023 0303 	bic.w	r3, r3, #3
 8007790:	3304      	adds	r3, #4
 8007792:	f104 0015 	add.w	r0, r4, #21
 8007796:	4584      	cmp	ip, r0
 8007798:	bf38      	it	cc
 800779a:	2304      	movcc	r3, #4
 800779c:	50ca      	str	r2, [r1, r3]
 800779e:	b10a      	cbz	r2, 80077a4 <__lshift+0xa4>
 80077a0:	f108 0602 	add.w	r6, r8, #2
 80077a4:	3e01      	subs	r6, #1
 80077a6:	4638      	mov	r0, r7
 80077a8:	4621      	mov	r1, r4
 80077aa:	612e      	str	r6, [r5, #16]
 80077ac:	f7ff fdda 	bl	8007364 <_Bfree>
 80077b0:	4628      	mov	r0, r5
 80077b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80077ba:	3301      	adds	r3, #1
 80077bc:	e7c5      	b.n	800774a <__lshift+0x4a>
 80077be:	3904      	subs	r1, #4
 80077c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c4:	459c      	cmp	ip, r3
 80077c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80077ca:	d8f9      	bhi.n	80077c0 <__lshift+0xc0>
 80077cc:	e7ea      	b.n	80077a4 <__lshift+0xa4>
 80077ce:	bf00      	nop
 80077d0:	080090f3 	.word	0x080090f3
 80077d4:	08009104 	.word	0x08009104

080077d8 <__mcmp>:
 80077d8:	4603      	mov	r3, r0
 80077da:	690a      	ldr	r2, [r1, #16]
 80077dc:	6900      	ldr	r0, [r0, #16]
 80077de:	b530      	push	{r4, r5, lr}
 80077e0:	1a80      	subs	r0, r0, r2
 80077e2:	d10d      	bne.n	8007800 <__mcmp+0x28>
 80077e4:	3314      	adds	r3, #20
 80077e6:	3114      	adds	r1, #20
 80077e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077f8:	4295      	cmp	r5, r2
 80077fa:	d002      	beq.n	8007802 <__mcmp+0x2a>
 80077fc:	d304      	bcc.n	8007808 <__mcmp+0x30>
 80077fe:	2001      	movs	r0, #1
 8007800:	bd30      	pop	{r4, r5, pc}
 8007802:	42a3      	cmp	r3, r4
 8007804:	d3f4      	bcc.n	80077f0 <__mcmp+0x18>
 8007806:	e7fb      	b.n	8007800 <__mcmp+0x28>
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e7f8      	b.n	8007800 <__mcmp+0x28>
	...

08007810 <__mdiff>:
 8007810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	4606      	mov	r6, r0
 8007818:	4611      	mov	r1, r2
 800781a:	4620      	mov	r0, r4
 800781c:	4692      	mov	sl, r2
 800781e:	f7ff ffdb 	bl	80077d8 <__mcmp>
 8007822:	1e05      	subs	r5, r0, #0
 8007824:	d111      	bne.n	800784a <__mdiff+0x3a>
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff fd5b 	bl	80072e4 <_Balloc>
 800782e:	4602      	mov	r2, r0
 8007830:	b928      	cbnz	r0, 800783e <__mdiff+0x2e>
 8007832:	f240 2132 	movw	r1, #562	; 0x232
 8007836:	4b3c      	ldr	r3, [pc, #240]	; (8007928 <__mdiff+0x118>)
 8007838:	483c      	ldr	r0, [pc, #240]	; (800792c <__mdiff+0x11c>)
 800783a:	f000 faf5 	bl	8007e28 <__assert_func>
 800783e:	2301      	movs	r3, #1
 8007840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007844:	4610      	mov	r0, r2
 8007846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784a:	bfa4      	itt	ge
 800784c:	4653      	movge	r3, sl
 800784e:	46a2      	movge	sl, r4
 8007850:	4630      	mov	r0, r6
 8007852:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007856:	bfa6      	itte	ge
 8007858:	461c      	movge	r4, r3
 800785a:	2500      	movge	r5, #0
 800785c:	2501      	movlt	r5, #1
 800785e:	f7ff fd41 	bl	80072e4 <_Balloc>
 8007862:	4602      	mov	r2, r0
 8007864:	b918      	cbnz	r0, 800786e <__mdiff+0x5e>
 8007866:	f44f 7110 	mov.w	r1, #576	; 0x240
 800786a:	4b2f      	ldr	r3, [pc, #188]	; (8007928 <__mdiff+0x118>)
 800786c:	e7e4      	b.n	8007838 <__mdiff+0x28>
 800786e:	f100 0814 	add.w	r8, r0, #20
 8007872:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007876:	60c5      	str	r5, [r0, #12]
 8007878:	f04f 0c00 	mov.w	ip, #0
 800787c:	f10a 0514 	add.w	r5, sl, #20
 8007880:	f10a 0010 	add.w	r0, sl, #16
 8007884:	46c2      	mov	sl, r8
 8007886:	6926      	ldr	r6, [r4, #16]
 8007888:	f104 0914 	add.w	r9, r4, #20
 800788c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007890:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007894:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007898:	f859 3b04 	ldr.w	r3, [r9], #4
 800789c:	fa1f f18b 	uxth.w	r1, fp
 80078a0:	4461      	add	r1, ip
 80078a2:	fa1f fc83 	uxth.w	ip, r3
 80078a6:	0c1b      	lsrs	r3, r3, #16
 80078a8:	eba1 010c 	sub.w	r1, r1, ip
 80078ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078b4:	b289      	uxth	r1, r1
 80078b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80078ba:	454e      	cmp	r6, r9
 80078bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80078c0:	f84a 3b04 	str.w	r3, [sl], #4
 80078c4:	d8e6      	bhi.n	8007894 <__mdiff+0x84>
 80078c6:	1b33      	subs	r3, r6, r4
 80078c8:	3b15      	subs	r3, #21
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	3415      	adds	r4, #21
 80078d0:	3304      	adds	r3, #4
 80078d2:	42a6      	cmp	r6, r4
 80078d4:	bf38      	it	cc
 80078d6:	2304      	movcc	r3, #4
 80078d8:	441d      	add	r5, r3
 80078da:	4443      	add	r3, r8
 80078dc:	461e      	mov	r6, r3
 80078de:	462c      	mov	r4, r5
 80078e0:	4574      	cmp	r4, lr
 80078e2:	d30e      	bcc.n	8007902 <__mdiff+0xf2>
 80078e4:	f10e 0103 	add.w	r1, lr, #3
 80078e8:	1b49      	subs	r1, r1, r5
 80078ea:	f021 0103 	bic.w	r1, r1, #3
 80078ee:	3d03      	subs	r5, #3
 80078f0:	45ae      	cmp	lr, r5
 80078f2:	bf38      	it	cc
 80078f4:	2100      	movcc	r1, #0
 80078f6:	4419      	add	r1, r3
 80078f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80078fc:	b18b      	cbz	r3, 8007922 <__mdiff+0x112>
 80078fe:	6117      	str	r7, [r2, #16]
 8007900:	e7a0      	b.n	8007844 <__mdiff+0x34>
 8007902:	f854 8b04 	ldr.w	r8, [r4], #4
 8007906:	fa1f f188 	uxth.w	r1, r8
 800790a:	4461      	add	r1, ip
 800790c:	1408      	asrs	r0, r1, #16
 800790e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007912:	b289      	uxth	r1, r1
 8007914:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800791c:	f846 1b04 	str.w	r1, [r6], #4
 8007920:	e7de      	b.n	80078e0 <__mdiff+0xd0>
 8007922:	3f01      	subs	r7, #1
 8007924:	e7e8      	b.n	80078f8 <__mdiff+0xe8>
 8007926:	bf00      	nop
 8007928:	080090f3 	.word	0x080090f3
 800792c:	08009104 	.word	0x08009104

08007930 <__d2b>:
 8007930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007934:	2101      	movs	r1, #1
 8007936:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800793a:	4690      	mov	r8, r2
 800793c:	461d      	mov	r5, r3
 800793e:	f7ff fcd1 	bl	80072e4 <_Balloc>
 8007942:	4604      	mov	r4, r0
 8007944:	b930      	cbnz	r0, 8007954 <__d2b+0x24>
 8007946:	4602      	mov	r2, r0
 8007948:	f240 310a 	movw	r1, #778	; 0x30a
 800794c:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <__d2b+0xb0>)
 800794e:	4825      	ldr	r0, [pc, #148]	; (80079e4 <__d2b+0xb4>)
 8007950:	f000 fa6a 	bl	8007e28 <__assert_func>
 8007954:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007958:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800795c:	bb2d      	cbnz	r5, 80079aa <__d2b+0x7a>
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	f1b8 0300 	subs.w	r3, r8, #0
 8007964:	d026      	beq.n	80079b4 <__d2b+0x84>
 8007966:	4668      	mov	r0, sp
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f7ff fd87 	bl	800747c <__lo0bits>
 800796e:	9900      	ldr	r1, [sp, #0]
 8007970:	b1f0      	cbz	r0, 80079b0 <__d2b+0x80>
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	f1c0 0320 	rsb	r3, r0, #32
 8007978:	fa02 f303 	lsl.w	r3, r2, r3
 800797c:	430b      	orrs	r3, r1
 800797e:	40c2      	lsrs	r2, r0
 8007980:	6163      	str	r3, [r4, #20]
 8007982:	9201      	str	r2, [sp, #4]
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf14      	ite	ne
 800798a:	2102      	movne	r1, #2
 800798c:	2101      	moveq	r1, #1
 800798e:	61a3      	str	r3, [r4, #24]
 8007990:	6121      	str	r1, [r4, #16]
 8007992:	b1c5      	cbz	r5, 80079c6 <__d2b+0x96>
 8007994:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007998:	4405      	add	r5, r0
 800799a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800799e:	603d      	str	r5, [r7, #0]
 80079a0:	6030      	str	r0, [r6, #0]
 80079a2:	4620      	mov	r0, r4
 80079a4:	b002      	add	sp, #8
 80079a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ae:	e7d6      	b.n	800795e <__d2b+0x2e>
 80079b0:	6161      	str	r1, [r4, #20]
 80079b2:	e7e7      	b.n	8007984 <__d2b+0x54>
 80079b4:	a801      	add	r0, sp, #4
 80079b6:	f7ff fd61 	bl	800747c <__lo0bits>
 80079ba:	2101      	movs	r1, #1
 80079bc:	9b01      	ldr	r3, [sp, #4]
 80079be:	6121      	str	r1, [r4, #16]
 80079c0:	6163      	str	r3, [r4, #20]
 80079c2:	3020      	adds	r0, #32
 80079c4:	e7e5      	b.n	8007992 <__d2b+0x62>
 80079c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80079ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079ce:	6038      	str	r0, [r7, #0]
 80079d0:	6918      	ldr	r0, [r3, #16]
 80079d2:	f7ff fd33 	bl	800743c <__hi0bits>
 80079d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80079da:	6031      	str	r1, [r6, #0]
 80079dc:	e7e1      	b.n	80079a2 <__d2b+0x72>
 80079de:	bf00      	nop
 80079e0:	080090f3 	.word	0x080090f3
 80079e4:	08009104 	.word	0x08009104

080079e8 <_calloc_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	fb02 f501 	mul.w	r5, r2, r1
 80079ee:	4629      	mov	r1, r5
 80079f0:	f000 f854 	bl	8007a9c <_malloc_r>
 80079f4:	4604      	mov	r4, r0
 80079f6:	b118      	cbz	r0, 8007a00 <_calloc_r+0x18>
 80079f8:	462a      	mov	r2, r5
 80079fa:	2100      	movs	r1, #0
 80079fc:	f7fe f946 	bl	8005c8c <memset>
 8007a00:	4620      	mov	r0, r4
 8007a02:	bd38      	pop	{r3, r4, r5, pc}

08007a04 <_free_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4605      	mov	r5, r0
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	d043      	beq.n	8007a94 <_free_r+0x90>
 8007a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a10:	1f0c      	subs	r4, r1, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfb8      	it	lt
 8007a16:	18e4      	addlt	r4, r4, r3
 8007a18:	f000 fa62 	bl	8007ee0 <__malloc_lock>
 8007a1c:	4a1e      	ldr	r2, [pc, #120]	; (8007a98 <_free_r+0x94>)
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	4610      	mov	r0, r2
 8007a22:	b933      	cbnz	r3, 8007a32 <_free_r+0x2e>
 8007a24:	6063      	str	r3, [r4, #4]
 8007a26:	6014      	str	r4, [r2, #0]
 8007a28:	4628      	mov	r0, r5
 8007a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a2e:	f000 ba5d 	b.w	8007eec <__malloc_unlock>
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	d90a      	bls.n	8007a4c <_free_r+0x48>
 8007a36:	6821      	ldr	r1, [r4, #0]
 8007a38:	1862      	adds	r2, r4, r1
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	bf01      	itttt	eq
 8007a3e:	681a      	ldreq	r2, [r3, #0]
 8007a40:	685b      	ldreq	r3, [r3, #4]
 8007a42:	1852      	addeq	r2, r2, r1
 8007a44:	6022      	streq	r2, [r4, #0]
 8007a46:	6063      	str	r3, [r4, #4]
 8007a48:	6004      	str	r4, [r0, #0]
 8007a4a:	e7ed      	b.n	8007a28 <_free_r+0x24>
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	b10b      	cbz	r3, 8007a56 <_free_r+0x52>
 8007a52:	42a3      	cmp	r3, r4
 8007a54:	d9fa      	bls.n	8007a4c <_free_r+0x48>
 8007a56:	6811      	ldr	r1, [r2, #0]
 8007a58:	1850      	adds	r0, r2, r1
 8007a5a:	42a0      	cmp	r0, r4
 8007a5c:	d10b      	bne.n	8007a76 <_free_r+0x72>
 8007a5e:	6820      	ldr	r0, [r4, #0]
 8007a60:	4401      	add	r1, r0
 8007a62:	1850      	adds	r0, r2, r1
 8007a64:	4283      	cmp	r3, r0
 8007a66:	6011      	str	r1, [r2, #0]
 8007a68:	d1de      	bne.n	8007a28 <_free_r+0x24>
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	4401      	add	r1, r0
 8007a70:	6011      	str	r1, [r2, #0]
 8007a72:	6053      	str	r3, [r2, #4]
 8007a74:	e7d8      	b.n	8007a28 <_free_r+0x24>
 8007a76:	d902      	bls.n	8007a7e <_free_r+0x7a>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	e7d4      	b.n	8007a28 <_free_r+0x24>
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	1821      	adds	r1, r4, r0
 8007a82:	428b      	cmp	r3, r1
 8007a84:	bf01      	itttt	eq
 8007a86:	6819      	ldreq	r1, [r3, #0]
 8007a88:	685b      	ldreq	r3, [r3, #4]
 8007a8a:	1809      	addeq	r1, r1, r0
 8007a8c:	6021      	streq	r1, [r4, #0]
 8007a8e:	6063      	str	r3, [r4, #4]
 8007a90:	6054      	str	r4, [r2, #4]
 8007a92:	e7c9      	b.n	8007a28 <_free_r+0x24>
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
 8007a96:	bf00      	nop
 8007a98:	20000218 	.word	0x20000218

08007a9c <_malloc_r>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	1ccd      	adds	r5, r1, #3
 8007aa0:	f025 0503 	bic.w	r5, r5, #3
 8007aa4:	3508      	adds	r5, #8
 8007aa6:	2d0c      	cmp	r5, #12
 8007aa8:	bf38      	it	cc
 8007aaa:	250c      	movcc	r5, #12
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	4606      	mov	r6, r0
 8007ab0:	db01      	blt.n	8007ab6 <_malloc_r+0x1a>
 8007ab2:	42a9      	cmp	r1, r5
 8007ab4:	d903      	bls.n	8007abe <_malloc_r+0x22>
 8007ab6:	230c      	movs	r3, #12
 8007ab8:	6033      	str	r3, [r6, #0]
 8007aba:	2000      	movs	r0, #0
 8007abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007abe:	f000 fa0f 	bl	8007ee0 <__malloc_lock>
 8007ac2:	4921      	ldr	r1, [pc, #132]	; (8007b48 <_malloc_r+0xac>)
 8007ac4:	680a      	ldr	r2, [r1, #0]
 8007ac6:	4614      	mov	r4, r2
 8007ac8:	b99c      	cbnz	r4, 8007af2 <_malloc_r+0x56>
 8007aca:	4f20      	ldr	r7, [pc, #128]	; (8007b4c <_malloc_r+0xb0>)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	b923      	cbnz	r3, 8007ada <_malloc_r+0x3e>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 f998 	bl	8007e08 <_sbrk_r>
 8007ad8:	6038      	str	r0, [r7, #0]
 8007ada:	4629      	mov	r1, r5
 8007adc:	4630      	mov	r0, r6
 8007ade:	f000 f993 	bl	8007e08 <_sbrk_r>
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	d123      	bne.n	8007b2e <_malloc_r+0x92>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	4630      	mov	r0, r6
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f000 f9fe 	bl	8007eec <__malloc_unlock>
 8007af0:	e7e3      	b.n	8007aba <_malloc_r+0x1e>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	1b5b      	subs	r3, r3, r5
 8007af6:	d417      	bmi.n	8007b28 <_malloc_r+0x8c>
 8007af8:	2b0b      	cmp	r3, #11
 8007afa:	d903      	bls.n	8007b04 <_malloc_r+0x68>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	441c      	add	r4, r3
 8007b00:	6025      	str	r5, [r4, #0]
 8007b02:	e004      	b.n	8007b0e <_malloc_r+0x72>
 8007b04:	6863      	ldr	r3, [r4, #4]
 8007b06:	42a2      	cmp	r2, r4
 8007b08:	bf0c      	ite	eq
 8007b0a:	600b      	streq	r3, [r1, #0]
 8007b0c:	6053      	strne	r3, [r2, #4]
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f000 f9ec 	bl	8007eec <__malloc_unlock>
 8007b14:	f104 000b 	add.w	r0, r4, #11
 8007b18:	1d23      	adds	r3, r4, #4
 8007b1a:	f020 0007 	bic.w	r0, r0, #7
 8007b1e:	1ac2      	subs	r2, r0, r3
 8007b20:	d0cc      	beq.n	8007abc <_malloc_r+0x20>
 8007b22:	1a1b      	subs	r3, r3, r0
 8007b24:	50a3      	str	r3, [r4, r2]
 8007b26:	e7c9      	b.n	8007abc <_malloc_r+0x20>
 8007b28:	4622      	mov	r2, r4
 8007b2a:	6864      	ldr	r4, [r4, #4]
 8007b2c:	e7cc      	b.n	8007ac8 <_malloc_r+0x2c>
 8007b2e:	1cc4      	adds	r4, r0, #3
 8007b30:	f024 0403 	bic.w	r4, r4, #3
 8007b34:	42a0      	cmp	r0, r4
 8007b36:	d0e3      	beq.n	8007b00 <_malloc_r+0x64>
 8007b38:	1a21      	subs	r1, r4, r0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f000 f964 	bl	8007e08 <_sbrk_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d1dd      	bne.n	8007b00 <_malloc_r+0x64>
 8007b44:	e7cf      	b.n	8007ae6 <_malloc_r+0x4a>
 8007b46:	bf00      	nop
 8007b48:	20000218 	.word	0x20000218
 8007b4c:	2000021c 	.word	0x2000021c

08007b50 <__ssputs_r>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	688e      	ldr	r6, [r1, #8]
 8007b56:	4682      	mov	sl, r0
 8007b58:	429e      	cmp	r6, r3
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4690      	mov	r8, r2
 8007b5e:	461f      	mov	r7, r3
 8007b60:	d838      	bhi.n	8007bd4 <__ssputs_r+0x84>
 8007b62:	898a      	ldrh	r2, [r1, #12]
 8007b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b68:	d032      	beq.n	8007bd0 <__ssputs_r+0x80>
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	6909      	ldr	r1, [r1, #16]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	eba5 0901 	sub.w	r9, r5, r1
 8007b74:	6965      	ldr	r5, [r4, #20]
 8007b76:	444b      	add	r3, r9
 8007b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b80:	106d      	asrs	r5, r5, #1
 8007b82:	429d      	cmp	r5, r3
 8007b84:	bf38      	it	cc
 8007b86:	461d      	movcc	r5, r3
 8007b88:	0553      	lsls	r3, r2, #21
 8007b8a:	d531      	bpl.n	8007bf0 <__ssputs_r+0xa0>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7ff ff85 	bl	8007a9c <_malloc_r>
 8007b92:	4606      	mov	r6, r0
 8007b94:	b950      	cbnz	r0, 8007bac <__ssputs_r+0x5c>
 8007b96:	230c      	movs	r3, #12
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	f8ca 3000 	str.w	r3, [sl]
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bac:	464a      	mov	r2, r9
 8007bae:	6921      	ldr	r1, [r4, #16]
 8007bb0:	f7ff fb8a 	bl	80072c8 <memcpy>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	6126      	str	r6, [r4, #16]
 8007bc2:	444e      	add	r6, r9
 8007bc4:	6026      	str	r6, [r4, #0]
 8007bc6:	463e      	mov	r6, r7
 8007bc8:	6165      	str	r5, [r4, #20]
 8007bca:	eba5 0509 	sub.w	r5, r5, r9
 8007bce:	60a5      	str	r5, [r4, #8]
 8007bd0:	42be      	cmp	r6, r7
 8007bd2:	d900      	bls.n	8007bd6 <__ssputs_r+0x86>
 8007bd4:	463e      	mov	r6, r7
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	4641      	mov	r1, r8
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	f000 f966 	bl	8007eac <memmove>
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	6822      	ldr	r2, [r4, #0]
 8007be4:	1b9b      	subs	r3, r3, r6
 8007be6:	4432      	add	r2, r6
 8007be8:	2000      	movs	r0, #0
 8007bea:	60a3      	str	r3, [r4, #8]
 8007bec:	6022      	str	r2, [r4, #0]
 8007bee:	e7db      	b.n	8007ba8 <__ssputs_r+0x58>
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	f000 f981 	bl	8007ef8 <_realloc_r>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1e1      	bne.n	8007bc0 <__ssputs_r+0x70>
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	6921      	ldr	r1, [r4, #16]
 8007c00:	f7ff ff00 	bl	8007a04 <_free_r>
 8007c04:	e7c7      	b.n	8007b96 <__ssputs_r+0x46>
	...

08007c08 <_svfiprintf_r>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	4698      	mov	r8, r3
 8007c0e:	898b      	ldrh	r3, [r1, #12]
 8007c10:	4607      	mov	r7, r0
 8007c12:	061b      	lsls	r3, r3, #24
 8007c14:	460d      	mov	r5, r1
 8007c16:	4614      	mov	r4, r2
 8007c18:	b09d      	sub	sp, #116	; 0x74
 8007c1a:	d50e      	bpl.n	8007c3a <_svfiprintf_r+0x32>
 8007c1c:	690b      	ldr	r3, [r1, #16]
 8007c1e:	b963      	cbnz	r3, 8007c3a <_svfiprintf_r+0x32>
 8007c20:	2140      	movs	r1, #64	; 0x40
 8007c22:	f7ff ff3b 	bl	8007a9c <_malloc_r>
 8007c26:	6028      	str	r0, [r5, #0]
 8007c28:	6128      	str	r0, [r5, #16]
 8007c2a:	b920      	cbnz	r0, 8007c36 <_svfiprintf_r+0x2e>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e0d1      	b.n	8007dda <_svfiprintf_r+0x1d2>
 8007c36:	2340      	movs	r3, #64	; 0x40
 8007c38:	616b      	str	r3, [r5, #20]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	2320      	movs	r3, #32
 8007c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c44:	2330      	movs	r3, #48	; 0x30
 8007c46:	f04f 0901 	mov.w	r9, #1
 8007c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007df4 <_svfiprintf_r+0x1ec>
 8007c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c56:	4623      	mov	r3, r4
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5e:	b10a      	cbz	r2, 8007c64 <_svfiprintf_r+0x5c>
 8007c60:	2a25      	cmp	r2, #37	; 0x25
 8007c62:	d1f9      	bne.n	8007c58 <_svfiprintf_r+0x50>
 8007c64:	ebba 0b04 	subs.w	fp, sl, r4
 8007c68:	d00b      	beq.n	8007c82 <_svfiprintf_r+0x7a>
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ff6d 	bl	8007b50 <__ssputs_r>
 8007c76:	3001      	adds	r0, #1
 8007c78:	f000 80aa 	beq.w	8007dd0 <_svfiprintf_r+0x1c8>
 8007c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7e:	445a      	add	r2, fp
 8007c80:	9209      	str	r2, [sp, #36]	; 0x24
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a2 	beq.w	8007dd0 <_svfiprintf_r+0x1c8>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c96:	f10a 0a01 	add.w	sl, sl, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca4:	4654      	mov	r4, sl
 8007ca6:	2205      	movs	r2, #5
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	4851      	ldr	r0, [pc, #324]	; (8007df4 <_svfiprintf_r+0x1ec>)
 8007cae:	f7ff fafd 	bl	80072ac <memchr>
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	b9d8      	cbnz	r0, 8007cee <_svfiprintf_r+0xe6>
 8007cb6:	06d0      	lsls	r0, r2, #27
 8007cb8:	bf44      	itt	mi
 8007cba:	2320      	movmi	r3, #32
 8007cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc0:	0711      	lsls	r1, r2, #28
 8007cc2:	bf44      	itt	mi
 8007cc4:	232b      	movmi	r3, #43	; 0x2b
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cca:	f89a 3000 	ldrb.w	r3, [sl]
 8007cce:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd0:	d015      	beq.n	8007cfe <_svfiprintf_r+0xf6>
 8007cd2:	4654      	mov	r4, sl
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	f04f 0c0a 	mov.w	ip, #10
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce2:	3b30      	subs	r3, #48	; 0x30
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	d94e      	bls.n	8007d86 <_svfiprintf_r+0x17e>
 8007ce8:	b1b0      	cbz	r0, 8007d18 <_svfiprintf_r+0x110>
 8007cea:	9207      	str	r2, [sp, #28]
 8007cec:	e014      	b.n	8007d18 <_svfiprintf_r+0x110>
 8007cee:	eba0 0308 	sub.w	r3, r0, r8
 8007cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	46a2      	mov	sl, r4
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	e7d2      	b.n	8007ca4 <_svfiprintf_r+0x9c>
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbb      	ittet	lt
 8007d0a:	425b      	neglt	r3, r3
 8007d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d10:	9307      	strge	r3, [sp, #28]
 8007d12:	9307      	strlt	r3, [sp, #28]
 8007d14:	bfb8      	it	lt
 8007d16:	9204      	strlt	r2, [sp, #16]
 8007d18:	7823      	ldrb	r3, [r4, #0]
 8007d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d1c:	d10c      	bne.n	8007d38 <_svfiprintf_r+0x130>
 8007d1e:	7863      	ldrb	r3, [r4, #1]
 8007d20:	2b2a      	cmp	r3, #42	; 0x2a
 8007d22:	d135      	bne.n	8007d90 <_svfiprintf_r+0x188>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	3402      	adds	r4, #2
 8007d28:	1d1a      	adds	r2, r3, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	9203      	str	r2, [sp, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfb8      	it	lt
 8007d32:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e04 <_svfiprintf_r+0x1fc>
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	4650      	mov	r0, sl
 8007d40:	7821      	ldrb	r1, [r4, #0]
 8007d42:	f7ff fab3 	bl	80072ac <memchr>
 8007d46:	b140      	cbz	r0, 8007d5a <_svfiprintf_r+0x152>
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	eba0 000a 	sub.w	r0, r0, sl
 8007d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	3401      	adds	r4, #1
 8007d56:	4303      	orrs	r3, r0
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5e:	2206      	movs	r2, #6
 8007d60:	4825      	ldr	r0, [pc, #148]	; (8007df8 <_svfiprintf_r+0x1f0>)
 8007d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d66:	f7ff faa1 	bl	80072ac <memchr>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d038      	beq.n	8007de0 <_svfiprintf_r+0x1d8>
 8007d6e:	4b23      	ldr	r3, [pc, #140]	; (8007dfc <_svfiprintf_r+0x1f4>)
 8007d70:	bb1b      	cbnz	r3, 8007dba <_svfiprintf_r+0x1b2>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	3307      	adds	r3, #7
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	4433      	add	r3, r6
 8007d82:	9309      	str	r3, [sp, #36]	; 0x24
 8007d84:	e767      	b.n	8007c56 <_svfiprintf_r+0x4e>
 8007d86:	460c      	mov	r4, r1
 8007d88:	2001      	movs	r0, #1
 8007d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8e:	e7a5      	b.n	8007cdc <_svfiprintf_r+0xd4>
 8007d90:	2300      	movs	r3, #0
 8007d92:	f04f 0c0a 	mov.w	ip, #10
 8007d96:	4619      	mov	r1, r3
 8007d98:	3401      	adds	r4, #1
 8007d9a:	9305      	str	r3, [sp, #20]
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da2:	3a30      	subs	r2, #48	; 0x30
 8007da4:	2a09      	cmp	r2, #9
 8007da6:	d903      	bls.n	8007db0 <_svfiprintf_r+0x1a8>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0c5      	beq.n	8007d38 <_svfiprintf_r+0x130>
 8007dac:	9105      	str	r1, [sp, #20]
 8007dae:	e7c3      	b.n	8007d38 <_svfiprintf_r+0x130>
 8007db0:	4604      	mov	r4, r0
 8007db2:	2301      	movs	r3, #1
 8007db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db8:	e7f0      	b.n	8007d9c <_svfiprintf_r+0x194>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <_svfiprintf_r+0x1f8>)
 8007dc4:	a904      	add	r1, sp, #16
 8007dc6:	f7fe f807 	bl	8005dd8 <_printf_float>
 8007dca:	1c42      	adds	r2, r0, #1
 8007dcc:	4606      	mov	r6, r0
 8007dce:	d1d6      	bne.n	8007d7e <_svfiprintf_r+0x176>
 8007dd0:	89ab      	ldrh	r3, [r5, #12]
 8007dd2:	065b      	lsls	r3, r3, #25
 8007dd4:	f53f af2c 	bmi.w	8007c30 <_svfiprintf_r+0x28>
 8007dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dda:	b01d      	add	sp, #116	; 0x74
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	ab03      	add	r3, sp, #12
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	462a      	mov	r2, r5
 8007de6:	4638      	mov	r0, r7
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <_svfiprintf_r+0x1f8>)
 8007dea:	a904      	add	r1, sp, #16
 8007dec:	f7fe fa90 	bl	8006310 <_printf_i>
 8007df0:	e7eb      	b.n	8007dca <_svfiprintf_r+0x1c2>
 8007df2:	bf00      	nop
 8007df4:	08009264 	.word	0x08009264
 8007df8:	0800926e 	.word	0x0800926e
 8007dfc:	08005dd9 	.word	0x08005dd9
 8007e00:	08007b51 	.word	0x08007b51
 8007e04:	0800926a 	.word	0x0800926a

08007e08 <_sbrk_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4d05      	ldr	r5, [pc, #20]	; (8007e24 <_sbrk_r+0x1c>)
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	602b      	str	r3, [r5, #0]
 8007e14:	f7fa f9e0 	bl	80021d8 <_sbrk>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_sbrk_r+0x1a>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_sbrk_r+0x1a>
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20000434 	.word	0x20000434

08007e28 <__assert_func>:
 8007e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <__assert_func+0x2c>)
 8007e30:	4605      	mov	r5, r0
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68d8      	ldr	r0, [r3, #12]
 8007e36:	b14c      	cbz	r4, 8007e4c <__assert_func+0x24>
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <__assert_func+0x30>)
 8007e3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e3e:	9100      	str	r1, [sp, #0]
 8007e40:	462b      	mov	r3, r5
 8007e42:	4906      	ldr	r1, [pc, #24]	; (8007e5c <__assert_func+0x34>)
 8007e44:	f000 f80e 	bl	8007e64 <fiprintf>
 8007e48:	f000 faa2 	bl	8008390 <abort>
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <__assert_func+0x38>)
 8007e4e:	461c      	mov	r4, r3
 8007e50:	e7f3      	b.n	8007e3a <__assert_func+0x12>
 8007e52:	bf00      	nop
 8007e54:	20000024 	.word	0x20000024
 8007e58:	08009275 	.word	0x08009275
 8007e5c:	08009282 	.word	0x08009282
 8007e60:	080092b0 	.word	0x080092b0

08007e64 <fiprintf>:
 8007e64:	b40e      	push	{r1, r2, r3}
 8007e66:	b503      	push	{r0, r1, lr}
 8007e68:	4601      	mov	r1, r0
 8007e6a:	ab03      	add	r3, sp, #12
 8007e6c:	4805      	ldr	r0, [pc, #20]	; (8007e84 <fiprintf+0x20>)
 8007e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e72:	6800      	ldr	r0, [r0, #0]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	f000 f88d 	bl	8007f94 <_vfiprintf_r>
 8007e7a:	b002      	add	sp, #8
 8007e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e80:	b003      	add	sp, #12
 8007e82:	4770      	bx	lr
 8007e84:	20000024 	.word	0x20000024

08007e88 <__ascii_mbtowc>:
 8007e88:	b082      	sub	sp, #8
 8007e8a:	b901      	cbnz	r1, 8007e8e <__ascii_mbtowc+0x6>
 8007e8c:	a901      	add	r1, sp, #4
 8007e8e:	b142      	cbz	r2, 8007ea2 <__ascii_mbtowc+0x1a>
 8007e90:	b14b      	cbz	r3, 8007ea6 <__ascii_mbtowc+0x1e>
 8007e92:	7813      	ldrb	r3, [r2, #0]
 8007e94:	600b      	str	r3, [r1, #0]
 8007e96:	7812      	ldrb	r2, [r2, #0]
 8007e98:	1e10      	subs	r0, r2, #0
 8007e9a:	bf18      	it	ne
 8007e9c:	2001      	movne	r0, #1
 8007e9e:	b002      	add	sp, #8
 8007ea0:	4770      	bx	lr
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	e7fb      	b.n	8007e9e <__ascii_mbtowc+0x16>
 8007ea6:	f06f 0001 	mvn.w	r0, #1
 8007eaa:	e7f8      	b.n	8007e9e <__ascii_mbtowc+0x16>

08007eac <memmove>:
 8007eac:	4288      	cmp	r0, r1
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	eb01 0402 	add.w	r4, r1, r2
 8007eb4:	d902      	bls.n	8007ebc <memmove+0x10>
 8007eb6:	4284      	cmp	r4, r0
 8007eb8:	4623      	mov	r3, r4
 8007eba:	d807      	bhi.n	8007ecc <memmove+0x20>
 8007ebc:	1e43      	subs	r3, r0, #1
 8007ebe:	42a1      	cmp	r1, r4
 8007ec0:	d008      	beq.n	8007ed4 <memmove+0x28>
 8007ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eca:	e7f8      	b.n	8007ebe <memmove+0x12>
 8007ecc:	4601      	mov	r1, r0
 8007ece:	4402      	add	r2, r0
 8007ed0:	428a      	cmp	r2, r1
 8007ed2:	d100      	bne.n	8007ed6 <memmove+0x2a>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ede:	e7f7      	b.n	8007ed0 <memmove+0x24>

08007ee0 <__malloc_lock>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__malloc_lock+0x8>)
 8007ee2:	f000 bc15 	b.w	8008710 <__retarget_lock_acquire_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	2000043c 	.word	0x2000043c

08007eec <__malloc_unlock>:
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <__malloc_unlock+0x8>)
 8007eee:	f000 bc10 	b.w	8008712 <__retarget_lock_release_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	2000043c 	.word	0x2000043c

08007ef8 <_realloc_r>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	4607      	mov	r7, r0
 8007efc:	4614      	mov	r4, r2
 8007efe:	460e      	mov	r6, r1
 8007f00:	b921      	cbnz	r1, 8007f0c <_realloc_r+0x14>
 8007f02:	4611      	mov	r1, r2
 8007f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f08:	f7ff bdc8 	b.w	8007a9c <_malloc_r>
 8007f0c:	b922      	cbnz	r2, 8007f18 <_realloc_r+0x20>
 8007f0e:	f7ff fd79 	bl	8007a04 <_free_r>
 8007f12:	4625      	mov	r5, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f18:	f000 fc60 	bl	80087dc <_malloc_usable_size_r>
 8007f1c:	42a0      	cmp	r0, r4
 8007f1e:	d20f      	bcs.n	8007f40 <_realloc_r+0x48>
 8007f20:	4621      	mov	r1, r4
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7ff fdba 	bl	8007a9c <_malloc_r>
 8007f28:	4605      	mov	r5, r0
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d0f2      	beq.n	8007f14 <_realloc_r+0x1c>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4622      	mov	r2, r4
 8007f32:	f7ff f9c9 	bl	80072c8 <memcpy>
 8007f36:	4631      	mov	r1, r6
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff fd63 	bl	8007a04 <_free_r>
 8007f3e:	e7e9      	b.n	8007f14 <_realloc_r+0x1c>
 8007f40:	4635      	mov	r5, r6
 8007f42:	e7e7      	b.n	8007f14 <_realloc_r+0x1c>

08007f44 <__sfputc_r>:
 8007f44:	6893      	ldr	r3, [r2, #8]
 8007f46:	b410      	push	{r4}
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	6093      	str	r3, [r2, #8]
 8007f4e:	da07      	bge.n	8007f60 <__sfputc_r+0x1c>
 8007f50:	6994      	ldr	r4, [r2, #24]
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	db01      	blt.n	8007f5a <__sfputc_r+0x16>
 8007f56:	290a      	cmp	r1, #10
 8007f58:	d102      	bne.n	8007f60 <__sfputc_r+0x1c>
 8007f5a:	bc10      	pop	{r4}
 8007f5c:	f000 b94a 	b.w	80081f4 <__swbuf_r>
 8007f60:	6813      	ldr	r3, [r2, #0]
 8007f62:	1c58      	adds	r0, r3, #1
 8007f64:	6010      	str	r0, [r2, #0]
 8007f66:	7019      	strb	r1, [r3, #0]
 8007f68:	4608      	mov	r0, r1
 8007f6a:	bc10      	pop	{r4}
 8007f6c:	4770      	bx	lr

08007f6e <__sfputs_r>:
 8007f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f70:	4606      	mov	r6, r0
 8007f72:	460f      	mov	r7, r1
 8007f74:	4614      	mov	r4, r2
 8007f76:	18d5      	adds	r5, r2, r3
 8007f78:	42ac      	cmp	r4, r5
 8007f7a:	d101      	bne.n	8007f80 <__sfputs_r+0x12>
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e007      	b.n	8007f90 <__sfputs_r+0x22>
 8007f80:	463a      	mov	r2, r7
 8007f82:	4630      	mov	r0, r6
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	f7ff ffdc 	bl	8007f44 <__sfputc_r>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d1f3      	bne.n	8007f78 <__sfputs_r+0xa>
 8007f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f94 <_vfiprintf_r>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	460d      	mov	r5, r1
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	4698      	mov	r8, r3
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	b09d      	sub	sp, #116	; 0x74
 8007fa2:	b118      	cbz	r0, 8007fac <_vfiprintf_r+0x18>
 8007fa4:	6983      	ldr	r3, [r0, #24]
 8007fa6:	b90b      	cbnz	r3, 8007fac <_vfiprintf_r+0x18>
 8007fa8:	f000 fb14 	bl	80085d4 <__sinit>
 8007fac:	4b89      	ldr	r3, [pc, #548]	; (80081d4 <_vfiprintf_r+0x240>)
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	d11b      	bne.n	8007fea <_vfiprintf_r+0x56>
 8007fb2:	6875      	ldr	r5, [r6, #4]
 8007fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fb6:	07d9      	lsls	r1, r3, #31
 8007fb8:	d405      	bmi.n	8007fc6 <_vfiprintf_r+0x32>
 8007fba:	89ab      	ldrh	r3, [r5, #12]
 8007fbc:	059a      	lsls	r2, r3, #22
 8007fbe:	d402      	bmi.n	8007fc6 <_vfiprintf_r+0x32>
 8007fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc2:	f000 fba5 	bl	8008710 <__retarget_lock_acquire_recursive>
 8007fc6:	89ab      	ldrh	r3, [r5, #12]
 8007fc8:	071b      	lsls	r3, r3, #28
 8007fca:	d501      	bpl.n	8007fd0 <_vfiprintf_r+0x3c>
 8007fcc:	692b      	ldr	r3, [r5, #16]
 8007fce:	b9eb      	cbnz	r3, 800800c <_vfiprintf_r+0x78>
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 f96e 	bl	80082b4 <__swsetup_r>
 8007fd8:	b1c0      	cbz	r0, 800800c <_vfiprintf_r+0x78>
 8007fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fdc:	07dc      	lsls	r4, r3, #31
 8007fde:	d50e      	bpl.n	8007ffe <_vfiprintf_r+0x6a>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	b01d      	add	sp, #116	; 0x74
 8007fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fea:	4b7b      	ldr	r3, [pc, #492]	; (80081d8 <_vfiprintf_r+0x244>)
 8007fec:	429d      	cmp	r5, r3
 8007fee:	d101      	bne.n	8007ff4 <_vfiprintf_r+0x60>
 8007ff0:	68b5      	ldr	r5, [r6, #8]
 8007ff2:	e7df      	b.n	8007fb4 <_vfiprintf_r+0x20>
 8007ff4:	4b79      	ldr	r3, [pc, #484]	; (80081dc <_vfiprintf_r+0x248>)
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	bf08      	it	eq
 8007ffa:	68f5      	ldreq	r5, [r6, #12]
 8007ffc:	e7da      	b.n	8007fb4 <_vfiprintf_r+0x20>
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	0598      	lsls	r0, r3, #22
 8008002:	d4ed      	bmi.n	8007fe0 <_vfiprintf_r+0x4c>
 8008004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008006:	f000 fb84 	bl	8008712 <__retarget_lock_release_recursive>
 800800a:	e7e9      	b.n	8007fe0 <_vfiprintf_r+0x4c>
 800800c:	2300      	movs	r3, #0
 800800e:	9309      	str	r3, [sp, #36]	; 0x24
 8008010:	2320      	movs	r3, #32
 8008012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008016:	2330      	movs	r3, #48	; 0x30
 8008018:	f04f 0901 	mov.w	r9, #1
 800801c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008020:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80081e0 <_vfiprintf_r+0x24c>
 8008024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008028:	4623      	mov	r3, r4
 800802a:	469a      	mov	sl, r3
 800802c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008030:	b10a      	cbz	r2, 8008036 <_vfiprintf_r+0xa2>
 8008032:	2a25      	cmp	r2, #37	; 0x25
 8008034:	d1f9      	bne.n	800802a <_vfiprintf_r+0x96>
 8008036:	ebba 0b04 	subs.w	fp, sl, r4
 800803a:	d00b      	beq.n	8008054 <_vfiprintf_r+0xc0>
 800803c:	465b      	mov	r3, fp
 800803e:	4622      	mov	r2, r4
 8008040:	4629      	mov	r1, r5
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ff93 	bl	8007f6e <__sfputs_r>
 8008048:	3001      	adds	r0, #1
 800804a:	f000 80aa 	beq.w	80081a2 <_vfiprintf_r+0x20e>
 800804e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008050:	445a      	add	r2, fp
 8008052:	9209      	str	r2, [sp, #36]	; 0x24
 8008054:	f89a 3000 	ldrb.w	r3, [sl]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80a2 	beq.w	80081a2 <_vfiprintf_r+0x20e>
 800805e:	2300      	movs	r3, #0
 8008060:	f04f 32ff 	mov.w	r2, #4294967295
 8008064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008068:	f10a 0a01 	add.w	sl, sl, #1
 800806c:	9304      	str	r3, [sp, #16]
 800806e:	9307      	str	r3, [sp, #28]
 8008070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008074:	931a      	str	r3, [sp, #104]	; 0x68
 8008076:	4654      	mov	r4, sl
 8008078:	2205      	movs	r2, #5
 800807a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807e:	4858      	ldr	r0, [pc, #352]	; (80081e0 <_vfiprintf_r+0x24c>)
 8008080:	f7ff f914 	bl	80072ac <memchr>
 8008084:	9a04      	ldr	r2, [sp, #16]
 8008086:	b9d8      	cbnz	r0, 80080c0 <_vfiprintf_r+0x12c>
 8008088:	06d1      	lsls	r1, r2, #27
 800808a:	bf44      	itt	mi
 800808c:	2320      	movmi	r3, #32
 800808e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008092:	0713      	lsls	r3, r2, #28
 8008094:	bf44      	itt	mi
 8008096:	232b      	movmi	r3, #43	; 0x2b
 8008098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809c:	f89a 3000 	ldrb.w	r3, [sl]
 80080a0:	2b2a      	cmp	r3, #42	; 0x2a
 80080a2:	d015      	beq.n	80080d0 <_vfiprintf_r+0x13c>
 80080a4:	4654      	mov	r4, sl
 80080a6:	2000      	movs	r0, #0
 80080a8:	f04f 0c0a 	mov.w	ip, #10
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	4621      	mov	r1, r4
 80080b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b4:	3b30      	subs	r3, #48	; 0x30
 80080b6:	2b09      	cmp	r3, #9
 80080b8:	d94e      	bls.n	8008158 <_vfiprintf_r+0x1c4>
 80080ba:	b1b0      	cbz	r0, 80080ea <_vfiprintf_r+0x156>
 80080bc:	9207      	str	r2, [sp, #28]
 80080be:	e014      	b.n	80080ea <_vfiprintf_r+0x156>
 80080c0:	eba0 0308 	sub.w	r3, r0, r8
 80080c4:	fa09 f303 	lsl.w	r3, r9, r3
 80080c8:	4313      	orrs	r3, r2
 80080ca:	46a2      	mov	sl, r4
 80080cc:	9304      	str	r3, [sp, #16]
 80080ce:	e7d2      	b.n	8008076 <_vfiprintf_r+0xe2>
 80080d0:	9b03      	ldr	r3, [sp, #12]
 80080d2:	1d19      	adds	r1, r3, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	9103      	str	r1, [sp, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bfbb      	ittet	lt
 80080dc:	425b      	neglt	r3, r3
 80080de:	f042 0202 	orrlt.w	r2, r2, #2
 80080e2:	9307      	strge	r3, [sp, #28]
 80080e4:	9307      	strlt	r3, [sp, #28]
 80080e6:	bfb8      	it	lt
 80080e8:	9204      	strlt	r2, [sp, #16]
 80080ea:	7823      	ldrb	r3, [r4, #0]
 80080ec:	2b2e      	cmp	r3, #46	; 0x2e
 80080ee:	d10c      	bne.n	800810a <_vfiprintf_r+0x176>
 80080f0:	7863      	ldrb	r3, [r4, #1]
 80080f2:	2b2a      	cmp	r3, #42	; 0x2a
 80080f4:	d135      	bne.n	8008162 <_vfiprintf_r+0x1ce>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	3402      	adds	r4, #2
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	9203      	str	r2, [sp, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfb8      	it	lt
 8008104:	f04f 33ff 	movlt.w	r3, #4294967295
 8008108:	9305      	str	r3, [sp, #20]
 800810a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081f0 <_vfiprintf_r+0x25c>
 800810e:	2203      	movs	r2, #3
 8008110:	4650      	mov	r0, sl
 8008112:	7821      	ldrb	r1, [r4, #0]
 8008114:	f7ff f8ca 	bl	80072ac <memchr>
 8008118:	b140      	cbz	r0, 800812c <_vfiprintf_r+0x198>
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	eba0 000a 	sub.w	r0, r0, sl
 8008120:	fa03 f000 	lsl.w	r0, r3, r0
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	3401      	adds	r4, #1
 8008128:	4303      	orrs	r3, r0
 800812a:	9304      	str	r3, [sp, #16]
 800812c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008130:	2206      	movs	r2, #6
 8008132:	482c      	ldr	r0, [pc, #176]	; (80081e4 <_vfiprintf_r+0x250>)
 8008134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008138:	f7ff f8b8 	bl	80072ac <memchr>
 800813c:	2800      	cmp	r0, #0
 800813e:	d03f      	beq.n	80081c0 <_vfiprintf_r+0x22c>
 8008140:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <_vfiprintf_r+0x254>)
 8008142:	bb1b      	cbnz	r3, 800818c <_vfiprintf_r+0x1f8>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	3307      	adds	r3, #7
 8008148:	f023 0307 	bic.w	r3, r3, #7
 800814c:	3308      	adds	r3, #8
 800814e:	9303      	str	r3, [sp, #12]
 8008150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008152:	443b      	add	r3, r7
 8008154:	9309      	str	r3, [sp, #36]	; 0x24
 8008156:	e767      	b.n	8008028 <_vfiprintf_r+0x94>
 8008158:	460c      	mov	r4, r1
 800815a:	2001      	movs	r0, #1
 800815c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008160:	e7a5      	b.n	80080ae <_vfiprintf_r+0x11a>
 8008162:	2300      	movs	r3, #0
 8008164:	f04f 0c0a 	mov.w	ip, #10
 8008168:	4619      	mov	r1, r3
 800816a:	3401      	adds	r4, #1
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	4620      	mov	r0, r4
 8008170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008174:	3a30      	subs	r2, #48	; 0x30
 8008176:	2a09      	cmp	r2, #9
 8008178:	d903      	bls.n	8008182 <_vfiprintf_r+0x1ee>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0c5      	beq.n	800810a <_vfiprintf_r+0x176>
 800817e:	9105      	str	r1, [sp, #20]
 8008180:	e7c3      	b.n	800810a <_vfiprintf_r+0x176>
 8008182:	4604      	mov	r4, r0
 8008184:	2301      	movs	r3, #1
 8008186:	fb0c 2101 	mla	r1, ip, r1, r2
 800818a:	e7f0      	b.n	800816e <_vfiprintf_r+0x1da>
 800818c:	ab03      	add	r3, sp, #12
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	462a      	mov	r2, r5
 8008192:	4630      	mov	r0, r6
 8008194:	4b15      	ldr	r3, [pc, #84]	; (80081ec <_vfiprintf_r+0x258>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	f7fd fe1e 	bl	8005dd8 <_printf_float>
 800819c:	4607      	mov	r7, r0
 800819e:	1c78      	adds	r0, r7, #1
 80081a0:	d1d6      	bne.n	8008150 <_vfiprintf_r+0x1bc>
 80081a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a4:	07d9      	lsls	r1, r3, #31
 80081a6:	d405      	bmi.n	80081b4 <_vfiprintf_r+0x220>
 80081a8:	89ab      	ldrh	r3, [r5, #12]
 80081aa:	059a      	lsls	r2, r3, #22
 80081ac:	d402      	bmi.n	80081b4 <_vfiprintf_r+0x220>
 80081ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b0:	f000 faaf 	bl	8008712 <__retarget_lock_release_recursive>
 80081b4:	89ab      	ldrh	r3, [r5, #12]
 80081b6:	065b      	lsls	r3, r3, #25
 80081b8:	f53f af12 	bmi.w	8007fe0 <_vfiprintf_r+0x4c>
 80081bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081be:	e711      	b.n	8007fe4 <_vfiprintf_r+0x50>
 80081c0:	ab03      	add	r3, sp, #12
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	462a      	mov	r2, r5
 80081c6:	4630      	mov	r0, r6
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <_vfiprintf_r+0x258>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	f7fe f8a0 	bl	8006310 <_printf_i>
 80081d0:	e7e4      	b.n	800819c <_vfiprintf_r+0x208>
 80081d2:	bf00      	nop
 80081d4:	080093dc 	.word	0x080093dc
 80081d8:	080093fc 	.word	0x080093fc
 80081dc:	080093bc 	.word	0x080093bc
 80081e0:	08009264 	.word	0x08009264
 80081e4:	0800926e 	.word	0x0800926e
 80081e8:	08005dd9 	.word	0x08005dd9
 80081ec:	08007f6f 	.word	0x08007f6f
 80081f0:	0800926a 	.word	0x0800926a

080081f4 <__swbuf_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	4605      	mov	r5, r0
 80081fc:	b118      	cbz	r0, 8008206 <__swbuf_r+0x12>
 80081fe:	6983      	ldr	r3, [r0, #24]
 8008200:	b90b      	cbnz	r3, 8008206 <__swbuf_r+0x12>
 8008202:	f000 f9e7 	bl	80085d4 <__sinit>
 8008206:	4b21      	ldr	r3, [pc, #132]	; (800828c <__swbuf_r+0x98>)
 8008208:	429c      	cmp	r4, r3
 800820a:	d12b      	bne.n	8008264 <__swbuf_r+0x70>
 800820c:	686c      	ldr	r4, [r5, #4]
 800820e:	69a3      	ldr	r3, [r4, #24]
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	071a      	lsls	r2, r3, #28
 8008216:	d52f      	bpl.n	8008278 <__swbuf_r+0x84>
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	b36b      	cbz	r3, 8008278 <__swbuf_r+0x84>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	6820      	ldr	r0, [r4, #0]
 8008220:	b2f6      	uxtb	r6, r6
 8008222:	1ac0      	subs	r0, r0, r3
 8008224:	6963      	ldr	r3, [r4, #20]
 8008226:	4637      	mov	r7, r6
 8008228:	4283      	cmp	r3, r0
 800822a:	dc04      	bgt.n	8008236 <__swbuf_r+0x42>
 800822c:	4621      	mov	r1, r4
 800822e:	4628      	mov	r0, r5
 8008230:	f000 f93c 	bl	80084ac <_fflush_r>
 8008234:	bb30      	cbnz	r0, 8008284 <__swbuf_r+0x90>
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	3001      	adds	r0, #1
 800823a:	3b01      	subs	r3, #1
 800823c:	60a3      	str	r3, [r4, #8]
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	6022      	str	r2, [r4, #0]
 8008244:	701e      	strb	r6, [r3, #0]
 8008246:	6963      	ldr	r3, [r4, #20]
 8008248:	4283      	cmp	r3, r0
 800824a:	d004      	beq.n	8008256 <__swbuf_r+0x62>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	07db      	lsls	r3, r3, #31
 8008250:	d506      	bpl.n	8008260 <__swbuf_r+0x6c>
 8008252:	2e0a      	cmp	r6, #10
 8008254:	d104      	bne.n	8008260 <__swbuf_r+0x6c>
 8008256:	4621      	mov	r1, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f000 f927 	bl	80084ac <_fflush_r>
 800825e:	b988      	cbnz	r0, 8008284 <__swbuf_r+0x90>
 8008260:	4638      	mov	r0, r7
 8008262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008264:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <__swbuf_r+0x9c>)
 8008266:	429c      	cmp	r4, r3
 8008268:	d101      	bne.n	800826e <__swbuf_r+0x7a>
 800826a:	68ac      	ldr	r4, [r5, #8]
 800826c:	e7cf      	b.n	800820e <__swbuf_r+0x1a>
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <__swbuf_r+0xa0>)
 8008270:	429c      	cmp	r4, r3
 8008272:	bf08      	it	eq
 8008274:	68ec      	ldreq	r4, [r5, #12]
 8008276:	e7ca      	b.n	800820e <__swbuf_r+0x1a>
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f000 f81a 	bl	80082b4 <__swsetup_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	d0cb      	beq.n	800821c <__swbuf_r+0x28>
 8008284:	f04f 37ff 	mov.w	r7, #4294967295
 8008288:	e7ea      	b.n	8008260 <__swbuf_r+0x6c>
 800828a:	bf00      	nop
 800828c:	080093dc 	.word	0x080093dc
 8008290:	080093fc 	.word	0x080093fc
 8008294:	080093bc 	.word	0x080093bc

08008298 <__ascii_wctomb>:
 8008298:	4603      	mov	r3, r0
 800829a:	4608      	mov	r0, r1
 800829c:	b141      	cbz	r1, 80082b0 <__ascii_wctomb+0x18>
 800829e:	2aff      	cmp	r2, #255	; 0xff
 80082a0:	d904      	bls.n	80082ac <__ascii_wctomb+0x14>
 80082a2:	228a      	movs	r2, #138	; 0x8a
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	4770      	bx	lr
 80082ac:	2001      	movs	r0, #1
 80082ae:	700a      	strb	r2, [r1, #0]
 80082b0:	4770      	bx	lr
	...

080082b4 <__swsetup_r>:
 80082b4:	4b32      	ldr	r3, [pc, #200]	; (8008380 <__swsetup_r+0xcc>)
 80082b6:	b570      	push	{r4, r5, r6, lr}
 80082b8:	681d      	ldr	r5, [r3, #0]
 80082ba:	4606      	mov	r6, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	b125      	cbz	r5, 80082ca <__swsetup_r+0x16>
 80082c0:	69ab      	ldr	r3, [r5, #24]
 80082c2:	b913      	cbnz	r3, 80082ca <__swsetup_r+0x16>
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 f985 	bl	80085d4 <__sinit>
 80082ca:	4b2e      	ldr	r3, [pc, #184]	; (8008384 <__swsetup_r+0xd0>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d10f      	bne.n	80082f0 <__swsetup_r+0x3c>
 80082d0:	686c      	ldr	r4, [r5, #4]
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d8:	0719      	lsls	r1, r3, #28
 80082da:	d42c      	bmi.n	8008336 <__swsetup_r+0x82>
 80082dc:	06dd      	lsls	r5, r3, #27
 80082de:	d411      	bmi.n	8008304 <__swsetup_r+0x50>
 80082e0:	2309      	movs	r3, #9
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	e03e      	b.n	800836e <__swsetup_r+0xba>
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <__swsetup_r+0xd4>)
 80082f2:	429c      	cmp	r4, r3
 80082f4:	d101      	bne.n	80082fa <__swsetup_r+0x46>
 80082f6:	68ac      	ldr	r4, [r5, #8]
 80082f8:	e7eb      	b.n	80082d2 <__swsetup_r+0x1e>
 80082fa:	4b24      	ldr	r3, [pc, #144]	; (800838c <__swsetup_r+0xd8>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	bf08      	it	eq
 8008300:	68ec      	ldreq	r4, [r5, #12]
 8008302:	e7e6      	b.n	80082d2 <__swsetup_r+0x1e>
 8008304:	0758      	lsls	r0, r3, #29
 8008306:	d512      	bpl.n	800832e <__swsetup_r+0x7a>
 8008308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800830a:	b141      	cbz	r1, 800831e <__swsetup_r+0x6a>
 800830c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008310:	4299      	cmp	r1, r3
 8008312:	d002      	beq.n	800831a <__swsetup_r+0x66>
 8008314:	4630      	mov	r0, r6
 8008316:	f7ff fb75 	bl	8007a04 <_free_r>
 800831a:	2300      	movs	r3, #0
 800831c:	6363      	str	r3, [r4, #52]	; 0x34
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	2300      	movs	r3, #0
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f043 0308 	orr.w	r3, r3, #8
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	b94b      	cbnz	r3, 800834e <__swsetup_r+0x9a>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008344:	d003      	beq.n	800834e <__swsetup_r+0x9a>
 8008346:	4621      	mov	r1, r4
 8008348:	4630      	mov	r0, r6
 800834a:	f000 fa07 	bl	800875c <__smakebuf_r>
 800834e:	89a0      	ldrh	r0, [r4, #12]
 8008350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008354:	f010 0301 	ands.w	r3, r0, #1
 8008358:	d00a      	beq.n	8008370 <__swsetup_r+0xbc>
 800835a:	2300      	movs	r3, #0
 800835c:	60a3      	str	r3, [r4, #8]
 800835e:	6963      	ldr	r3, [r4, #20]
 8008360:	425b      	negs	r3, r3
 8008362:	61a3      	str	r3, [r4, #24]
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	b943      	cbnz	r3, 800837a <__swsetup_r+0xc6>
 8008368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800836c:	d1ba      	bne.n	80082e4 <__swsetup_r+0x30>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	0781      	lsls	r1, r0, #30
 8008372:	bf58      	it	pl
 8008374:	6963      	ldrpl	r3, [r4, #20]
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	e7f4      	b.n	8008364 <__swsetup_r+0xb0>
 800837a:	2000      	movs	r0, #0
 800837c:	e7f7      	b.n	800836e <__swsetup_r+0xba>
 800837e:	bf00      	nop
 8008380:	20000024 	.word	0x20000024
 8008384:	080093dc 	.word	0x080093dc
 8008388:	080093fc 	.word	0x080093fc
 800838c:	080093bc 	.word	0x080093bc

08008390 <abort>:
 8008390:	2006      	movs	r0, #6
 8008392:	b508      	push	{r3, lr}
 8008394:	f000 fa52 	bl	800883c <raise>
 8008398:	2001      	movs	r0, #1
 800839a:	f7f9 feaa 	bl	80020f2 <_exit>
	...

080083a0 <__sflush_r>:
 80083a0:	898a      	ldrh	r2, [r1, #12]
 80083a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	4605      	mov	r5, r0
 80083a8:	0710      	lsls	r0, r2, #28
 80083aa:	460c      	mov	r4, r1
 80083ac:	d458      	bmi.n	8008460 <__sflush_r+0xc0>
 80083ae:	684b      	ldr	r3, [r1, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dc05      	bgt.n	80083c0 <__sflush_r+0x20>
 80083b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	dc02      	bgt.n	80083c0 <__sflush_r+0x20>
 80083ba:	2000      	movs	r0, #0
 80083bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	d0f9      	beq.n	80083ba <__sflush_r+0x1a>
 80083c6:	2300      	movs	r3, #0
 80083c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083cc:	682f      	ldr	r7, [r5, #0]
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	d032      	beq.n	8008438 <__sflush_r+0x98>
 80083d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	075a      	lsls	r2, r3, #29
 80083d8:	d505      	bpl.n	80083e6 <__sflush_r+0x46>
 80083da:	6863      	ldr	r3, [r4, #4]
 80083dc:	1ac0      	subs	r0, r0, r3
 80083de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083e0:	b10b      	cbz	r3, 80083e6 <__sflush_r+0x46>
 80083e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083e4:	1ac0      	subs	r0, r0, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	4602      	mov	r2, r0
 80083ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083ec:	4628      	mov	r0, r5
 80083ee:	6a21      	ldr	r1, [r4, #32]
 80083f0:	47b0      	blx	r6
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	d106      	bne.n	8008406 <__sflush_r+0x66>
 80083f8:	6829      	ldr	r1, [r5, #0]
 80083fa:	291d      	cmp	r1, #29
 80083fc:	d82c      	bhi.n	8008458 <__sflush_r+0xb8>
 80083fe:	4a2a      	ldr	r2, [pc, #168]	; (80084a8 <__sflush_r+0x108>)
 8008400:	40ca      	lsrs	r2, r1
 8008402:	07d6      	lsls	r6, r2, #31
 8008404:	d528      	bpl.n	8008458 <__sflush_r+0xb8>
 8008406:	2200      	movs	r2, #0
 8008408:	6062      	str	r2, [r4, #4]
 800840a:	6922      	ldr	r2, [r4, #16]
 800840c:	04d9      	lsls	r1, r3, #19
 800840e:	6022      	str	r2, [r4, #0]
 8008410:	d504      	bpl.n	800841c <__sflush_r+0x7c>
 8008412:	1c42      	adds	r2, r0, #1
 8008414:	d101      	bne.n	800841a <__sflush_r+0x7a>
 8008416:	682b      	ldr	r3, [r5, #0]
 8008418:	b903      	cbnz	r3, 800841c <__sflush_r+0x7c>
 800841a:	6560      	str	r0, [r4, #84]	; 0x54
 800841c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800841e:	602f      	str	r7, [r5, #0]
 8008420:	2900      	cmp	r1, #0
 8008422:	d0ca      	beq.n	80083ba <__sflush_r+0x1a>
 8008424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008428:	4299      	cmp	r1, r3
 800842a:	d002      	beq.n	8008432 <__sflush_r+0x92>
 800842c:	4628      	mov	r0, r5
 800842e:	f7ff fae9 	bl	8007a04 <_free_r>
 8008432:	2000      	movs	r0, #0
 8008434:	6360      	str	r0, [r4, #52]	; 0x34
 8008436:	e7c1      	b.n	80083bc <__sflush_r+0x1c>
 8008438:	6a21      	ldr	r1, [r4, #32]
 800843a:	2301      	movs	r3, #1
 800843c:	4628      	mov	r0, r5
 800843e:	47b0      	blx	r6
 8008440:	1c41      	adds	r1, r0, #1
 8008442:	d1c7      	bne.n	80083d4 <__sflush_r+0x34>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0c4      	beq.n	80083d4 <__sflush_r+0x34>
 800844a:	2b1d      	cmp	r3, #29
 800844c:	d001      	beq.n	8008452 <__sflush_r+0xb2>
 800844e:	2b16      	cmp	r3, #22
 8008450:	d101      	bne.n	8008456 <__sflush_r+0xb6>
 8008452:	602f      	str	r7, [r5, #0]
 8008454:	e7b1      	b.n	80083ba <__sflush_r+0x1a>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	e7ad      	b.n	80083bc <__sflush_r+0x1c>
 8008460:	690f      	ldr	r7, [r1, #16]
 8008462:	2f00      	cmp	r7, #0
 8008464:	d0a9      	beq.n	80083ba <__sflush_r+0x1a>
 8008466:	0793      	lsls	r3, r2, #30
 8008468:	bf18      	it	ne
 800846a:	2300      	movne	r3, #0
 800846c:	680e      	ldr	r6, [r1, #0]
 800846e:	bf08      	it	eq
 8008470:	694b      	ldreq	r3, [r1, #20]
 8008472:	eba6 0807 	sub.w	r8, r6, r7
 8008476:	600f      	str	r7, [r1, #0]
 8008478:	608b      	str	r3, [r1, #8]
 800847a:	f1b8 0f00 	cmp.w	r8, #0
 800847e:	dd9c      	ble.n	80083ba <__sflush_r+0x1a>
 8008480:	4643      	mov	r3, r8
 8008482:	463a      	mov	r2, r7
 8008484:	4628      	mov	r0, r5
 8008486:	6a21      	ldr	r1, [r4, #32]
 8008488:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800848a:	47b0      	blx	r6
 800848c:	2800      	cmp	r0, #0
 800848e:	dc06      	bgt.n	800849e <__sflush_r+0xfe>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f04f 30ff 	mov.w	r0, #4294967295
 8008496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	e78e      	b.n	80083bc <__sflush_r+0x1c>
 800849e:	4407      	add	r7, r0
 80084a0:	eba8 0800 	sub.w	r8, r8, r0
 80084a4:	e7e9      	b.n	800847a <__sflush_r+0xda>
 80084a6:	bf00      	nop
 80084a8:	20400001 	.word	0x20400001

080084ac <_fflush_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	690b      	ldr	r3, [r1, #16]
 80084b0:	4605      	mov	r5, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	b913      	cbnz	r3, 80084bc <_fflush_r+0x10>
 80084b6:	2500      	movs	r5, #0
 80084b8:	4628      	mov	r0, r5
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	b118      	cbz	r0, 80084c6 <_fflush_r+0x1a>
 80084be:	6983      	ldr	r3, [r0, #24]
 80084c0:	b90b      	cbnz	r3, 80084c6 <_fflush_r+0x1a>
 80084c2:	f000 f887 	bl	80085d4 <__sinit>
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <_fflush_r+0x6c>)
 80084c8:	429c      	cmp	r4, r3
 80084ca:	d11b      	bne.n	8008504 <_fflush_r+0x58>
 80084cc:	686c      	ldr	r4, [r5, #4]
 80084ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0ef      	beq.n	80084b6 <_fflush_r+0xa>
 80084d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084d8:	07d0      	lsls	r0, r2, #31
 80084da:	d404      	bmi.n	80084e6 <_fflush_r+0x3a>
 80084dc:	0599      	lsls	r1, r3, #22
 80084de:	d402      	bmi.n	80084e6 <_fflush_r+0x3a>
 80084e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084e2:	f000 f915 	bl	8008710 <__retarget_lock_acquire_recursive>
 80084e6:	4628      	mov	r0, r5
 80084e8:	4621      	mov	r1, r4
 80084ea:	f7ff ff59 	bl	80083a0 <__sflush_r>
 80084ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f0:	4605      	mov	r5, r0
 80084f2:	07da      	lsls	r2, r3, #31
 80084f4:	d4e0      	bmi.n	80084b8 <_fflush_r+0xc>
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	059b      	lsls	r3, r3, #22
 80084fa:	d4dd      	bmi.n	80084b8 <_fflush_r+0xc>
 80084fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084fe:	f000 f908 	bl	8008712 <__retarget_lock_release_recursive>
 8008502:	e7d9      	b.n	80084b8 <_fflush_r+0xc>
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <_fflush_r+0x70>)
 8008506:	429c      	cmp	r4, r3
 8008508:	d101      	bne.n	800850e <_fflush_r+0x62>
 800850a:	68ac      	ldr	r4, [r5, #8]
 800850c:	e7df      	b.n	80084ce <_fflush_r+0x22>
 800850e:	4b04      	ldr	r3, [pc, #16]	; (8008520 <_fflush_r+0x74>)
 8008510:	429c      	cmp	r4, r3
 8008512:	bf08      	it	eq
 8008514:	68ec      	ldreq	r4, [r5, #12]
 8008516:	e7da      	b.n	80084ce <_fflush_r+0x22>
 8008518:	080093dc 	.word	0x080093dc
 800851c:	080093fc 	.word	0x080093fc
 8008520:	080093bc 	.word	0x080093bc

08008524 <std>:
 8008524:	2300      	movs	r3, #0
 8008526:	b510      	push	{r4, lr}
 8008528:	4604      	mov	r4, r0
 800852a:	e9c0 3300 	strd	r3, r3, [r0]
 800852e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008532:	6083      	str	r3, [r0, #8]
 8008534:	8181      	strh	r1, [r0, #12]
 8008536:	6643      	str	r3, [r0, #100]	; 0x64
 8008538:	81c2      	strh	r2, [r0, #14]
 800853a:	6183      	str	r3, [r0, #24]
 800853c:	4619      	mov	r1, r3
 800853e:	2208      	movs	r2, #8
 8008540:	305c      	adds	r0, #92	; 0x5c
 8008542:	f7fd fba3 	bl	8005c8c <memset>
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <std+0x38>)
 8008548:	6224      	str	r4, [r4, #32]
 800854a:	6263      	str	r3, [r4, #36]	; 0x24
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <std+0x3c>)
 800854e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008550:	4b04      	ldr	r3, [pc, #16]	; (8008564 <std+0x40>)
 8008552:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008554:	4b04      	ldr	r3, [pc, #16]	; (8008568 <std+0x44>)
 8008556:	6323      	str	r3, [r4, #48]	; 0x30
 8008558:	bd10      	pop	{r4, pc}
 800855a:	bf00      	nop
 800855c:	08008875 	.word	0x08008875
 8008560:	08008897 	.word	0x08008897
 8008564:	080088cf 	.word	0x080088cf
 8008568:	080088f3 	.word	0x080088f3

0800856c <_cleanup_r>:
 800856c:	4901      	ldr	r1, [pc, #4]	; (8008574 <_cleanup_r+0x8>)
 800856e:	f000 b8af 	b.w	80086d0 <_fwalk_reent>
 8008572:	bf00      	nop
 8008574:	080084ad 	.word	0x080084ad

08008578 <__sfmoreglue>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	2568      	movs	r5, #104	; 0x68
 800857c:	1e4a      	subs	r2, r1, #1
 800857e:	4355      	muls	r5, r2
 8008580:	460e      	mov	r6, r1
 8008582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008586:	f7ff fa89 	bl	8007a9c <_malloc_r>
 800858a:	4604      	mov	r4, r0
 800858c:	b140      	cbz	r0, 80085a0 <__sfmoreglue+0x28>
 800858e:	2100      	movs	r1, #0
 8008590:	e9c0 1600 	strd	r1, r6, [r0]
 8008594:	300c      	adds	r0, #12
 8008596:	60a0      	str	r0, [r4, #8]
 8008598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800859c:	f7fd fb76 	bl	8005c8c <memset>
 80085a0:	4620      	mov	r0, r4
 80085a2:	bd70      	pop	{r4, r5, r6, pc}

080085a4 <__sfp_lock_acquire>:
 80085a4:	4801      	ldr	r0, [pc, #4]	; (80085ac <__sfp_lock_acquire+0x8>)
 80085a6:	f000 b8b3 	b.w	8008710 <__retarget_lock_acquire_recursive>
 80085aa:	bf00      	nop
 80085ac:	20000440 	.word	0x20000440

080085b0 <__sfp_lock_release>:
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <__sfp_lock_release+0x8>)
 80085b2:	f000 b8ae 	b.w	8008712 <__retarget_lock_release_recursive>
 80085b6:	bf00      	nop
 80085b8:	20000440 	.word	0x20000440

080085bc <__sinit_lock_acquire>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__sinit_lock_acquire+0x8>)
 80085be:	f000 b8a7 	b.w	8008710 <__retarget_lock_acquire_recursive>
 80085c2:	bf00      	nop
 80085c4:	2000043b 	.word	0x2000043b

080085c8 <__sinit_lock_release>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__sinit_lock_release+0x8>)
 80085ca:	f000 b8a2 	b.w	8008712 <__retarget_lock_release_recursive>
 80085ce:	bf00      	nop
 80085d0:	2000043b 	.word	0x2000043b

080085d4 <__sinit>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	f7ff fff0 	bl	80085bc <__sinit_lock_acquire>
 80085dc:	69a3      	ldr	r3, [r4, #24]
 80085de:	b11b      	cbz	r3, 80085e8 <__sinit+0x14>
 80085e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e4:	f7ff bff0 	b.w	80085c8 <__sinit_lock_release>
 80085e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085ec:	6523      	str	r3, [r4, #80]	; 0x50
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <__sinit+0x68>)
 80085f0:	4a13      	ldr	r2, [pc, #76]	; (8008640 <__sinit+0x6c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80085f6:	42a3      	cmp	r3, r4
 80085f8:	bf08      	it	eq
 80085fa:	2301      	moveq	r3, #1
 80085fc:	4620      	mov	r0, r4
 80085fe:	bf08      	it	eq
 8008600:	61a3      	streq	r3, [r4, #24]
 8008602:	f000 f81f 	bl	8008644 <__sfp>
 8008606:	6060      	str	r0, [r4, #4]
 8008608:	4620      	mov	r0, r4
 800860a:	f000 f81b 	bl	8008644 <__sfp>
 800860e:	60a0      	str	r0, [r4, #8]
 8008610:	4620      	mov	r0, r4
 8008612:	f000 f817 	bl	8008644 <__sfp>
 8008616:	2200      	movs	r2, #0
 8008618:	2104      	movs	r1, #4
 800861a:	60e0      	str	r0, [r4, #12]
 800861c:	6860      	ldr	r0, [r4, #4]
 800861e:	f7ff ff81 	bl	8008524 <std>
 8008622:	2201      	movs	r2, #1
 8008624:	2109      	movs	r1, #9
 8008626:	68a0      	ldr	r0, [r4, #8]
 8008628:	f7ff ff7c 	bl	8008524 <std>
 800862c:	2202      	movs	r2, #2
 800862e:	2112      	movs	r1, #18
 8008630:	68e0      	ldr	r0, [r4, #12]
 8008632:	f7ff ff77 	bl	8008524 <std>
 8008636:	2301      	movs	r3, #1
 8008638:	61a3      	str	r3, [r4, #24]
 800863a:	e7d1      	b.n	80085e0 <__sinit+0xc>
 800863c:	08009038 	.word	0x08009038
 8008640:	0800856d 	.word	0x0800856d

08008644 <__sfp>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	4607      	mov	r7, r0
 8008648:	f7ff ffac 	bl	80085a4 <__sfp_lock_acquire>
 800864c:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <__sfp+0x84>)
 800864e:	681e      	ldr	r6, [r3, #0]
 8008650:	69b3      	ldr	r3, [r6, #24]
 8008652:	b913      	cbnz	r3, 800865a <__sfp+0x16>
 8008654:	4630      	mov	r0, r6
 8008656:	f7ff ffbd 	bl	80085d4 <__sinit>
 800865a:	3648      	adds	r6, #72	; 0x48
 800865c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008660:	3b01      	subs	r3, #1
 8008662:	d503      	bpl.n	800866c <__sfp+0x28>
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	b30b      	cbz	r3, 80086ac <__sfp+0x68>
 8008668:	6836      	ldr	r6, [r6, #0]
 800866a:	e7f7      	b.n	800865c <__sfp+0x18>
 800866c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008670:	b9d5      	cbnz	r5, 80086a8 <__sfp+0x64>
 8008672:	4b16      	ldr	r3, [pc, #88]	; (80086cc <__sfp+0x88>)
 8008674:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008678:	60e3      	str	r3, [r4, #12]
 800867a:	6665      	str	r5, [r4, #100]	; 0x64
 800867c:	f000 f847 	bl	800870e <__retarget_lock_init_recursive>
 8008680:	f7ff ff96 	bl	80085b0 <__sfp_lock_release>
 8008684:	2208      	movs	r2, #8
 8008686:	4629      	mov	r1, r5
 8008688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800868c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008690:	6025      	str	r5, [r4, #0]
 8008692:	61a5      	str	r5, [r4, #24]
 8008694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008698:	f7fd faf8 	bl	8005c8c <memset>
 800869c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086a4:	4620      	mov	r0, r4
 80086a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a8:	3468      	adds	r4, #104	; 0x68
 80086aa:	e7d9      	b.n	8008660 <__sfp+0x1c>
 80086ac:	2104      	movs	r1, #4
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7ff ff62 	bl	8008578 <__sfmoreglue>
 80086b4:	4604      	mov	r4, r0
 80086b6:	6030      	str	r0, [r6, #0]
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1d5      	bne.n	8008668 <__sfp+0x24>
 80086bc:	f7ff ff78 	bl	80085b0 <__sfp_lock_release>
 80086c0:	230c      	movs	r3, #12
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	e7ee      	b.n	80086a4 <__sfp+0x60>
 80086c6:	bf00      	nop
 80086c8:	08009038 	.word	0x08009038
 80086cc:	ffff0001 	.word	0xffff0001

080086d0 <_fwalk_reent>:
 80086d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d4:	4606      	mov	r6, r0
 80086d6:	4688      	mov	r8, r1
 80086d8:	2700      	movs	r7, #0
 80086da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086e2:	f1b9 0901 	subs.w	r9, r9, #1
 80086e6:	d505      	bpl.n	80086f4 <_fwalk_reent+0x24>
 80086e8:	6824      	ldr	r4, [r4, #0]
 80086ea:	2c00      	cmp	r4, #0
 80086ec:	d1f7      	bne.n	80086de <_fwalk_reent+0xe>
 80086ee:	4638      	mov	r0, r7
 80086f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f4:	89ab      	ldrh	r3, [r5, #12]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d907      	bls.n	800870a <_fwalk_reent+0x3a>
 80086fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086fe:	3301      	adds	r3, #1
 8008700:	d003      	beq.n	800870a <_fwalk_reent+0x3a>
 8008702:	4629      	mov	r1, r5
 8008704:	4630      	mov	r0, r6
 8008706:	47c0      	blx	r8
 8008708:	4307      	orrs	r7, r0
 800870a:	3568      	adds	r5, #104	; 0x68
 800870c:	e7e9      	b.n	80086e2 <_fwalk_reent+0x12>

0800870e <__retarget_lock_init_recursive>:
 800870e:	4770      	bx	lr

08008710 <__retarget_lock_acquire_recursive>:
 8008710:	4770      	bx	lr

08008712 <__retarget_lock_release_recursive>:
 8008712:	4770      	bx	lr

08008714 <__swhatbuf_r>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	460e      	mov	r6, r1
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	4614      	mov	r4, r2
 800871e:	2900      	cmp	r1, #0
 8008720:	461d      	mov	r5, r3
 8008722:	b096      	sub	sp, #88	; 0x58
 8008724:	da07      	bge.n	8008736 <__swhatbuf_r+0x22>
 8008726:	2300      	movs	r3, #0
 8008728:	602b      	str	r3, [r5, #0]
 800872a:	89b3      	ldrh	r3, [r6, #12]
 800872c:	061a      	lsls	r2, r3, #24
 800872e:	d410      	bmi.n	8008752 <__swhatbuf_r+0x3e>
 8008730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008734:	e00e      	b.n	8008754 <__swhatbuf_r+0x40>
 8008736:	466a      	mov	r2, sp
 8008738:	f000 f902 	bl	8008940 <_fstat_r>
 800873c:	2800      	cmp	r0, #0
 800873e:	dbf2      	blt.n	8008726 <__swhatbuf_r+0x12>
 8008740:	9a01      	ldr	r2, [sp, #4]
 8008742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800874a:	425a      	negs	r2, r3
 800874c:	415a      	adcs	r2, r3
 800874e:	602a      	str	r2, [r5, #0]
 8008750:	e7ee      	b.n	8008730 <__swhatbuf_r+0x1c>
 8008752:	2340      	movs	r3, #64	; 0x40
 8008754:	2000      	movs	r0, #0
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	b016      	add	sp, #88	; 0x58
 800875a:	bd70      	pop	{r4, r5, r6, pc}

0800875c <__smakebuf_r>:
 800875c:	898b      	ldrh	r3, [r1, #12]
 800875e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008760:	079d      	lsls	r5, r3, #30
 8008762:	4606      	mov	r6, r0
 8008764:	460c      	mov	r4, r1
 8008766:	d507      	bpl.n	8008778 <__smakebuf_r+0x1c>
 8008768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	2301      	movs	r3, #1
 8008772:	6163      	str	r3, [r4, #20]
 8008774:	b002      	add	sp, #8
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	466a      	mov	r2, sp
 800877a:	ab01      	add	r3, sp, #4
 800877c:	f7ff ffca 	bl	8008714 <__swhatbuf_r>
 8008780:	9900      	ldr	r1, [sp, #0]
 8008782:	4605      	mov	r5, r0
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff f989 	bl	8007a9c <_malloc_r>
 800878a:	b948      	cbnz	r0, 80087a0 <__smakebuf_r+0x44>
 800878c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008790:	059a      	lsls	r2, r3, #22
 8008792:	d4ef      	bmi.n	8008774 <__smakebuf_r+0x18>
 8008794:	f023 0303 	bic.w	r3, r3, #3
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	e7e3      	b.n	8008768 <__smakebuf_r+0xc>
 80087a0:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <__smakebuf_r+0x7c>)
 80087a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	6020      	str	r0, [r4, #0]
 80087a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	9b00      	ldr	r3, [sp, #0]
 80087b0:	6120      	str	r0, [r4, #16]
 80087b2:	6163      	str	r3, [r4, #20]
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	b15b      	cbz	r3, 80087d0 <__smakebuf_r+0x74>
 80087b8:	4630      	mov	r0, r6
 80087ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087be:	f000 f8d1 	bl	8008964 <_isatty_r>
 80087c2:	b128      	cbz	r0, 80087d0 <__smakebuf_r+0x74>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f023 0303 	bic.w	r3, r3, #3
 80087ca:	f043 0301 	orr.w	r3, r3, #1
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	89a0      	ldrh	r0, [r4, #12]
 80087d2:	4305      	orrs	r5, r0
 80087d4:	81a5      	strh	r5, [r4, #12]
 80087d6:	e7cd      	b.n	8008774 <__smakebuf_r+0x18>
 80087d8:	0800856d 	.word	0x0800856d

080087dc <_malloc_usable_size_r>:
 80087dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e0:	1f18      	subs	r0, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfbc      	itt	lt
 80087e6:	580b      	ldrlt	r3, [r1, r0]
 80087e8:	18c0      	addlt	r0, r0, r3
 80087ea:	4770      	bx	lr

080087ec <_raise_r>:
 80087ec:	291f      	cmp	r1, #31
 80087ee:	b538      	push	{r3, r4, r5, lr}
 80087f0:	4604      	mov	r4, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	d904      	bls.n	8008800 <_raise_r+0x14>
 80087f6:	2316      	movs	r3, #22
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	f04f 30ff 	mov.w	r0, #4294967295
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008802:	b112      	cbz	r2, 800880a <_raise_r+0x1e>
 8008804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008808:	b94b      	cbnz	r3, 800881e <_raise_r+0x32>
 800880a:	4620      	mov	r0, r4
 800880c:	f000 f830 	bl	8008870 <_getpid_r>
 8008810:	462a      	mov	r2, r5
 8008812:	4601      	mov	r1, r0
 8008814:	4620      	mov	r0, r4
 8008816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800881a:	f000 b817 	b.w	800884c <_kill_r>
 800881e:	2b01      	cmp	r3, #1
 8008820:	d00a      	beq.n	8008838 <_raise_r+0x4c>
 8008822:	1c59      	adds	r1, r3, #1
 8008824:	d103      	bne.n	800882e <_raise_r+0x42>
 8008826:	2316      	movs	r3, #22
 8008828:	6003      	str	r3, [r0, #0]
 800882a:	2001      	movs	r0, #1
 800882c:	e7e7      	b.n	80087fe <_raise_r+0x12>
 800882e:	2400      	movs	r4, #0
 8008830:	4628      	mov	r0, r5
 8008832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008836:	4798      	blx	r3
 8008838:	2000      	movs	r0, #0
 800883a:	e7e0      	b.n	80087fe <_raise_r+0x12>

0800883c <raise>:
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <raise+0xc>)
 800883e:	4601      	mov	r1, r0
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	f7ff bfd3 	b.w	80087ec <_raise_r>
 8008846:	bf00      	nop
 8008848:	20000024 	.word	0x20000024

0800884c <_kill_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	2300      	movs	r3, #0
 8008850:	4d06      	ldr	r5, [pc, #24]	; (800886c <_kill_r+0x20>)
 8008852:	4604      	mov	r4, r0
 8008854:	4608      	mov	r0, r1
 8008856:	4611      	mov	r1, r2
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	f7f9 fc3a 	bl	80020d2 <_kill>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d102      	bne.n	8008868 <_kill_r+0x1c>
 8008862:	682b      	ldr	r3, [r5, #0]
 8008864:	b103      	cbz	r3, 8008868 <_kill_r+0x1c>
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	bd38      	pop	{r3, r4, r5, pc}
 800886a:	bf00      	nop
 800886c:	20000434 	.word	0x20000434

08008870 <_getpid_r>:
 8008870:	f7f9 bc28 	b.w	80020c4 <_getpid>

08008874 <__sread>:
 8008874:	b510      	push	{r4, lr}
 8008876:	460c      	mov	r4, r1
 8008878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887c:	f000 f894 	bl	80089a8 <_read_r>
 8008880:	2800      	cmp	r0, #0
 8008882:	bfab      	itete	ge
 8008884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008886:	89a3      	ldrhlt	r3, [r4, #12]
 8008888:	181b      	addge	r3, r3, r0
 800888a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800888e:	bfac      	ite	ge
 8008890:	6563      	strge	r3, [r4, #84]	; 0x54
 8008892:	81a3      	strhlt	r3, [r4, #12]
 8008894:	bd10      	pop	{r4, pc}

08008896 <__swrite>:
 8008896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889a:	461f      	mov	r7, r3
 800889c:	898b      	ldrh	r3, [r1, #12]
 800889e:	4605      	mov	r5, r0
 80088a0:	05db      	lsls	r3, r3, #23
 80088a2:	460c      	mov	r4, r1
 80088a4:	4616      	mov	r6, r2
 80088a6:	d505      	bpl.n	80088b4 <__swrite+0x1e>
 80088a8:	2302      	movs	r3, #2
 80088aa:	2200      	movs	r2, #0
 80088ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b0:	f000 f868 	bl	8008984 <_lseek_r>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	4632      	mov	r2, r6
 80088b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088bc:	81a3      	strh	r3, [r4, #12]
 80088be:	4628      	mov	r0, r5
 80088c0:	463b      	mov	r3, r7
 80088c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ca:	f000 b817 	b.w	80088fc <_write_r>

080088ce <__sseek>:
 80088ce:	b510      	push	{r4, lr}
 80088d0:	460c      	mov	r4, r1
 80088d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d6:	f000 f855 	bl	8008984 <_lseek_r>
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	bf15      	itete	ne
 80088e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ea:	81a3      	strheq	r3, [r4, #12]
 80088ec:	bf18      	it	ne
 80088ee:	81a3      	strhne	r3, [r4, #12]
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <__sclose>:
 80088f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f6:	f000 b813 	b.w	8008920 <_close_r>
	...

080088fc <_write_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	2200      	movs	r2, #0
 8008906:	4d05      	ldr	r5, [pc, #20]	; (800891c <_write_r+0x20>)
 8008908:	602a      	str	r2, [r5, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f7f9 fc18 	bl	8002140 <_write>
 8008910:	1c43      	adds	r3, r0, #1
 8008912:	d102      	bne.n	800891a <_write_r+0x1e>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b103      	cbz	r3, 800891a <_write_r+0x1e>
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	bd38      	pop	{r3, r4, r5, pc}
 800891c:	20000434 	.word	0x20000434

08008920 <_close_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	2300      	movs	r3, #0
 8008924:	4d05      	ldr	r5, [pc, #20]	; (800893c <_close_r+0x1c>)
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f7f9 fc24 	bl	8002178 <_close>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_close_r+0x1a>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_close_r+0x1a>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	20000434 	.word	0x20000434

08008940 <_fstat_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	2300      	movs	r3, #0
 8008944:	4d06      	ldr	r5, [pc, #24]	; (8008960 <_fstat_r+0x20>)
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	4611      	mov	r1, r2
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	f7f9 fc1e 	bl	800218e <_fstat>
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d102      	bne.n	800895c <_fstat_r+0x1c>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	b103      	cbz	r3, 800895c <_fstat_r+0x1c>
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	20000434 	.word	0x20000434

08008964 <_isatty_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	2300      	movs	r3, #0
 8008968:	4d05      	ldr	r5, [pc, #20]	; (8008980 <_isatty_r+0x1c>)
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7f9 fc1c 	bl	80021ac <_isatty>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_isatty_r+0x1a>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_isatty_r+0x1a>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000434 	.word	0x20000434

08008984 <_lseek_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	2200      	movs	r2, #0
 800898e:	4d05      	ldr	r5, [pc, #20]	; (80089a4 <_lseek_r+0x20>)
 8008990:	602a      	str	r2, [r5, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	f7f9 fc14 	bl	80021c0 <_lseek>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_lseek_r+0x1e>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_lseek_r+0x1e>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	20000434 	.word	0x20000434

080089a8 <_read_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4604      	mov	r4, r0
 80089ac:	4608      	mov	r0, r1
 80089ae:	4611      	mov	r1, r2
 80089b0:	2200      	movs	r2, #0
 80089b2:	4d05      	ldr	r5, [pc, #20]	; (80089c8 <_read_r+0x20>)
 80089b4:	602a      	str	r2, [r5, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f7f9 fba5 	bl	8002106 <_read>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_read_r+0x1e>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_read_r+0x1e>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	20000434 	.word	0x20000434

080089cc <asin>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	f000 f855 	bl	8008a80 <__ieee754_asin>
 80089d6:	4b11      	ldr	r3, [pc, #68]	; (8008a1c <asin+0x50>)
 80089d8:	4606      	mov	r6, r0
 80089da:	f993 3000 	ldrsb.w	r3, [r3]
 80089de:	460f      	mov	r7, r1
 80089e0:	3301      	adds	r3, #1
 80089e2:	d018      	beq.n	8008a16 <asin+0x4a>
 80089e4:	4622      	mov	r2, r4
 80089e6:	462b      	mov	r3, r5
 80089e8:	4620      	mov	r0, r4
 80089ea:	4629      	mov	r1, r5
 80089ec:	f7f8 f80e 	bl	8000a0c <__aeabi_dcmpun>
 80089f0:	b988      	cbnz	r0, 8008a16 <asin+0x4a>
 80089f2:	4620      	mov	r0, r4
 80089f4:	4629      	mov	r1, r5
 80089f6:	f000 faeb 	bl	8008fd0 <fabs>
 80089fa:	2200      	movs	r2, #0
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <asin+0x54>)
 80089fe:	f7f7 fffb 	bl	80009f8 <__aeabi_dcmpgt>
 8008a02:	b140      	cbz	r0, 8008a16 <asin+0x4a>
 8008a04:	f7fd f918 	bl	8005c38 <__errno>
 8008a08:	2321      	movs	r3, #33	; 0x21
 8008a0a:	6003      	str	r3, [r0, #0]
 8008a0c:	4805      	ldr	r0, [pc, #20]	; (8008a24 <asin+0x58>)
 8008a0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a12:	f000 bae1 	b.w	8008fd8 <nan>
 8008a16:	4630      	mov	r0, r6
 8008a18:	4639      	mov	r1, r7
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1c:	200001f4 	.word	0x200001f4
 8008a20:	3ff00000 	.word	0x3ff00000
 8008a24:	080092b0 	.word	0x080092b0

08008a28 <sqrt>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f000 fa23 	bl	8008e78 <__ieee754_sqrt>
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <sqrt+0x54>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	f993 3000 	ldrsb.w	r3, [r3]
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	d019      	beq.n	8008a74 <sqrt+0x4c>
 8008a40:	4632      	mov	r2, r6
 8008a42:	463b      	mov	r3, r7
 8008a44:	4630      	mov	r0, r6
 8008a46:	4639      	mov	r1, r7
 8008a48:	f7f7 ffe0 	bl	8000a0c <__aeabi_dcmpun>
 8008a4c:	b990      	cbnz	r0, 8008a74 <sqrt+0x4c>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2300      	movs	r3, #0
 8008a52:	4630      	mov	r0, r6
 8008a54:	4639      	mov	r1, r7
 8008a56:	f7f7 ffb1 	bl	80009bc <__aeabi_dcmplt>
 8008a5a:	b158      	cbz	r0, 8008a74 <sqrt+0x4c>
 8008a5c:	f7fd f8ec 	bl	8005c38 <__errno>
 8008a60:	2321      	movs	r3, #33	; 0x21
 8008a62:	2200      	movs	r2, #0
 8008a64:	6003      	str	r3, [r0, #0]
 8008a66:	2300      	movs	r3, #0
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	f7f7 fe5e 	bl	800072c <__aeabi_ddiv>
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	4620      	mov	r0, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200001f4 	.word	0x200001f4

08008a80 <__ieee754_asin>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4bc4      	ldr	r3, [pc, #784]	; (8008d98 <__ieee754_asin+0x318>)
 8008a86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	429e      	cmp	r6, r3
 8008a8e:	4602      	mov	r2, r0
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	9105      	str	r1, [sp, #20]
 8008a96:	dd29      	ble.n	8008aec <__ieee754_asin+0x6c>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8008a9e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008aa2:	4333      	orrs	r3, r6
 8008aa4:	d114      	bne.n	8008ad0 <__ieee754_asin+0x50>
 8008aa6:	a3a2      	add	r3, pc, #648	; (adr r3, 8008d30 <__ieee754_asin+0x2b0>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fd14 	bl	80004d8 <__aeabi_dmul>
 8008ab0:	a3a1      	add	r3, pc, #644	; (adr r3, 8008d38 <__ieee754_asin+0x2b8>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fd0b 	bl	80004d8 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fb4f 	bl	800016c <__adddf3>
 8008ace:	e006      	b.n	8008ade <__ieee754_asin+0x5e>
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	f7f7 fb49 	bl	8000168 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	f7f7 fe27 	bl	800072c <__aeabi_ddiv>
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	b007      	add	sp, #28
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	4bab      	ldr	r3, [pc, #684]	; (8008d9c <__ieee754_asin+0x31c>)
 8008aee:	429e      	cmp	r6, r3
 8008af0:	dc0e      	bgt.n	8008b10 <__ieee754_asin+0x90>
 8008af2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008af6:	f280 80ab 	bge.w	8008c50 <__ieee754_asin+0x1d0>
 8008afa:	a391      	add	r3, pc, #580	; (adr r3, 8008d40 <__ieee754_asin+0x2c0>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f7f7 fb34 	bl	800016c <__adddf3>
 8008b04:	2200      	movs	r2, #0
 8008b06:	4ba6      	ldr	r3, [pc, #664]	; (8008da0 <__ieee754_asin+0x320>)
 8008b08:	f7f7 ff76 	bl	80009f8 <__aeabi_dcmpgt>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d1e8      	bne.n	8008ae2 <__ieee754_asin+0x62>
 8008b10:	4620      	mov	r0, r4
 8008b12:	4629      	mov	r1, r5
 8008b14:	f000 fa5c 	bl	8008fd0 <fabs>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	49a0      	ldr	r1, [pc, #640]	; (8008da0 <__ieee754_asin+0x320>)
 8008b20:	f7f7 fb22 	bl	8000168 <__aeabi_dsub>
 8008b24:	2200      	movs	r2, #0
 8008b26:	4b9f      	ldr	r3, [pc, #636]	; (8008da4 <__ieee754_asin+0x324>)
 8008b28:	f7f7 fcd6 	bl	80004d8 <__aeabi_dmul>
 8008b2c:	a386      	add	r3, pc, #536	; (adr r3, 8008d48 <__ieee754_asin+0x2c8>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	4604      	mov	r4, r0
 8008b34:	460d      	mov	r5, r1
 8008b36:	f7f7 fccf 	bl	80004d8 <__aeabi_dmul>
 8008b3a:	a385      	add	r3, pc, #532	; (adr r3, 8008d50 <__ieee754_asin+0x2d0>)
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f7f7 fb14 	bl	800016c <__adddf3>
 8008b44:	4622      	mov	r2, r4
 8008b46:	462b      	mov	r3, r5
 8008b48:	f7f7 fcc6 	bl	80004d8 <__aeabi_dmul>
 8008b4c:	a382      	add	r3, pc, #520	; (adr r3, 8008d58 <__ieee754_asin+0x2d8>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f7f7 fb09 	bl	8000168 <__aeabi_dsub>
 8008b56:	4622      	mov	r2, r4
 8008b58:	462b      	mov	r3, r5
 8008b5a:	f7f7 fcbd 	bl	80004d8 <__aeabi_dmul>
 8008b5e:	a380      	add	r3, pc, #512	; (adr r3, 8008d60 <__ieee754_asin+0x2e0>)
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	f7f7 fb02 	bl	800016c <__adddf3>
 8008b68:	4622      	mov	r2, r4
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	f7f7 fcb4 	bl	80004d8 <__aeabi_dmul>
 8008b70:	a37d      	add	r3, pc, #500	; (adr r3, 8008d68 <__ieee754_asin+0x2e8>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f7f7 faf7 	bl	8000168 <__aeabi_dsub>
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	f7f7 fcab 	bl	80004d8 <__aeabi_dmul>
 8008b82:	a37b      	add	r3, pc, #492	; (adr r3, 8008d70 <__ieee754_asin+0x2f0>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 faf0 	bl	800016c <__adddf3>
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	462b      	mov	r3, r5
 8008b90:	f7f7 fca2 	bl	80004d8 <__aeabi_dmul>
 8008b94:	a378      	add	r3, pc, #480	; (adr r3, 8008d78 <__ieee754_asin+0x2f8>)
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 fc99 	bl	80004d8 <__aeabi_dmul>
 8008ba6:	a376      	add	r3, pc, #472	; (adr r3, 8008d80 <__ieee754_asin+0x300>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f7f7 fadc 	bl	8000168 <__aeabi_dsub>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	f7f7 fc90 	bl	80004d8 <__aeabi_dmul>
 8008bb8:	a373      	add	r3, pc, #460	; (adr r3, 8008d88 <__ieee754_asin+0x308>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	f7f7 fad5 	bl	800016c <__adddf3>
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	f7f7 fc87 	bl	80004d8 <__aeabi_dmul>
 8008bca:	a371      	add	r3, pc, #452	; (adr r3, 8008d90 <__ieee754_asin+0x310>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f7f7 faca 	bl	8000168 <__aeabi_dsub>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f7f7 fc7e 	bl	80004d8 <__aeabi_dmul>
 8008bdc:	4b70      	ldr	r3, [pc, #448]	; (8008da0 <__ieee754_asin+0x320>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	f7f7 fac4 	bl	800016c <__adddf3>
 8008be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f000 f944 	bl	8008e78 <__ieee754_sqrt>
 8008bf0:	4b6d      	ldr	r3, [pc, #436]	; (8008da8 <__ieee754_asin+0x328>)
 8008bf2:	4682      	mov	sl, r0
 8008bf4:	429e      	cmp	r6, r3
 8008bf6:	468b      	mov	fp, r1
 8008bf8:	f340 80d8 	ble.w	8008dac <__ieee754_asin+0x32c>
 8008bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c04:	f7f7 fd92 	bl	800072c <__aeabi_ddiv>
 8008c08:	4652      	mov	r2, sl
 8008c0a:	465b      	mov	r3, fp
 8008c0c:	f7f7 fc64 	bl	80004d8 <__aeabi_dmul>
 8008c10:	4652      	mov	r2, sl
 8008c12:	465b      	mov	r3, fp
 8008c14:	f7f7 faaa 	bl	800016c <__adddf3>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	f7f7 faa6 	bl	800016c <__adddf3>
 8008c20:	a345      	add	r3, pc, #276	; (adr r3, 8008d38 <__ieee754_asin+0x2b8>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f7f7 fa9f 	bl	8000168 <__aeabi_dsub>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	a140      	add	r1, pc, #256	; (adr r1, 8008d30 <__ieee754_asin+0x2b0>)
 8008c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c34:	f7f7 fa98 	bl	8000168 <__aeabi_dsub>
 8008c38:	9b05      	ldr	r3, [sp, #20]
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfdc      	itt	le
 8008c40:	4602      	movle	r2, r0
 8008c42:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008c46:	460d      	mov	r5, r1
 8008c48:	bfdc      	itt	le
 8008c4a:	4614      	movle	r4, r2
 8008c4c:	461d      	movle	r5, r3
 8008c4e:	e748      	b.n	8008ae2 <__ieee754_asin+0x62>
 8008c50:	460b      	mov	r3, r1
 8008c52:	f7f7 fc41 	bl	80004d8 <__aeabi_dmul>
 8008c56:	a33c      	add	r3, pc, #240	; (adr r3, 8008d48 <__ieee754_asin+0x2c8>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	460f      	mov	r7, r1
 8008c60:	f7f7 fc3a 	bl	80004d8 <__aeabi_dmul>
 8008c64:	a33a      	add	r3, pc, #232	; (adr r3, 8008d50 <__ieee754_asin+0x2d0>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fa7f 	bl	800016c <__adddf3>
 8008c6e:	4632      	mov	r2, r6
 8008c70:	463b      	mov	r3, r7
 8008c72:	f7f7 fc31 	bl	80004d8 <__aeabi_dmul>
 8008c76:	a338      	add	r3, pc, #224	; (adr r3, 8008d58 <__ieee754_asin+0x2d8>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f7f7 fa74 	bl	8000168 <__aeabi_dsub>
 8008c80:	4632      	mov	r2, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	f7f7 fc28 	bl	80004d8 <__aeabi_dmul>
 8008c88:	a335      	add	r3, pc, #212	; (adr r3, 8008d60 <__ieee754_asin+0x2e0>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fa6d 	bl	800016c <__adddf3>
 8008c92:	4632      	mov	r2, r6
 8008c94:	463b      	mov	r3, r7
 8008c96:	f7f7 fc1f 	bl	80004d8 <__aeabi_dmul>
 8008c9a:	a333      	add	r3, pc, #204	; (adr r3, 8008d68 <__ieee754_asin+0x2e8>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f7f7 fa62 	bl	8000168 <__aeabi_dsub>
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	f7f7 fc16 	bl	80004d8 <__aeabi_dmul>
 8008cac:	a330      	add	r3, pc, #192	; (adr r3, 8008d70 <__ieee754_asin+0x2f0>)
 8008cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb2:	f7f7 fa5b 	bl	800016c <__adddf3>
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	463b      	mov	r3, r7
 8008cba:	f7f7 fc0d 	bl	80004d8 <__aeabi_dmul>
 8008cbe:	a32e      	add	r3, pc, #184	; (adr r3, 8008d78 <__ieee754_asin+0x2f8>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	4689      	mov	r9, r1
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f7f7 fc04 	bl	80004d8 <__aeabi_dmul>
 8008cd0:	a32b      	add	r3, pc, #172	; (adr r3, 8008d80 <__ieee754_asin+0x300>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f7f7 fa47 	bl	8000168 <__aeabi_dsub>
 8008cda:	4632      	mov	r2, r6
 8008cdc:	463b      	mov	r3, r7
 8008cde:	f7f7 fbfb 	bl	80004d8 <__aeabi_dmul>
 8008ce2:	a329      	add	r3, pc, #164	; (adr r3, 8008d88 <__ieee754_asin+0x308>)
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	f7f7 fa40 	bl	800016c <__adddf3>
 8008cec:	4632      	mov	r2, r6
 8008cee:	463b      	mov	r3, r7
 8008cf0:	f7f7 fbf2 	bl	80004d8 <__aeabi_dmul>
 8008cf4:	a326      	add	r3, pc, #152	; (adr r3, 8008d90 <__ieee754_asin+0x310>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fa35 	bl	8000168 <__aeabi_dsub>
 8008cfe:	4632      	mov	r2, r6
 8008d00:	463b      	mov	r3, r7
 8008d02:	f7f7 fbe9 	bl	80004d8 <__aeabi_dmul>
 8008d06:	2200      	movs	r2, #0
 8008d08:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <__ieee754_asin+0x320>)
 8008d0a:	f7f7 fa2f 	bl	800016c <__adddf3>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fd09 	bl	800072c <__aeabi_ddiv>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	f7f7 fbdb 	bl	80004d8 <__aeabi_dmul>
 8008d22:	4602      	mov	r2, r0
 8008d24:	460b      	mov	r3, r1
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	e6ce      	b.n	8008aca <__ieee754_asin+0x4a>
 8008d2c:	f3af 8000 	nop.w
 8008d30:	54442d18 	.word	0x54442d18
 8008d34:	3ff921fb 	.word	0x3ff921fb
 8008d38:	33145c07 	.word	0x33145c07
 8008d3c:	3c91a626 	.word	0x3c91a626
 8008d40:	8800759c 	.word	0x8800759c
 8008d44:	7e37e43c 	.word	0x7e37e43c
 8008d48:	0dfdf709 	.word	0x0dfdf709
 8008d4c:	3f023de1 	.word	0x3f023de1
 8008d50:	7501b288 	.word	0x7501b288
 8008d54:	3f49efe0 	.word	0x3f49efe0
 8008d58:	b5688f3b 	.word	0xb5688f3b
 8008d5c:	3fa48228 	.word	0x3fa48228
 8008d60:	0e884455 	.word	0x0e884455
 8008d64:	3fc9c155 	.word	0x3fc9c155
 8008d68:	03eb6f7d 	.word	0x03eb6f7d
 8008d6c:	3fd4d612 	.word	0x3fd4d612
 8008d70:	55555555 	.word	0x55555555
 8008d74:	3fc55555 	.word	0x3fc55555
 8008d78:	b12e9282 	.word	0xb12e9282
 8008d7c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008d80:	1b8d0159 	.word	0x1b8d0159
 8008d84:	3fe6066c 	.word	0x3fe6066c
 8008d88:	9c598ac8 	.word	0x9c598ac8
 8008d8c:	40002ae5 	.word	0x40002ae5
 8008d90:	1c8a2d4b 	.word	0x1c8a2d4b
 8008d94:	40033a27 	.word	0x40033a27
 8008d98:	3fefffff 	.word	0x3fefffff
 8008d9c:	3fdfffff 	.word	0x3fdfffff
 8008da0:	3ff00000 	.word	0x3ff00000
 8008da4:	3fe00000 	.word	0x3fe00000
 8008da8:	3fef3332 	.word	0x3fef3332
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	f7f7 f9dc 	bl	800016c <__adddf3>
 8008db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dc0:	f7f7 fcb4 	bl	800072c <__aeabi_ddiv>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fb84 	bl	80004d8 <__aeabi_dmul>
 8008dd0:	f04f 0800 	mov.w	r8, #0
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460f      	mov	r7, r1
 8008dd8:	4642      	mov	r2, r8
 8008dda:	465b      	mov	r3, fp
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4659      	mov	r1, fp
 8008de0:	f7f7 fb7a 	bl	80004d8 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 f9bc 	bl	8000168 <__aeabi_dsub>
 8008df0:	4642      	mov	r2, r8
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	465b      	mov	r3, fp
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 f9b6 	bl	800016c <__adddf3>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fc90 	bl	800072c <__aeabi_ddiv>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	f7f7 f9ac 	bl	800016c <__adddf3>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	a113      	add	r1, pc, #76	; (adr r1, 8008e68 <__ieee754_asin+0x3e8>)
 8008e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1e:	f7f7 f9a3 	bl	8000168 <__aeabi_dsub>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 f99d 	bl	8000168 <__aeabi_dsub>
 8008e2e:	4642      	mov	r2, r8
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	465b      	mov	r3, fp
 8008e36:	4640      	mov	r0, r8
 8008e38:	4659      	mov	r1, fp
 8008e3a:	f7f7 f997 	bl	800016c <__adddf3>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	a10b      	add	r1, pc, #44	; (adr r1, 8008e70 <__ieee754_asin+0x3f0>)
 8008e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e48:	f7f7 f98e 	bl	8000168 <__aeabi_dsub>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 f988 	bl	8000168 <__aeabi_dsub>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	a104      	add	r1, pc, #16	; (adr r1, 8008e70 <__ieee754_asin+0x3f0>)
 8008e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e62:	e6e7      	b.n	8008c34 <__ieee754_asin+0x1b4>
 8008e64:	f3af 8000 	nop.w
 8008e68:	33145c07 	.word	0x33145c07
 8008e6c:	3c91a626 	.word	0x3c91a626
 8008e70:	54442d18 	.word	0x54442d18
 8008e74:	3fe921fb 	.word	0x3fe921fb

08008e78 <__ieee754_sqrt>:
 8008e78:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008fcc <__ieee754_sqrt+0x154>
 8008e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e80:	ea3c 0c01 	bics.w	ip, ip, r1
 8008e84:	460b      	mov	r3, r1
 8008e86:	4606      	mov	r6, r0
 8008e88:	460d      	mov	r5, r1
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	4607      	mov	r7, r0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	d10e      	bne.n	8008eb0 <__ieee754_sqrt+0x38>
 8008e92:	4602      	mov	r2, r0
 8008e94:	f7f7 fb20 	bl	80004d8 <__aeabi_dmul>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 f964 	bl	800016c <__adddf3>
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460d      	mov	r5, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4629      	mov	r1, r5
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	dc0d      	bgt.n	8008ed0 <__ieee754_sqrt+0x58>
 8008eb4:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008eb8:	ea5c 0707 	orrs.w	r7, ip, r7
 8008ebc:	d0f4      	beq.n	8008ea8 <__ieee754_sqrt+0x30>
 8008ebe:	b139      	cbz	r1, 8008ed0 <__ieee754_sqrt+0x58>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	f7f7 f951 	bl	8000168 <__aeabi_dsub>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	f7f7 fc2f 	bl	800072c <__aeabi_ddiv>
 8008ece:	e7e9      	b.n	8008ea4 <__ieee754_sqrt+0x2c>
 8008ed0:	1512      	asrs	r2, r2, #20
 8008ed2:	d074      	beq.n	8008fbe <__ieee754_sqrt+0x146>
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	07d5      	lsls	r5, r2, #31
 8008ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008edc:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008ee0:	bf5e      	ittt	pl
 8008ee2:	0fe3      	lsrpl	r3, r4, #31
 8008ee4:	0064      	lslpl	r4, r4, #1
 8008ee6:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8008eea:	0fe3      	lsrs	r3, r4, #31
 8008eec:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008ef0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008ef4:	2516      	movs	r5, #22
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008efc:	1076      	asrs	r6, r6, #1
 8008efe:	0064      	lsls	r4, r4, #1
 8008f00:	188f      	adds	r7, r1, r2
 8008f02:	429f      	cmp	r7, r3
 8008f04:	bfde      	ittt	le
 8008f06:	1bdb      	suble	r3, r3, r7
 8008f08:	18b9      	addle	r1, r7, r2
 8008f0a:	1880      	addle	r0, r0, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	3d01      	subs	r5, #1
 8008f10:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008f14:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f18:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008f1c:	d1f0      	bne.n	8008f00 <__ieee754_sqrt+0x88>
 8008f1e:	462a      	mov	r2, r5
 8008f20:	f04f 0e20 	mov.w	lr, #32
 8008f24:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008f28:	428b      	cmp	r3, r1
 8008f2a:	eb07 0c05 	add.w	ip, r7, r5
 8008f2e:	dc02      	bgt.n	8008f36 <__ieee754_sqrt+0xbe>
 8008f30:	d113      	bne.n	8008f5a <__ieee754_sqrt+0xe2>
 8008f32:	45a4      	cmp	ip, r4
 8008f34:	d811      	bhi.n	8008f5a <__ieee754_sqrt+0xe2>
 8008f36:	f1bc 0f00 	cmp.w	ip, #0
 8008f3a:	eb0c 0507 	add.w	r5, ip, r7
 8008f3e:	da43      	bge.n	8008fc8 <__ieee754_sqrt+0x150>
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	db41      	blt.n	8008fc8 <__ieee754_sqrt+0x150>
 8008f44:	f101 0801 	add.w	r8, r1, #1
 8008f48:	1a5b      	subs	r3, r3, r1
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	45a4      	cmp	ip, r4
 8008f4e:	bf88      	it	hi
 8008f50:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008f54:	eba4 040c 	sub.w	r4, r4, ip
 8008f58:	443a      	add	r2, r7
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	f1be 0e01 	subs.w	lr, lr, #1
 8008f60:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008f64:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008f68:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008f6c:	d1dc      	bne.n	8008f28 <__ieee754_sqrt+0xb0>
 8008f6e:	4323      	orrs	r3, r4
 8008f70:	d006      	beq.n	8008f80 <__ieee754_sqrt+0x108>
 8008f72:	1c54      	adds	r4, r2, #1
 8008f74:	bf0b      	itete	eq
 8008f76:	4672      	moveq	r2, lr
 8008f78:	3201      	addne	r2, #1
 8008f7a:	3001      	addeq	r0, #1
 8008f7c:	f022 0201 	bicne.w	r2, r2, #1
 8008f80:	1043      	asrs	r3, r0, #1
 8008f82:	07c1      	lsls	r1, r0, #31
 8008f84:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008f8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008f90:	bf48      	it	mi
 8008f92:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008f96:	4610      	mov	r0, r2
 8008f98:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008f9c:	e782      	b.n	8008ea4 <__ieee754_sqrt+0x2c>
 8008f9e:	0ae3      	lsrs	r3, r4, #11
 8008fa0:	3915      	subs	r1, #21
 8008fa2:	0564      	lsls	r4, r4, #21
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0fa      	beq.n	8008f9e <__ieee754_sqrt+0x126>
 8008fa8:	02de      	lsls	r6, r3, #11
 8008faa:	d50a      	bpl.n	8008fc2 <__ieee754_sqrt+0x14a>
 8008fac:	f1c2 0020 	rsb	r0, r2, #32
 8008fb0:	fa24 f000 	lsr.w	r0, r4, r0
 8008fb4:	1e55      	subs	r5, r2, #1
 8008fb6:	4094      	lsls	r4, r2
 8008fb8:	4303      	orrs	r3, r0
 8008fba:	1b4a      	subs	r2, r1, r5
 8008fbc:	e78a      	b.n	8008ed4 <__ieee754_sqrt+0x5c>
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	e7f0      	b.n	8008fa4 <__ieee754_sqrt+0x12c>
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	3201      	adds	r2, #1
 8008fc6:	e7ef      	b.n	8008fa8 <__ieee754_sqrt+0x130>
 8008fc8:	4688      	mov	r8, r1
 8008fca:	e7bd      	b.n	8008f48 <__ieee754_sqrt+0xd0>
 8008fcc:	7ff00000 	.word	0x7ff00000

08008fd0 <fabs>:
 8008fd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fd4:	4770      	bx	lr
	...

08008fd8 <nan>:
 8008fd8:	2000      	movs	r0, #0
 8008fda:	4901      	ldr	r1, [pc, #4]	; (8008fe0 <nan+0x8>)
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	7ff80000 	.word	0x7ff80000

08008fe4 <_init>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr

08008ff0 <_fini>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr
