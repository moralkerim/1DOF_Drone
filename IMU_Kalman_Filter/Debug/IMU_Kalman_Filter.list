
IMU_Kalman_Filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008d78  08008d78  00018d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800918c  0800918c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800918c  0800918c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800918c  0800918c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800918c  0800918c  0001918c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001ec  08009380  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08009380  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2dd  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff9  00000000  00000000  0002f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ddf  00000000  00000000  00033220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa5c  00000000  00000000  0004bfff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5cf  00000000  00000000  0005ba5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea02a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  000ea080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d5c 	.word	0x08008d5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008d5c 	.word	0x08008d5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f001 f838 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f854 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 fa4e 	bl	8001490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ff4:	f000 f894 	bl	8001120 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ff8:	f000 f950 	bl	800129c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ffc:	f000 f8be 	bl	800117c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001000:	f000 f998 	bl	8001334 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001004:	f000 fa1a 	bl	800143c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Baslat();
 8001008:	f000 faae 	bl	8001568 <MPU6050_Baslat>
  //Gyro kalibrasyon hatalarını hesapla.
  gyro_e_x = GyroErr(GYRO_X_ADDR);
 800100c:	2043      	movs	r0, #67	; 0x43
 800100e:	f000 fb01 	bl	8001614 <GyroErr>
 8001012:	4603      	mov	r3, r0
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <main+0x94>)
 8001016:	6013      	str	r3, [r2, #0]

  //Kontrolcü Timer'ı
  HAL_TIM_Base_Start_IT(&htim2);
 8001018:	4818      	ldr	r0, [pc, #96]	; (800107c <main+0x98>)
 800101a:	f002 ffaf 	bl	8003f7c <HAL_TIM_Base_Start_IT>

  //PWM çıkış timer'ları
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800101e:	2100      	movs	r1, #0
 8001020:	4817      	ldr	r0, [pc, #92]	; (8001080 <main+0x9c>)
 8001022:	f003 f84d 	bl	80040c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001026:	2104      	movs	r1, #4
 8001028:	4815      	ldr	r0, [pc, #84]	; (8001080 <main+0x9c>)
 800102a:	f003 f849 	bl	80040c0 <HAL_TIM_PWM_Start>

  //PWM Input Capture Kanalları
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800102e:	2104      	movs	r1, #4
 8001030:	4814      	ldr	r0, [pc, #80]	; (8001084 <main+0xa0>)
 8001032:	f003 f93f 	bl	80042b4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8001036:	2108      	movs	r1, #8
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <main+0xa0>)
 800103a:	f003 f93b 	bl	80042b4 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sprintf(buf,"%.3f \n\r",alpha);
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <main+0xa4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f9f0 	bl	8000428 <__aeabi_f2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	490f      	ldr	r1, [pc, #60]	; (800108c <main+0xa8>)
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <main+0xac>)
 8001050:	f005 f940 	bl	80062d4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 1000);
 8001054:	480e      	ldr	r0, [pc, #56]	; (8001090 <main+0xac>)
 8001056:	f7ff f87b 	bl	8000150 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	490b      	ldr	r1, [pc, #44]	; (8001090 <main+0xac>)
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <main+0xb0>)
 8001066:	f004 fb39 	bl	80056dc <HAL_UART_Transmit>
	  PWMYaz(1200, 1200);
 800106a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800106e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001072:	f000 fc43 	bl	80018fc <PWMYaz>
	  sprintf(buf,"%.3f \n\r",alpha);
 8001076:	e7e2      	b.n	800103e <main+0x5a>
 8001078:	200002e8 	.word	0x200002e8
 800107c:	200003a8 	.word	0x200003a8
 8001080:	200002f0 	.word	0x200002f0
 8001084:	20000290 	.word	0x20000290
 8001088:	20000450 	.word	0x20000450
 800108c:	08008d78 	.word	0x08008d78
 8001090:	20000340 	.word	0x20000340
 8001094:	200003f0 	.word	0x200003f0

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b090      	sub	sp, #64	; 0x40
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fcac 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010cc:	2302      	movs	r3, #2
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80010d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fae1 	bl	80036a8 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010ec:	f000 fd02 	bl	8001af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fd4d 	bl	8003ba8 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001114:	f000 fcee 	bl	8001af4 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3740      	adds	r7, #64	; 0x40
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2C1_Init+0x50>)
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <MX_I2C1_Init+0x54>)
 8001128:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_I2C1_Init+0x50>)
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MX_I2C1_Init+0x58>)
 800112e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_I2C1_Init+0x50>)
 800113e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001142:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_I2C1_Init+0x50>)
 800115e:	f001 faa3 	bl	80026a8 <HAL_I2C_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001168:	f000 fcc4 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000224 	.word	0x20000224
 8001174:	40005400 	.word	0x40005400
 8001178:	00061a80 	.word	0x00061a80

0800117c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b092      	sub	sp, #72	; 0x48
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f004 fc2c 	bl	8005a04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ac:	4b39      	ldr	r3, [pc, #228]	; (8001294 <MX_TIM1_Init+0x118>)
 80011ae:	4a3a      	ldr	r2, [pc, #232]	; (8001298 <MX_TIM1_Init+0x11c>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <MX_TIM1_Init+0x118>)
 80011b4:	221f      	movs	r2, #31
 80011b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <MX_TIM1_Init+0x118>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80011be:	4b35      	ldr	r3, [pc, #212]	; (8001294 <MX_TIM1_Init+0x118>)
 80011c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <MX_TIM1_Init+0x118>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011cc:	4b31      	ldr	r3, [pc, #196]	; (8001294 <MX_TIM1_Init+0x118>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <MX_TIM1_Init+0x118>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d8:	482e      	ldr	r0, [pc, #184]	; (8001294 <MX_TIM1_Init+0x118>)
 80011da:	f002 ff21 	bl	8004020 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011e4:	f000 fc86 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f4:	4619      	mov	r1, r3
 80011f6:	4827      	ldr	r0, [pc, #156]	; (8001294 <MX_TIM1_Init+0x118>)
 80011f8:	f004 f962 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001202:	f000 fc77 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	; 0x60
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	2200      	movs	r2, #0
 8001228:	4619      	mov	r1, r3
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_TIM1_Init+0x118>)
 800122c:	f003 fae4 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001236:	f000 fc5d 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <MX_TIM1_Init+0x118>)
 8001244:	f003 fad8 	bl	80047f8 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800124e:	f000 fc51 	bl	8001af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM1_Init+0x118>)
 8001276:	f004 f981 	bl	800557c <HAL_TIMEx_ConfigBreakDeadTime>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001280:	f000 fc38 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM1_Init+0x118>)
 8001286:	f000 fd43 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3748      	adds	r7, #72	; 0x48
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002f0 	.word	0x200002f0
 8001298:	40012c00 	.word	0x40012c00

0800129c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_TIM2_Init+0x94>)
 80012ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_TIM2_Init+0x94>)
 80012c2:	221f      	movs	r2, #31
 80012c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM2_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_TIM2_Init+0x94>)
 80012ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_TIM2_Init+0x94>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM2_Init+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e0:	4813      	ldr	r0, [pc, #76]	; (8001330 <MX_TIM2_Init+0x94>)
 80012e2:	f002 fdfb 	bl	8003edc <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012ec:	f000 fc02 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <MX_TIM2_Init+0x94>)
 80012fe:	f003 fb39 	bl	8004974 <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001308:	f000 fbf4 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_TIM2_Init+0x94>)
 800131a:	f004 f8d1 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001324:	f000 fbe6 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200003a8 	.word	0x200003a8

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <MX_TIM3_Init+0x100>)
 8001362:	4a35      	ldr	r2, [pc, #212]	; (8001438 <MX_TIM3_Init+0x104>)
 8001364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <MX_TIM3_Init+0x100>)
 8001368:	221f      	movs	r2, #31
 800136a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <MX_TIM3_Init+0x100>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <MX_TIM3_Init+0x100>)
 8001374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <MX_TIM3_Init+0x100>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <MX_TIM3_Init+0x100>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001386:	482b      	ldr	r0, [pc, #172]	; (8001434 <MX_TIM3_Init+0x100>)
 8001388:	f002 fda8 	bl	8003edc <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8001392:	f000 fbaf 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001396:	4827      	ldr	r0, [pc, #156]	; (8001434 <MX_TIM3_Init+0x100>)
 8001398:	f002 ff34 	bl	8004204 <HAL_TIM_IC_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80013a2:	f000 fba7 	bl	8001af4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013a6:	2304      	movs	r3, #4
 80013a8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 80013aa:	2360      	movs	r3, #96	; 0x60
 80013ac:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	481d      	ldr	r0, [pc, #116]	; (8001434 <MX_TIM3_Init+0x100>)
 80013be:	f003 fb9d 	bl	8004afc <HAL_TIM_SlaveConfigSynchro>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013c8:	f000 fb94 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4816      	ldr	r0, [pc, #88]	; (8001434 <MX_TIM3_Init+0x100>)
 80013dc:	f004 f870 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80013e6:	f000 fb85 	bl	8001af4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2204      	movs	r2, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_TIM3_Init+0x100>)
 8001402:	f003 f965 	bl	80046d0 <HAL_TIM_IC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800140c:	f000 fb72 	bl	8001af4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001410:	2302      	movs	r3, #2
 8001412:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2208      	movs	r2, #8
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_TIM3_Init+0x100>)
 800141c:	f003 f958 	bl	80046d0 <HAL_TIM_IC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001426:	f000 fb65 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	; 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000290 	.word	0x20000290
 8001438:	40000400 	.word	0x40000400

0800143c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART2_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001474:	f004 f8e5 	bl	8005642 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f000 fb39 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200003f0 	.word	0x200003f0
 800148c:	40004400 	.word	0x40004400

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_GPIO_Init+0xcc>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a2c      	ldr	r2, [pc, #176]	; (800155c <MX_GPIO_Init+0xcc>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <MX_GPIO_Init+0xcc>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_GPIO_Init+0xcc>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <MX_GPIO_Init+0xcc>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <MX_GPIO_Init+0xcc>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_GPIO_Init+0xcc>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a20      	ldr	r2, [pc, #128]	; (800155c <MX_GPIO_Init+0xcc>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_GPIO_Init+0xcc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_GPIO_Init+0xcc>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <MX_GPIO_Init+0xcc>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_GPIO_Init+0xcc>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <MX_GPIO_Init+0xd0>)
 800150c:	f001 f89a 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2102      	movs	r1, #2
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_GPIO_Init+0xd4>)
 8001516:	f001 f895 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_GPIO_Init+0xd0>)
 8001534:	f000 ff02 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2302      	movs	r3, #2
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_GPIO_Init+0xd4>)
 8001550:	f000 fef4 	bl	800233c <HAL_GPIO_Init>

}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	40011000 	.word	0x40011000
 8001564:	40010c00 	.word	0x40010c00

08001568 <MPU6050_Baslat>:

/* USER CODE BEGIN 4 */
void MPU6050_Baslat(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af04      	add	r7, sp, #16
	uint8_t config = 0x00;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, MPU6050_POW_REG, 1, &config, 1, 5); //Güç registerını aktif et
 8001572:	2305      	movs	r3, #5
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2301      	movs	r3, #1
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	226b      	movs	r2, #107	; 0x6b
 8001582:	21d0      	movs	r1, #208	; 0xd0
 8001584:	4811      	ldr	r0, [pc, #68]	; (80015cc <MPU6050_Baslat+0x64>)
 8001586:	f001 f9d3 	bl	8002930 <HAL_I2C_Mem_Write>
	config = 0x08;
 800158a:	2308      	movs	r3, #8
 800158c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, GYRO_CONF_REG, 1, &config, 1, 5); //Gyro 500 d/s'ye ayarlandi.
 800158e:	2305      	movs	r3, #5
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	2301      	movs	r3, #1
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	221b      	movs	r2, #27
 800159e:	21d0      	movs	r1, #208	; 0xd0
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <MPU6050_Baslat+0x64>)
 80015a2:	f001 f9c5 	bl	8002930 <HAL_I2C_Mem_Write>
	config = 0x10;
 80015a6:	2310      	movs	r3, #16
 80015a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)MPU6050, ACC_CONF_REG, 1, &config, 1, 5); //Acc +-8g'ye ayarlandi.
 80015aa:	2305      	movs	r3, #5
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	221c      	movs	r2, #28
 80015ba:	21d0      	movs	r1, #208	; 0xd0
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <MPU6050_Baslat+0x64>)
 80015be:	f001 f9b7 	bl	8002930 <HAL_I2C_Mem_Write>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000224 	.word	0x20000224

080015d0 <GyroOku>:

int16_t GyroOku (uint8_t addr) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_data[2];
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)MPU6050 | I2C_READ, addr, 1, gyro_data, 2, 1);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	2301      	movs	r3, #1
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	2302      	movs	r3, #2
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	21d1      	movs	r1, #209	; 0xd1
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <GyroOku+0x40>)
 80015f2:	f001 fa97 	bl	8002b24 <HAL_I2C_Mem_Read>
	int16_t gyro = gyro_data[0]<<8 | gyro_data[1];
 80015f6:	7b3b      	ldrb	r3, [r7, #12]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	81fb      	strh	r3, [r7, #14]
	return gyro;
 8001604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000224 	.word	0x20000224

08001614 <GyroErr>:

float GyroErr(uint8_t addr) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	float GyroXe=0;
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
	//2000 ornek al ve kayma degerini kaydet.
	for (int i=0; i<2000; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	e011      	b.n	800164e <GyroErr+0x3a>
	{
		GyroXe += (float)GyroOku(addr);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ffcf 	bl	80015d0 <GyroOku>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb31 	bl	8000c9c <__aeabi_i2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4619      	mov	r1, r3
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fa78 	bl	8000b34 <__addsf3>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2000; i++)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001654:	dbe9      	blt.n	800162a <GyroErr+0x16>

		} //Haberleşmeyi durdur.
	GyroXe=GyroXe/2000; //Son okunan değeri 2000'e böl.
 8001656:	4905      	ldr	r1, [pc, #20]	; (800166c <GyroErr+0x58>)
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fc27 	bl	8000eac <__aeabi_fdiv>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
	return GyroXe;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	44fa0000 	.word	0x44fa0000

08001670 <Kalman_Filtresi>:

void Kalman_Filtresi(void) {
 8001670:	b598      	push	{r3, r4, r7, lr}
 8001672:	af00      	add	r7, sp, #0

	//**Tahmin**
	alpha = alpha - bias*st + gyroX*st;
 8001674:	4b8f      	ldr	r3, [pc, #572]	; (80018b4 <Kalman_Filtresi+0x244>)
 8001676:	681c      	ldr	r4, [r3, #0]
 8001678:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <Kalman_Filtresi+0x248>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a8f      	ldr	r2, [pc, #572]	; (80018bc <Kalman_Filtresi+0x24c>)
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb5f 	bl	8000d44 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	4619      	mov	r1, r3
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff fa50 	bl	8000b30 <__aeabi_fsub>
 8001690:	4603      	mov	r3, r0
 8001692:	461c      	mov	r4, r3
 8001694:	4b8a      	ldr	r3, [pc, #552]	; (80018c0 <Kalman_Filtresi+0x250>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a88      	ldr	r2, [pc, #544]	; (80018bc <Kalman_Filtresi+0x24c>)
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb51 	bl	8000d44 <__aeabi_fmul>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fa44 	bl	8000b34 <__addsf3>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <Kalman_Filtresi+0x244>)
 80016b2:	601a      	str	r2, [r3, #0]
	S11_m = 2*sa+st*st*sb; S12_m=-st*sb;
 80016b4:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <Kalman_Filtresi+0x254>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fa3a 	bl	8000b34 <__addsf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461c      	mov	r4, r3
 80016c4:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <Kalman_Filtresi+0x24c>)
 80016c6:	4a7d      	ldr	r2, [pc, #500]	; (80018bc <Kalman_Filtresi+0x24c>)
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fb3a 	bl	8000d44 <__aeabi_fmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <Kalman_Filtresi+0x258>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f7ff fb32 	bl	8000d44 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff fa25 	bl	8000b34 <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b77      	ldr	r3, [pc, #476]	; (80018cc <Kalman_Filtresi+0x25c>)
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	4b72      	ldr	r3, [pc, #456]	; (80018bc <Kalman_Filtresi+0x24c>)
 80016f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016f8:	4a73      	ldr	r2, [pc, #460]	; (80018c8 <Kalman_Filtresi+0x258>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fb20 	bl	8000d44 <__aeabi_fmul>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <Kalman_Filtresi+0x260>)
 800170a:	601a      	str	r2, [r3, #0]
	S21_m = -st*sb; 	   S22_m=2*sb;
 800170c:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <Kalman_Filtresi+0x24c>)
 800170e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001712:	4a6d      	ldr	r2, [pc, #436]	; (80018c8 <Kalman_Filtresi+0x258>)
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fb13 	bl	8000d44 <__aeabi_fmul>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <Kalman_Filtresi+0x264>)
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <Kalman_Filtresi+0x258>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fa01 	bl	8000b34 <__addsf3>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <Kalman_Filtresi+0x268>)
 8001738:	601a      	str	r2, [r3, #0]

	//**Düzeltme**
	Kt11 = S11_m / (S11_m+Q);
 800173a:	4b64      	ldr	r3, [pc, #400]	; (80018cc <Kalman_Filtresi+0x25c>)
 800173c:	681c      	ldr	r4, [r3, #0]
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <Kalman_Filtresi+0x25c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a66      	ldr	r2, [pc, #408]	; (80018dc <Kalman_Filtresi+0x26c>)
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f9f3 	bl	8000b34 <__addsf3>
 800174e:	4603      	mov	r3, r0
 8001750:	4619      	mov	r1, r3
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fbaa 	bl	8000eac <__aeabi_fdiv>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b60      	ldr	r3, [pc, #384]	; (80018e0 <Kalman_Filtresi+0x270>)
 800175e:	601a      	str	r2, [r3, #0]
	Kt21 = S21_m / (S21_m+Q);
 8001760:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <Kalman_Filtresi+0x264>)
 8001762:	681c      	ldr	r4, [r3, #0]
 8001764:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <Kalman_Filtresi+0x264>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5c      	ldr	r2, [pc, #368]	; (80018dc <Kalman_Filtresi+0x26c>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f9e0 	bl	8000b34 <__addsf3>
 8001774:	4603      	mov	r3, r0
 8001776:	4619      	mov	r1, r3
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fb97 	bl	8000eac <__aeabi_fdiv>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <Kalman_Filtresi+0x274>)
 8001784:	601a      	str	r2, [r3, #0]

	alpha = alpha - Kt11*(alpha-pitch_acc);
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <Kalman_Filtresi+0x244>)
 8001788:	681c      	ldr	r4, [r3, #0]
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <Kalman_Filtresi+0x244>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a56      	ldr	r2, [pc, #344]	; (80018e8 <Kalman_Filtresi+0x278>)
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff f9cb 	bl	8000b30 <__aeabi_fsub>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <Kalman_Filtresi+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f7ff facd 	bl	8000d44 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff f9be 	bl	8000b30 <__aeabi_fsub>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <Kalman_Filtresi+0x244>)
 80017ba:	601a      	str	r2, [r3, #0]
	bias = bias - Kt21*(alpha-pitch_acc);
 80017bc:	4b3e      	ldr	r3, [pc, #248]	; (80018b8 <Kalman_Filtresi+0x248>)
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <Kalman_Filtresi+0x244>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <Kalman_Filtresi+0x278>)
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f9b0 	bl	8000b30 <__aeabi_fsub>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <Kalman_Filtresi+0x274>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f7ff fab2 	bl	8000d44 <__aeabi_fmul>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4620      	mov	r0, r4
 80017e6:	f7ff f9a3 	bl	8000b30 <__aeabi_fsub>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <Kalman_Filtresi+0x248>)
 80017f0:	601a      	str	r2, [r3, #0]

	S11_p = -S11_m*(Kt11-1);  S12_p = -S12_m*(Kt11-1);
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <Kalman_Filtresi+0x25c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80017fa:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <Kalman_Filtresi+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f994 	bl	8000b30 <__aeabi_fsub>
 8001808:	4603      	mov	r3, r0
 800180a:	4619      	mov	r1, r3
 800180c:	4620      	mov	r0, r4
 800180e:	f7ff fa99 	bl	8000d44 <__aeabi_fmul>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <Kalman_Filtresi+0x27c>)
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <Kalman_Filtresi+0x260>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <Kalman_Filtresi+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f980 	bl	8000b30 <__aeabi_fsub>
 8001830:	4603      	mov	r3, r0
 8001832:	4619      	mov	r1, r3
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fa85 	bl	8000d44 <__aeabi_fmul>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <Kalman_Filtresi+0x280>)
 8001840:	601a      	str	r2, [r3, #0]
	S21_p = S21_m-S11_m*Kt21; S22_p = S22_m-S12_m*Kt21;
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <Kalman_Filtresi+0x264>)
 8001844:	681c      	ldr	r4, [r3, #0]
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <Kalman_Filtresi+0x25c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <Kalman_Filtresi+0x274>)
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa77 	bl	8000d44 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff f968 	bl	8000b30 <__aeabi_fsub>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <Kalman_Filtresi+0x284>)
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <Kalman_Filtresi+0x268>)
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <Kalman_Filtresi+0x260>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <Kalman_Filtresi+0x274>)
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fa64 	bl	8000d44 <__aeabi_fmul>
 800187c:	4603      	mov	r3, r0
 800187e:	4619      	mov	r1, r3
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff f955 	bl	8000b30 <__aeabi_fsub>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <Kalman_Filtresi+0x288>)
 800188c:	601a      	str	r2, [r3, #0]

	S11_m = S11_p; S12_m = S12_p; S21_m = S21_p; S22_m = S22_p;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <Kalman_Filtresi+0x27c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <Kalman_Filtresi+0x25c>)
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <Kalman_Filtresi+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <Kalman_Filtresi+0x260>)
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <Kalman_Filtresi+0x284>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <Kalman_Filtresi+0x264>)
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <Kalman_Filtresi+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <Kalman_Filtresi+0x268>)
 80018ac:	6013      	str	r3, [r2, #0]
}
 80018ae:	bf00      	nop
 80018b0:	bd98      	pop	{r3, r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000450 	.word	0x20000450
 80018b8:	2000021c 	.word	0x2000021c
 80018bc:	3a83126f 	.word	0x3a83126f
 80018c0:	2000027c 	.word	0x2000027c
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004
 80018cc:	20000448 	.word	0x20000448
 80018d0:	200002d8 	.word	0x200002d8
 80018d4:	200002e4 	.word	0x200002e4
 80018d8:	20000454 	.word	0x20000454
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000430 	.word	0x20000430
 80018e4:	20000220 	.word	0x20000220
 80018e8:	2000043c 	.word	0x2000043c
 80018ec:	20000444 	.word	0x20000444
 80018f0:	20000284 	.word	0x20000284
 80018f4:	20000280 	.word	0x20000280
 80018f8:	2000028c 	.word	0x2000028c

080018fc <PWMYaz>:

void PWMYaz(uint16_t pwm1, uint16_t pwm2) {
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	4613      	mov	r3, r2
 800190a:	80bb      	strh	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm1);
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <PWMYaz+0x2c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pwm2);
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <PWMYaz+0x2c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	88ba      	ldrh	r2, [r7, #4]
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	200002f0 	.word	0x200002f0
 800192c:	00000000 	.word	0x00000000

08001930 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

	if(htim == &htim2) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a4f      	ldr	r2, [pc, #316]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800193c:	4293      	cmp	r3, r2
 800193e:	f040 808f 	bne.w	8001a60 <HAL_TIM_PeriodElapsedCallback+0x130>


		  gyroX = (GyroOku(GYRO_X_ADDR))/65.5;
 8001942:	2043      	movs	r0, #67	; 0x43
 8001944:	f7ff fe44 	bl	80015d0 <GyroOku>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fd5a 	bl	8000404 <__aeabi_i2d>
 8001950:	a345      	add	r3, pc, #276	; (adr r3, 8001a68 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fee9 	bl	800072c <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f891 	bl	8000a88 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4a44      	ldr	r2, [pc, #272]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800196a:	6013      	str	r3, [r2, #0]
		  //gyroX_a_x = (GyroOku(GYRO_X_ADDR)-gyro_e_x)/65.5;
		  //gyroX_a += gyroX_a_x * st;

		  //İvmeölçer degerlerini oku
		  accX = GyroOku(ACC_X_ADDR);
 800196c:	203b      	movs	r0, #59	; 0x3b
 800196e:	f7ff fe2f 	bl	80015d0 <GyroOku>
 8001972:	4603      	mov	r3, r0
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f991 	bl	8000c9c <__aeabi_i2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a40      	ldr	r2, [pc, #256]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800197e:	6013      	str	r3, [r2, #0]
		  accY = GyroOku(ACC_Y_ADDR);
 8001980:	203d      	movs	r0, #61	; 0x3d
 8001982:	f7ff fe25 	bl	80015d0 <GyroOku>
 8001986:	4603      	mov	r3, r0
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f987 	bl	8000c9c <__aeabi_i2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4a3c      	ldr	r2, [pc, #240]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001992:	6013      	str	r3, [r2, #0]
		  accZ = GyroOku(ACC_Z_ADDR);
 8001994:	203f      	movs	r0, #63	; 0x3f
 8001996:	f7ff fe1b 	bl	80015d0 <GyroOku>
 800199a:	4603      	mov	r3, r0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f97d 	bl	8000c9c <__aeabi_i2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80019a6:	6013      	str	r3, [r2, #0]

		  float acctop=sqrt(accX*accX+accY*accY+accZ*accZ);		//Toplam ivme
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a34      	ldr	r2, [pc, #208]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9c6 	bl	8000d44 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461c      	mov	r4, r3
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a30      	ldr	r2, [pc, #192]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9bc 	bl	8000d44 <__aeabi_fmul>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff f8af 	bl	8000b34 <__addsf3>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461c      	mov	r4, r3
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2a      	ldr	r2, [pc, #168]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f9ad 	bl	8000d44 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff f8a0 	bl	8000b34 <__addsf3>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd16 	bl	8000428 <__aeabi_f2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f006 fecc 	bl	80087a0 <sqrt>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f83a 	bl	8000a88 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]
		  pitch_acc=asin(accY/acctop)*57.324;					//İvme ölçerden hesaplanan pitch açısı
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa44 	bl	8000eac <__aeabi_fdiv>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fcfe 	bl	8000428 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f006 fe86 	bl	8008744 <asin>
 8001a38:	a30d      	add	r3, pc, #52	; (adr r3, 8001a70 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fd4b 	bl	80004d8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff f81d 	bl	8000a88 <__aeabi_d2f>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001a52:	6013      	str	r3, [r2, #0]

		  Kalman_Filtresi();
 8001a54:	f7ff fe0c 	bl	8001670 <Kalman_Filtresi>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001a58:	2102      	movs	r1, #2
 8001a5a:	480d      	ldr	r0, [pc, #52]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001a5c:	f000 fe0a 	bl	8002674 <HAL_GPIO_TogglePin>

	}
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40506000 	.word	0x40506000
 8001a70:	d4fdf3b6 	.word	0xd4fdf3b6
 8001a74:	404ca978 	.word	0x404ca978
 8001a78:	200003a8 	.word	0x200003a8
 8001a7c:	2000027c 	.word	0x2000027c
 8001a80:	2000044c 	.word	0x2000044c
 8001a84:	20000438 	.word	0x20000438
 8001a88:	20000288 	.word	0x20000288
 8001a8c:	2000043c 	.word	0x2000043c
 8001a90:	40010c00 	.word	0x40010c00

08001a94 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef * htim) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d11b      	bne.n	8001adc <HAL_TIM_IC_CaptureCallback+0x48>

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { //Yükselen kanal
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7f1b      	ldrb	r3, [r3, #28]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d117      	bne.n	8001adc <HAL_TIM_IC_CaptureCallback+0x48>
		IC_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001aac:	2104      	movs	r1, #4
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f003 f866 	bl	8004b80 <HAL_TIM_ReadCapturedValue>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001aba:	801a      	strh	r2, [r3, #0]

		if(IC_val1 != 0) { //alçalan kanal
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_TIM_IC_CaptureCallback+0x48>
			IC_val2  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f003 f85a 	bl	8004b80 <HAL_TIM_ReadCapturedValue>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_TIM_IC_CaptureCallback+0x58>)
 8001ad2:	801a      	strh	r2, [r3, #0]
			pwm_input = IC_val2;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_TIM_IC_CaptureCallback+0x58>)
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001ada:	801a      	strh	r2, [r3, #0]
		}
	}

}

}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000290 	.word	0x20000290
 8001ae8:	200002ec 	.word	0x200002ec
 8001aec:	2000033c 	.word	0x2000033c
 8001af0:	20000440 	.word	0x20000440

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_MspInit+0x60>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_MspInit+0x60>)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <HAL_I2C_MspInit+0x70>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d123      	bne.n	8001bcc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_I2C_MspInit+0x74>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_I2C_MspInit+0x74>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_I2C_MspInit+0x74>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b9c:	23c0      	movs	r3, #192	; 0xc0
 8001b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	4619      	mov	r1, r3
 8001bae:	480b      	ldr	r0, [pc, #44]	; (8001bdc <HAL_I2C_MspInit+0x78>)
 8001bb0:	f000 fbc4 	bl	800233c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_I2C_MspInit+0x74>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_I2C_MspInit+0x74>)
 8001bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_I2C_MspInit+0x74>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010c00 	.word	0x40010c00

08001be0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <HAL_TIM_PWM_MspInit+0x34>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10b      	bne.n	8001c0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_TIM_PWM_MspInit+0x38>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_TIM_PWM_MspInit+0x38>)
 8001bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_TIM_PWM_MspInit+0x38>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40012c00 	.word	0x40012c00
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3a:	d114      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a2f      	ldr	r2, [pc, #188]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	2100      	movs	r1, #0
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f000 fb38 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c5e:	201c      	movs	r0, #28
 8001c60:	f000 fb51 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c64:	e048      	b.n	8001cf8 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM3)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_TIM_Base_MspInit+0xe8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d143      	bne.n	8001cf8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	61d3      	str	r3, [r2, #28]
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c8e:	f043 0304 	orr.w	r3, r3, #4
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_TIM_Base_MspInit+0xe4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <HAL_TIM_Base_MspInit+0xec>)
 8001ccc:	f000 fb36 	bl	800233c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480a      	ldr	r0, [pc, #40]	; (8001d0c <HAL_TIM_Base_MspInit+0xf0>)
 8001ce4:	f000 fb2a 	bl	800233c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	201d      	movs	r0, #29
 8001cee:	f000 faee 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cf2:	201d      	movs	r0, #29
 8001cf4:	f000 fb07 	bl	8002306 <HAL_NVIC_EnableIRQ>
}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40010c00 	.word	0x40010c00

08001d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_TIM_MspPostInit+0x5c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d118      	bne.n	8001d62 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <HAL_TIM_MspPostInit+0x60>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a0e      	ldr	r2, [pc, #56]	; (8001d70 <HAL_TIM_MspPostInit+0x60>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_TIM_MspPostInit+0x60>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_TIM_MspPostInit+0x64>)
 8001d5e:	f000 faed 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40010800 	.word	0x40010800

08001d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d12f      	bne.n	8001df8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da2:	61d3      	str	r3, [r2, #28]
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <HAL_UART_MspInit+0x90>)
 8001ddc:	f000 faae 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001de0:	2308      	movs	r3, #8
 8001de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4619      	mov	r1, r3
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <HAL_UART_MspInit+0x90>)
 8001df4:	f000 faa2 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40004400 	.word	0x40004400
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010800 	.word	0x40010800

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e52:	f000 f949 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <TIM2_IRQHandler+0x10>)
 8001e62:	f002 fb2d 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200003a8 	.word	0x200003a8

08001e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM3_IRQHandler+0x10>)
 8001e76:	f002 fb23 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000290 	.word	0x20000290

08001e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	return 1;
 8001e88:	2301      	movs	r3, #1
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <_kill>:

int _kill(int pid, int sig)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e9c:	f003 fd88 	bl	80059b0 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2216      	movs	r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
	return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_exit>:

void _exit (int status)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eba:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffe7 	bl	8001e92 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ec4:	e7fe      	b.n	8001ec4 <_exit+0x12>

08001ec6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e00a      	b.n	8001eee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ed8:	f3af 8000 	nop.w
 8001edc:	4601      	mov	r1, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	60ba      	str	r2, [r7, #8]
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf0      	blt.n	8001ed8 <_read+0x12>
	}

return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
	}
	return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_close>:

int _close(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_isatty>:

int _isatty(int file)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f003 fcf2 	bl	80059b0 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20005000 	.word	0x20005000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000208 	.word	0x20000208
 8002000:	20000470 	.word	0x20000470

08002004 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002010:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002012:	e003      	b.n	800201c <LoopCopyDataInit>

08002014 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002016:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002018:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800201a:	3104      	adds	r1, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800201c:	480a      	ldr	r0, [pc, #40]	; (8002048 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002020:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002022:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002024:	d3f6      	bcc.n	8002014 <CopyDataInit>
  ldr r2, =_sbss
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002028:	e002      	b.n	8002030 <LoopFillZerobss>

0800202a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800202c:	f842 3b04 	str.w	r3, [r2], #4

08002030 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002032:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002034:	d3f9      	bcc.n	800202a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002036:	f7ff ffe5 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203a:	f003 fcbf 	bl	80059bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800203e:	f7fe ffd1 	bl	8000fe4 <main>
  bx lr
 8002042:	4770      	bx	lr
  ldr r3, =_sidata
 8002044:	08009194 	.word	0x08009194
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800204c:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8002050:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8002054:	2000046c 	.word	0x2000046c

08002058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC1_2_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_Init+0x28>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_Init+0x28>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 f923 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fd42 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f93b 	bl	8002322 <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 f903 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000014 	.word	0x20000014
 80020e4:	20000010 	.word	0x20000010

080020e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_IncTick+0x1c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_IncTick+0x20>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_IncTick+0x20>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000014 	.word	0x20000014
 8002108:	20000458 	.word	0x20000458

0800210c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_GetTick+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	20000458 	.word	0x20000458

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4906      	ldr	r1, [pc, #24]	; (80021b8 <__NVIC_EnableIRQ+0x34>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff90 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff2d 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff42 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff90 	bl	8002210 <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5f 	bl	80021bc <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff35 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b08b      	sub	sp, #44	; 0x2c
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	e169      	b.n	8002624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002350:	2201      	movs	r2, #1
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8158 	bne.w	800261e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4a9a      	ldr	r2, [pc, #616]	; (80025dc <HAL_GPIO_Init+0x2a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d05e      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002378:	4a98      	ldr	r2, [pc, #608]	; (80025dc <HAL_GPIO_Init+0x2a0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d875      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800237e:	4a98      	ldr	r2, [pc, #608]	; (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d058      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002384:	4a96      	ldr	r2, [pc, #600]	; (80025e0 <HAL_GPIO_Init+0x2a4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d86f      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 800238a:	4a96      	ldr	r2, [pc, #600]	; (80025e4 <HAL_GPIO_Init+0x2a8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d052      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 8002390:	4a94      	ldr	r2, [pc, #592]	; (80025e4 <HAL_GPIO_Init+0x2a8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d869      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 8002396:	4a94      	ldr	r2, [pc, #592]	; (80025e8 <HAL_GPIO_Init+0x2ac>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04c      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_GPIO_Init+0x2ac>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d863      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023a2:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_GPIO_Init+0x2b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d046      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
 80023a8:	4a90      	ldr	r2, [pc, #576]	; (80025ec <HAL_GPIO_Init+0x2b0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d85d      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d82a      	bhi.n	8002408 <HAL_GPIO_Init+0xcc>
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d859      	bhi.n	800246a <HAL_GPIO_Init+0x12e>
 80023b6:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_GPIO_Init+0x80>)
 80023b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002411 	.word	0x08002411
 80023c4:	08002423 	.word	0x08002423
 80023c8:	08002465 	.word	0x08002465
 80023cc:	0800246b 	.word	0x0800246b
 80023d0:	0800246b 	.word	0x0800246b
 80023d4:	0800246b 	.word	0x0800246b
 80023d8:	0800246b 	.word	0x0800246b
 80023dc:	0800246b 	.word	0x0800246b
 80023e0:	0800246b 	.word	0x0800246b
 80023e4:	0800246b 	.word	0x0800246b
 80023e8:	0800246b 	.word	0x0800246b
 80023ec:	0800246b 	.word	0x0800246b
 80023f0:	0800246b 	.word	0x0800246b
 80023f4:	0800246b 	.word	0x0800246b
 80023f8:	0800246b 	.word	0x0800246b
 80023fc:	0800246b 	.word	0x0800246b
 8002400:	08002419 	.word	0x08002419
 8002404:	0800242d 	.word	0x0800242d
 8002408:	4a79      	ldr	r2, [pc, #484]	; (80025f0 <HAL_GPIO_Init+0x2b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800240e:	e02c      	b.n	800246a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	623b      	str	r3, [r7, #32]
          break;
 8002416:	e029      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	3304      	adds	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
          break;
 8002420:	e024      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	623b      	str	r3, [r7, #32]
          break;
 800242a:	e01f      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	330c      	adds	r3, #12
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e01a      	b.n	800246c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800243e:	2304      	movs	r3, #4
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e013      	b.n	800246c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800244c:	2308      	movs	r3, #8
 800244e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	611a      	str	r2, [r3, #16]
          break;
 8002456:	e009      	b.n	800246c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002458:	2308      	movs	r3, #8
 800245a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	615a      	str	r2, [r3, #20]
          break;
 8002462:	e003      	b.n	800246c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x130>
          break;
 800246a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2bff      	cmp	r3, #255	; 0xff
 8002470:	d801      	bhi.n	8002476 <HAL_GPIO_Init+0x13a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	e001      	b.n	800247a <HAL_GPIO_Init+0x13e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3304      	adds	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2bff      	cmp	r3, #255	; 0xff
 8002480:	d802      	bhi.n	8002488 <HAL_GPIO_Init+0x14c>
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	e002      	b.n	800248e <HAL_GPIO_Init+0x152>
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	3b08      	subs	r3, #8
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	210f      	movs	r1, #15
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	6a39      	ldr	r1, [r7, #32]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80b1 	beq.w	800261e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_GPIO_Init+0x2b8>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a40      	ldr	r2, [pc, #256]	; (80025fc <HAL_GPIO_Init+0x2c0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a3f      	ldr	r2, [pc, #252]	; (8002600 <HAL_GPIO_Init+0x2c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3e      	ldr	r2, [pc, #248]	; (8002604 <HAL_GPIO_Init+0x2c8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1e4>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a3d      	ldr	r2, [pc, #244]	; (8002608 <HAL_GPIO_Init+0x2cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1e0>
 8002518:	2303      	movs	r3, #3
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 800251c:	2304      	movs	r3, #4
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002528:	2300      	movs	r3, #0
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800253a:	492f      	ldr	r1, [pc, #188]	; (80025f8 <HAL_GPIO_Init+0x2bc>)
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	492c      	ldr	r1, [pc, #176]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4928      	ldr	r1, [pc, #160]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800256c:	4013      	ands	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4922      	ldr	r1, [pc, #136]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_GPIO_Init+0x2d0>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	491e      	ldr	r1, [pc, #120]	; (800260c <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4918      	ldr	r1, [pc, #96]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4914      	ldr	r1, [pc, #80]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d021      	beq.n	8002610 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
 80025d8:	e021      	b.n	800261e <HAL_GPIO_Init+0x2e2>
 80025da:	bf00      	nop
 80025dc:	10320000 	.word	0x10320000
 80025e0:	10310000 	.word	0x10310000
 80025e4:	10220000 	.word	0x10220000
 80025e8:	10210000 	.word	0x10210000
 80025ec:	10120000 	.word	0x10120000
 80025f0:	10110000 	.word	0x10110000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010800 	.word	0x40010800
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40011000 	.word	0x40011000
 8002608:	40011400 	.word	0x40011400
 800260c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_GPIO_Init+0x304>)
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	4909      	ldr	r1, [pc, #36]	; (8002640 <HAL_GPIO_Init+0x304>)
 800261a:	4013      	ands	r3, r2
 800261c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f47f ae8e 	bne.w	8002350 <HAL_GPIO_Init+0x14>
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	372c      	adds	r7, #44	; 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002660:	e003      	b.n	800266a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	611a      	str	r2, [r3, #16]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43d9      	mvns	r1, r3
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	400b      	ands	r3, r1
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	611a      	str	r2, [r3, #16]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e12b      	b.n	8002912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fa48 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800270c:	f001 fba0 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8002710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4a81      	ldr	r2, [pc, #516]	; (800291c <HAL_I2C_Init+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d807      	bhi.n	800272c <HAL_I2C_Init+0x84>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a80      	ldr	r2, [pc, #512]	; (8002920 <HAL_I2C_Init+0x278>)
 8002720:	4293      	cmp	r3, r2
 8002722:	bf94      	ite	ls
 8002724:	2301      	movls	r3, #1
 8002726:	2300      	movhi	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e006      	b.n	800273a <HAL_I2C_Init+0x92>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a7d      	ldr	r2, [pc, #500]	; (8002924 <HAL_I2C_Init+0x27c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0e7      	b.n	8002912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4a78      	ldr	r2, [pc, #480]	; (8002928 <HAL_I2C_Init+0x280>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a6a      	ldr	r2, [pc, #424]	; (800291c <HAL_I2C_Init+0x274>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d802      	bhi.n	800277c <HAL_I2C_Init+0xd4>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3301      	adds	r3, #1
 800277a:	e009      	b.n	8002790 <HAL_I2C_Init+0xe8>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	4a69      	ldr	r2, [pc, #420]	; (800292c <HAL_I2C_Init+0x284>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	495c      	ldr	r1, [pc, #368]	; (800291c <HAL_I2C_Init+0x274>)
 80027ac:	428b      	cmp	r3, r1
 80027ae:	d819      	bhi.n	80027e4 <HAL_I2C_Init+0x13c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e59      	subs	r1, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80027be:	1c59      	adds	r1, r3, #1
 80027c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027c4:	400b      	ands	r3, r1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_I2C_Init+0x138>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1e59      	subs	r1, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027de:	e051      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e04f      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d111      	bne.n	8002810 <HAL_I2C_Init+0x168>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1e58      	subs	r0, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	440b      	add	r3, r1
 80027fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fe:	3301      	adds	r3, #1
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e012      	b.n	8002836 <HAL_I2C_Init+0x18e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Init+0x196>
 800283a:	2301      	movs	r3, #1
 800283c:	e022      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <HAL_I2C_Init+0x1bc>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e58      	subs	r0, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	440b      	add	r3, r1
 8002854:	fbb0 f3f3 	udiv	r3, r0, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002862:	e00f      	b.n	8002884 <HAL_I2C_Init+0x1dc>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	6809      	ldr	r1, [r1, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69da      	ldr	r2, [r3, #28]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6911      	ldr	r1, [r2, #16]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	000186a0 	.word	0x000186a0
 8002920:	001e847f 	.word	0x001e847f
 8002924:	003d08ff 	.word	0x003d08ff
 8002928:	431bde83 	.word	0x431bde83
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294a:	f7ff fbdf 	bl	800210c <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	f040 80d9 	bne.w	8002b10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2319      	movs	r3, #25
 8002964:	2201      	movs	r2, #1
 8002966:	496d      	ldr	r1, [pc, #436]	; (8002b1c <HAL_I2C_Mem_Write+0x1ec>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fcc1 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	e0cc      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Mem_Write+0x56>
 8002982:	2302      	movs	r3, #2
 8002984:	e0c5      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d007      	beq.n	80029ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2221      	movs	r2, #33	; 0x21
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <HAL_I2C_Mem_Write+0x1f0>)
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ee:	88f8      	ldrh	r0, [r7, #6]
 80029f0:	893a      	ldrh	r2, [r7, #8]
 80029f2:	8979      	ldrh	r1, [r7, #10]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4603      	mov	r3, r0
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 faf8 	bl	8002ff4 <I2C_RequestMemoryWrite>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d052      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e081      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fd42 	bl	800349c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d107      	bne.n	8002a36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06b      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d11b      	bne.n	8002ab0 <HAL_I2C_Mem_Write+0x180>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d017      	beq.n	8002ab0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1aa      	bne.n	8002a0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fd2e 	bl	800351e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d107      	bne.n	8002ae0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e016      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	00100002 	.word	0x00100002
 8002b20:	ffff0000 	.word	0xffff0000

08002b24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	; 0x30
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b42:	f7ff fae3 	bl	800210c <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f040 8244 	bne.w	8002fde <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2319      	movs	r3, #25
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4982      	ldr	r1, [pc, #520]	; (8002d68 <HAL_I2C_Mem_Read+0x244>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fbc5 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e237      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x5a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e230      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d007      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2222      	movs	r2, #34	; 0x22
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	; 0x40
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a62      	ldr	r2, [pc, #392]	; (8002d6c <HAL_I2C_Mem_Read+0x248>)
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be6:	88f8      	ldrh	r0, [r7, #6]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fa92 	bl	8003120 <I2C_RequestMemoryRead>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e1ec      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d113      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e1c0      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d11e      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4e:	b672      	cpsid	i
}
 8002c50:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c78:	b662      	cpsie	i
}
 8002c7a:	e035      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d11e      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c94:	b672      	cpsid	i
}
 8002c96:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cbe:	b662      	cpsie	i
}
 8002cc0:	e012      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ce8:	e166      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	f200 811f 	bhi.w	8002f32 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d123      	bne.n	8002d44 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fc4d 	bl	80035a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e167      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d42:	e139      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d152      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	2200      	movs	r2, #0
 8002d54:	4906      	ldr	r1, [pc, #24]	; (8002d70 <HAL_I2C_Mem_Read+0x24c>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 faca 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e13c      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
 8002d66:	bf00      	nop
 8002d68:	00100002 	.word	0x00100002
 8002d6c:	ffff0000 	.word	0xffff0000
 8002d70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002dba:	b662      	cpsie	i
}
 8002dbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002df0:	e0e2      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	497b      	ldr	r1, [pc, #492]	; (8002fe8 <HAL_I2C_Mem_Read+0x4c4>)
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fa77 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0e9      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1c:	b672      	cpsid	i
}
 8002e1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e52:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_I2C_Mem_Read+0x4c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_I2C_Mem_Read+0x4cc>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a1a      	lsrs	r2, r3, #8
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00da      	lsls	r2, r3, #3
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d118      	bne.n	8002eaa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9a:	b662      	cpsie	i
}
 8002e9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e09a      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d1d9      	bne.n	8002e6c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002efa:	b662      	cpsie	i
}
 8002efc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f30:	e042      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fb32 	bl	80035a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e04c      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d118      	bne.n	8002fb8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f ae94 	bne.w	8002cea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010004 	.word	0x00010004
 8002fec:	2000000c 	.word	0x2000000c
 8002ff0:	14f8b589 	.word	0x14f8b589

08002ff4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2200      	movs	r2, #0
 8003026:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f960 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003044:	d103      	bne.n	800304e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e05f      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	492d      	ldr	r1, [pc, #180]	; (800311c <I2C_RequestMemoryWrite+0x128>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f998 	bl	800339e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e04c      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	6a39      	ldr	r1, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa02 	bl	800349c <I2C_WaitOnTXEFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d107      	bne.n	80030b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e02b      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	611a      	str	r2, [r3, #16]
 80030ca:	e021      	b.n	8003110 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030cc:	893b      	ldrh	r3, [r7, #8]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f9dc 	bl	800349c <I2C_WaitOnTXEFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d107      	bne.n	8003102 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e005      	b.n	8003112 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003106:	893b      	ldrh	r3, [r7, #8]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003148:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	2200      	movs	r2, #0
 8003162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f8c2 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003180:	d103      	bne.n	800318a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0aa      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800319c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	4952      	ldr	r1, [pc, #328]	; (80032ec <I2C_RequestMemoryRead+0x1cc>)
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f8fa 	bl	800339e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e097      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f964 	bl	800349c <I2C_WaitOnTXEFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d107      	bne.n	80031f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e076      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	611a      	str	r2, [r3, #16]
 8003206:	e021      	b.n	800324c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003208:	893b      	ldrh	r3, [r7, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	b29b      	uxth	r3, r3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	6a39      	ldr	r1, [r7, #32]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f93e 	bl	800349c <I2C_WaitOnTXEFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b04      	cmp	r3, #4
 800322c:	d107      	bne.n	800323e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e050      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003242:	893b      	ldrh	r3, [r7, #8]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	6a39      	ldr	r1, [r7, #32]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f923 	bl	800349c <I2C_WaitOnTXEFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e035      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003286:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2200      	movs	r2, #0
 8003290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 f82b 	bl	80032f0 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ae:	d103      	bne.n	80032b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e013      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032bc:	897b      	ldrh	r3, [r7, #10]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	4906      	ldr	r1, [pc, #24]	; (80032ec <I2C_RequestMemoryRead+0x1cc>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f863 	bl	800339e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	00010002 	.word	0x00010002

080032f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003300:	e025      	b.n	800334e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d021      	beq.n	800334e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330a:	f7fe feff 	bl	800210c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d302      	bcc.n	8003320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d116      	bne.n	800334e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e023      	b.n	8003396 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d10d      	bne.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	e00c      	b.n	800338e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	429a      	cmp	r2, r3
 8003392:	d0b6      	beq.n	8003302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ac:	e051      	b.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d123      	bne.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e046      	b.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d021      	beq.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fe7d 	bl	800210c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d116      	bne.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e020      	b.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10c      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e00b      	b.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d18d      	bne.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a8:	e02d      	b.n	8003506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f8ce 	bl	800364c <I2C_IsAcknowledgeFailed>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e02d      	b.n	8003516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d021      	beq.n	8003506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe fe23 	bl	800210c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d116      	bne.n	8003506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e007      	b.n	8003516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d1ca      	bne.n	80034aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800352a:	e02d      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f88d 	bl	800364c <I2C_IsAcknowledgeFailed>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e02d      	b.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d021      	beq.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7fe fde2 	bl	800210c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d116      	bne.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d1ca      	bne.n	800352c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ac:	e042      	b.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d119      	bne.n	80035f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e029      	b.n	8003644 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f0:	f7fe fd8c 	bl	800210c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d1b5      	bne.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d11b      	bne.n	800369c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800366c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e26c      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8087 	beq.w	80037d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d00c      	beq.n	80036ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d4:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d112      	bne.n	8003706 <HAL_RCC_OscConfig+0x5e>
 80036e0:	4b8c      	ldr	r3, [pc, #560]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d10b      	bne.n	8003706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d06c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x12c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d168      	bne.n	80037d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e246      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x76>
 8003710:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7f      	ldr	r2, [pc, #508]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	e02e      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCC_OscConfig+0x98>
 8003726:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7a      	ldr	r2, [pc, #488]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a77      	ldr	r2, [pc, #476]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	e01d      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0xbc>
 800374a:	4b72      	ldr	r3, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a71      	ldr	r2, [pc, #452]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e00b      	b.n	800377c <HAL_RCC_OscConfig+0xd4>
 8003764:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800376a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b68      	ldr	r3, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a67      	ldr	r2, [pc, #412]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fcc2 	bl	800210c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7fe fcbe 	bl	800210c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1fa      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b5d      	ldr	r3, [pc, #372]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0xe4>
 80037aa:	e014      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fcae 	bl	800210c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe fcaa 	bl	800210c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1e6      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x10c>
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d063      	beq.n	80038aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00b      	beq.n	8003806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d11c      	bne.n	8003834 <HAL_RCC_OscConfig+0x18c>
 80037fa:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_RCC_OscConfig+0x176>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1ba      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4939      	ldr	r1, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	e03a      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <HAL_RCC_OscConfig+0x270>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fc63 	bl	800210c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fe fc5f 	bl	800210c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e19b      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4927      	ldr	r1, [pc, #156]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
 800387c:	e015      	b.n	80038aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <HAL_RCC_OscConfig+0x270>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fc42 	bl	800210c <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388c:	f7fe fc3e 	bl	800210c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e17a      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d03a      	beq.n	800392c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d019      	beq.n	80038f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fc22 	bl	800210c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fc1e 	bl	800210c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e15a      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 fad8 	bl	8003ea0 <RCC_Delay>
 80038f0:	e01c      	b.n	800392c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_RCC_OscConfig+0x274>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fe fc08 	bl	800210c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fe:	e00f      	b.n	8003920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe fc04 	bl	800210c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d908      	bls.n	8003920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e140      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	42420000 	.word	0x42420000
 800391c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b9e      	ldr	r3, [pc, #632]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e9      	bne.n	8003900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80a6 	beq.w	8003a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b97      	ldr	r3, [pc, #604]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10d      	bne.n	8003966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	4b94      	ldr	r3, [pc, #592]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4a93      	ldr	r2, [pc, #588]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003954:	61d3      	str	r3, [r2, #28]
 8003956:	4b91      	ldr	r3, [pc, #580]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b8e      	ldr	r3, [pc, #568]	; (8003ba0 <HAL_RCC_OscConfig+0x4f8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b8b      	ldr	r3, [pc, #556]	; (8003ba0 <HAL_RCC_OscConfig+0x4f8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a8a      	ldr	r2, [pc, #552]	; (8003ba0 <HAL_RCC_OscConfig+0x4f8>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fe fbc5 	bl	800210c <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fe fbc1 	bl	800210c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b64      	cmp	r3, #100	; 0x64
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0fd      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <HAL_RCC_OscConfig+0x4f8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x312>
 80039ac:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	4a7a      	ldr	r2, [pc, #488]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6213      	str	r3, [r2, #32]
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x334>
 80039c2:	4b76      	ldr	r3, [pc, #472]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a75      	ldr	r2, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a72      	ldr	r2, [pc, #456]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	e01c      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d10c      	bne.n	80039fe <HAL_RCC_OscConfig+0x356>
 80039e4:	4b6d      	ldr	r3, [pc, #436]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a6c      	ldr	r2, [pc, #432]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a69      	ldr	r2, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e00b      	b.n	8003a16 <HAL_RCC_OscConfig+0x36e>
 80039fe:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a66      	ldr	r2, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6213      	str	r3, [r2, #32]
 8003a0a:	4b64      	ldr	r3, [pc, #400]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe fb75 	bl	800210c <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a26:	f7fe fb71 	bl	800210c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e0ab      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3c:	4b57      	ldr	r3, [pc, #348]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ee      	beq.n	8003a26 <HAL_RCC_OscConfig+0x37e>
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fb5f 	bl	800210c <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe fb5b 	bl	800210c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e095      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a68:	4b4c      	ldr	r3, [pc, #304]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ee      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4b48      	ldr	r3, [pc, #288]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a47      	ldr	r2, [pc, #284]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8081 	beq.w	8003b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a90:	4b42      	ldr	r3, [pc, #264]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d061      	beq.n	8003b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d146      	bne.n	8003b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_OscConfig+0x4fc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fb2f 	bl	800210c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe fb2b 	bl	800210c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e067      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac4:	4b35      	ldr	r3, [pc, #212]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d108      	bne.n	8003aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	492d      	ldr	r1, [pc, #180]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aec:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a19      	ldr	r1, [r3, #32]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	430b      	orrs	r3, r1
 8003afe:	4927      	ldr	r1, [pc, #156]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <HAL_RCC_OscConfig+0x4fc>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe faff 	bl	800210c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe fafb 	bl	800210c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e037      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b24:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x46a>
 8003b30:	e02f      	b.n	8003b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <HAL_RCC_OscConfig+0x4fc>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fae8 	bl	800210c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fae4 	bl	800210c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e020      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x498>
 8003b5e:	e018      	b.n	8003b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e013      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42420060 	.word	0x42420060

08003ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0d0      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d910      	bls.n	8003bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b67      	ldr	r3, [pc, #412]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4965      	ldr	r1, [pc, #404]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a52      	ldr	r2, [pc, #328]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494d      	ldr	r1, [pc, #308]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d040      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d115      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e073      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c76:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e06b      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c86:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f023 0203 	bic.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4936      	ldr	r1, [pc, #216]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c98:	f7fe fa38 	bl	800210c <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca0:	f7fe fa34 	bl	800210c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e053      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 020c 	and.w	r2, r3, #12
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d1eb      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d210      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 0207 	bic.w	r2, r3, #7
 8003cde:	4922      	ldr	r1, [pc, #136]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e032      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4916      	ldr	r1, [pc, #88]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	490e      	ldr	r1, [pc, #56]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d36:	f000 f821 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	490a      	ldr	r1, [pc, #40]	; (8003d70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	5ccb      	ldrb	r3, [r1, r3]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1cc>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1d0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe f996 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08008d90 	.word	0x08008d90
 8003d74:	2000000c 	.word	0x2000000c
 8003d78:	20000010 	.word	0x20000010

08003d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	b490      	push	{r4, r7}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d82:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d84:	1d3c      	adds	r4, r7, #4
 8003d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d8c:	f240 2301 	movw	r3, #513	; 0x201
 8003d90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d002      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x40>
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x46>
 8003dba:	e02d      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbe:	623b      	str	r3, [r7, #32]
      break;
 8003dc0:	e02d      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	0c9b      	lsrs	r3, r3, #18
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dce:	4413      	add	r3, r2
 8003dd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0c5b      	lsrs	r3, r3, #17
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003dee:	4413      	add	r3, r2
 8003df0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003df4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dfa:	fb02 f203 	mul.w	r2, r2, r3
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e004      	b.n	8003e12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4a0b      	ldr	r2, [pc, #44]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e0c:	fb02 f303 	mul.w	r3, r2, r3
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	623b      	str	r3, [r7, #32]
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	623b      	str	r3, [r7, #32]
      break;
 8003e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc90      	pop	{r4, r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	08008d80 	.word	0x08008d80
 8003e30:	40021000 	.word	0x40021000
 8003e34:	007a1200 	.word	0x007a1200
 8003e38:	003d0900 	.word	0x003d0900

08003e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff2 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	08008da0 	.word	0x08008da0

08003e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e7c:	f7ff ffde 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0adb      	lsrs	r3, r3, #11
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08008da0 	.word	0x08008da0

08003ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <RCC_Delay+0x34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <RCC_Delay+0x38>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a5b      	lsrs	r3, r3, #9
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ebc:	bf00      	nop
  }
  while (Delay --);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	60fa      	str	r2, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <RCC_Delay+0x1c>
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	2000000c 	.word	0x2000000c
 8003ed8:	10624dd3 	.word	0x10624dd3

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd fe8a 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fe90 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e03a      	b.n	800400a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_TIM_Base_Start_IT+0x98>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x58>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d009      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x58>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	; (8004018 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x58>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_TIM_Base_Start_IT+0xa0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d111      	bne.n	8003ff8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d010      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff6:	e007      	b.n	8004008 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800

08004020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fdca 	bl	8001be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fdee 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x24>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e022      	b.n	800412a <HAL_TIM_PWM_Start+0x6a>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start+0x3e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e015      	b.n	800412a <HAL_TIM_PWM_Start+0x6a>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start+0x58>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_TIM_PWM_Start+0x6a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e05e      	b.n	80041f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0x82>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	e013      	b.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0x92>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	e00b      	b.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004160:	e003      	b.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f97f 	bl	8005476 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_TIM_PWM_Start+0x138>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d107      	bne.n	8004192 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_TIM_PWM_Start+0x138>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_TIM_PWM_Start+0xfa>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d009      	beq.n	80041ba <HAL_TIM_PWM_Start+0xfa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <HAL_TIM_PWM_Start+0x13c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIM_PWM_Start+0xfa>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <HAL_TIM_PWM_Start+0x140>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d010      	beq.n	80041ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041dc:	e007      	b.n	80041ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800

08004204 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e041      	b.n	800429a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f839 	bl	80042a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f000 fcfc 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_IC_Start_IT+0x1a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	e013      	b.n	80042f6 <HAL_TIM_IC_Start_IT+0x42>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d104      	bne.n	80042de <HAL_TIM_IC_Start_IT+0x2a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e00b      	b.n	80042f6 <HAL_TIM_IC_Start_IT+0x42>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_IC_Start_IT+0x3a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e003      	b.n	80042f6 <HAL_TIM_IC_Start_IT+0x42>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d104      	bne.n	8004308 <HAL_TIM_IC_Start_IT+0x54>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e013      	b.n	8004330 <HAL_TIM_IC_Start_IT+0x7c>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b04      	cmp	r3, #4
 800430c:	d104      	bne.n	8004318 <HAL_TIM_IC_Start_IT+0x64>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e00b      	b.n	8004330 <HAL_TIM_IC_Start_IT+0x7c>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b08      	cmp	r3, #8
 800431c:	d104      	bne.n	8004328 <HAL_TIM_IC_Start_IT+0x74>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e003      	b.n	8004330 <HAL_TIM_IC_Start_IT+0x7c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800432e:	b2db      	uxtb	r3, r3
 8004330:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d102      	bne.n	800433e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004338:	7bbb      	ldrb	r3, [r7, #14]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e0b3      	b.n	80044aa <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <HAL_TIM_IC_Start_IT+0x9e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004350:	e013      	b.n	800437a <HAL_TIM_IC_Start_IT+0xc6>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d104      	bne.n	8004362 <HAL_TIM_IC_Start_IT+0xae>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004360:	e00b      	b.n	800437a <HAL_TIM_IC_Start_IT+0xc6>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d104      	bne.n	8004372 <HAL_TIM_IC_Start_IT+0xbe>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004370:	e003      	b.n	800437a <HAL_TIM_IC_Start_IT+0xc6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d104      	bne.n	800438a <HAL_TIM_IC_Start_IT+0xd6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004388:	e013      	b.n	80043b2 <HAL_TIM_IC_Start_IT+0xfe>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d104      	bne.n	800439a <HAL_TIM_IC_Start_IT+0xe6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004398:	e00b      	b.n	80043b2 <HAL_TIM_IC_Start_IT+0xfe>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d104      	bne.n	80043aa <HAL_TIM_IC_Start_IT+0xf6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a8:	e003      	b.n	80043b2 <HAL_TIM_IC_Start_IT+0xfe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d841      	bhi.n	800443c <HAL_TIM_IC_Start_IT+0x188>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_TIM_IC_Start_IT+0x10c>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800443d 	.word	0x0800443d
 80043c8:	0800443d 	.word	0x0800443d
 80043cc:	0800443d 	.word	0x0800443d
 80043d0:	08004407 	.word	0x08004407
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	0800443d 	.word	0x0800443d
 80043e0:	08004419 	.word	0x08004419
 80043e4:	0800443d 	.word	0x0800443d
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	0800443d 	.word	0x0800443d
 80043f0:	0800442b 	.word	0x0800442b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0202 	orr.w	r2, r2, #2
 8004402:	60da      	str	r2, [r3, #12]
      break;
 8004404:	e01b      	b.n	800443e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0204 	orr.w	r2, r2, #4
 8004414:	60da      	str	r2, [r3, #12]
      break;
 8004416:	e012      	b.n	800443e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0208 	orr.w	r2, r2, #8
 8004426:	60da      	str	r2, [r3, #12]
      break;
 8004428:	e009      	b.n	800443e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0210 	orr.w	r2, r2, #16
 8004438:	60da      	str	r2, [r3, #12]
      break;
 800443a:	e000      	b.n	800443e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800443c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2201      	movs	r2, #1
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f815 	bl	8005476 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_TIM_IC_Start_IT+0x200>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_IC_Start_IT+0x1c0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d009      	beq.n	8004474 <HAL_TIM_IC_Start_IT+0x1c0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <HAL_TIM_IC_Start_IT+0x204>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_IC_Start_IT+0x1c0>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a13      	ldr	r2, [pc, #76]	; (80044bc <HAL_TIM_IC_Start_IT+0x208>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0202 	mvn.w	r2, #2
 80044ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd fac6 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fb7c 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fb82 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b04      	cmp	r3, #4
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b04      	cmp	r3, #4
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fa9c 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fb52 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fb58 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b08      	cmp	r3, #8
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b08      	cmp	r3, #8
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0208 	mvn.w	r2, #8
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2204      	movs	r2, #4
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fa72 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fb28 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 fb2e 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0210 	mvn.w	r2, #16
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2208      	movs	r2, #8
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fd fa48 	bl	8001a94 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fafe 	bl	8004c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb04 	bl	8004c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0201 	mvn.w	r2, #1
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd f976 	bl	8001930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 ffe0 	bl	8005630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d10e      	bne.n	800469c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d107      	bne.n	800469c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fac8 	bl	8004c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d10e      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d107      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0220 	mvn.w	r2, #32
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 ffab 	bl	800561e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_IC_ConfigChannel+0x1a>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e082      	b.n	80047f0 <HAL_TIM_IC_ConfigChannel+0x120>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11b      	bne.n	8004730 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	6819      	ldr	r1, [r3, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f000 fd12 	bl	8005130 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 020c 	bic.w	r2, r2, #12
 800471a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6999      	ldr	r1, [r3, #24]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	619a      	str	r2, [r3, #24]
 800472e:	e05a      	b.n	80047e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d11c      	bne.n	8004770 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f000 fd7b 	bl	8005240 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004758:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6999      	ldr	r1, [r3, #24]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	619a      	str	r2, [r3, #24]
 800476e:	e03a      	b.n	80047e6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b08      	cmp	r3, #8
 8004774:	d11b      	bne.n	80047ae <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f000 fdc6 	bl	8005316 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 020c 	bic.w	r2, r2, #12
 8004798:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69d9      	ldr	r1, [r3, #28]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	61da      	str	r2, [r3, #28]
 80047ac:	e01b      	b.n	80047e6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6819      	ldr	r1, [r3, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 fde5 	bl	800538c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69d9      	ldr	r1, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	021a      	lsls	r2, r3, #8
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800480e:	2302      	movs	r3, #2
 8004810:	e0ac      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	f200 809f 	bhi.w	8004960 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	0800485d 	.word	0x0800485d
 800482c:	08004961 	.word	0x08004961
 8004830:	08004961 	.word	0x08004961
 8004834:	08004961 	.word	0x08004961
 8004838:	0800489d 	.word	0x0800489d
 800483c:	08004961 	.word	0x08004961
 8004840:	08004961 	.word	0x08004961
 8004844:	08004961 	.word	0x08004961
 8004848:	080048df 	.word	0x080048df
 800484c:	08004961 	.word	0x08004961
 8004850:	08004961 	.word	0x08004961
 8004854:	08004961 	.word	0x08004961
 8004858:	0800491f 	.word	0x0800491f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fa4e 	bl	8004d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0208 	orr.w	r2, r2, #8
 8004876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0204 	bic.w	r2, r2, #4
 8004886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6999      	ldr	r1, [r3, #24]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	619a      	str	r2, [r3, #24]
      break;
 800489a:	e062      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fa94 	bl	8004dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6999      	ldr	r1, [r3, #24]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	619a      	str	r2, [r3, #24]
      break;
 80048dc:	e041      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68b9      	ldr	r1, [r7, #8]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fadd 	bl	8004ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0208 	orr.w	r2, r2, #8
 80048f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0204 	bic.w	r2, r2, #4
 8004908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69d9      	ldr	r1, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	61da      	str	r2, [r3, #28]
      break;
 800491c:	e021      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fb27 	bl	8004f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69d9      	ldr	r1, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	021a      	lsls	r2, r3, #8
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	61da      	str	r2, [r3, #28]
      break;
 800495e:	e000      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIM_ConfigClockSource+0x18>
 8004988:	2302      	movs	r3, #2
 800498a:	e0b3      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x180>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c4:	d03e      	beq.n	8004a44 <HAL_TIM_ConfigClockSource+0xd0>
 80049c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ca:	f200 8087 	bhi.w	8004adc <HAL_TIM_ConfigClockSource+0x168>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	f000 8085 	beq.w	8004ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049da:	d87f      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 80049dc:	2b70      	cmp	r3, #112	; 0x70
 80049de:	d01a      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0xa2>
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d87b      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 80049e4:	2b60      	cmp	r3, #96	; 0x60
 80049e6:	d050      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x116>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d877      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 80049ec:	2b50      	cmp	r3, #80	; 0x50
 80049ee:	d03c      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0xf6>
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d873      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d058      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x136>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d86f      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 80049fc:	2b30      	cmp	r3, #48	; 0x30
 80049fe:	d064      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x156>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d86b      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d060      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x156>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d867      	bhi.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d05c      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x156>
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d05a      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a14:	e062      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f000 fd07 	bl	8005438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	609a      	str	r2, [r3, #8]
      break;
 8004a42:	e04e      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6899      	ldr	r1, [r3, #8]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f000 fcf0 	bl	8005438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a66:	609a      	str	r2, [r3, #8]
      break;
 8004a68:	e03b      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 fbb4 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2150      	movs	r1, #80	; 0x50
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fcbe 	bl	8005404 <TIM_ITRx_SetConfig>
      break;
 8004a88:	e02b      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6859      	ldr	r1, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f000 fc0e 	bl	80052b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2160      	movs	r1, #96	; 0x60
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fcae 	bl	8005404 <TIM_ITRx_SetConfig>
      break;
 8004aa8:	e01b      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fb94 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2140      	movs	r1, #64	; 0x40
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fc9e 	bl	8005404 <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f000 fc95 	bl	8005404 <TIM_ITRx_SetConfig>
        break;
 8004ada:	e002      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e031      	b.n	8004b78 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa74 	bl	8005014 <TIM_SlaveTimer_SetConfig>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e018      	b.n	8004b78 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b54:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b64:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d831      	bhi.n	8004bf8 <HAL_TIM_ReadCapturedValue+0x78>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bf9 	.word	0x08004bf9
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004bf9 	.word	0x08004bf9
 8004bcc:	08004bef 	.word	0x08004bef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	60fb      	str	r3, [r7, #12]

      break;
 8004bd8:	e00f      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	60fb      	str	r3, [r7, #12]

      break;
 8004be2:	e00a      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	60fb      	str	r3, [r7, #12]

      break;
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	60fb      	str	r3, [r7, #12]

      break;
 8004bf6:	e000      	b.n	8004bfa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004bf8:	bf00      	nop
  }

  return tmpreg;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr

08004c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
	...

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <TIM_Base_SetConfig+0xb8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_Base_SetConfig+0x30>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0x30>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <TIM_Base_SetConfig+0xbc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0x30>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <TIM_Base_SetConfig+0xc0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d108      	bne.n	8004c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <TIM_Base_SetConfig+0xb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <TIM_Base_SetConfig+0xbc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <TIM_Base_SetConfig+0xc0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <TIM_Base_SetConfig+0xb8>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d103      	bne.n	8004ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	615a      	str	r2, [r3, #20]
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800

08004d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 0302 	bic.w	r3, r3, #2
 8004d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <TIM_OC1_SetConfig+0xc8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10c      	bne.n	8004d7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0308 	bic.w	r3, r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <TIM_OC1_SetConfig+0xc8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d111      	bne.n	8004da6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40012c00 	.word	0x40012c00

08004dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f023 0210 	bic.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <TIM_OC2_SetConfig+0xd0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10d      	bne.n	8004e4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <TIM_OC2_SetConfig+0xd0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d113      	bne.n	8004e7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <TIM_OC3_SetConfig+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10d      	bne.n	8004f1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <TIM_OC3_SetConfig+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d113      	bne.n	8004f4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	621a      	str	r2, [r3, #32]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40012c00 	.word	0x40012c00

08004f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	031b      	lsls	r3, r3, #12
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <TIM_OC4_SetConfig+0x98>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d109      	bne.n	8004fec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	019b      	lsls	r3, r3, #6
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00

08005014 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0307 	bic.w	r3, r3, #7
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b70      	cmp	r3, #112	; 0x70
 8005058:	d01a      	beq.n	8005090 <TIM_SlaveTimer_SetConfig+0x7c>
 800505a:	2b70      	cmp	r3, #112	; 0x70
 800505c:	d860      	bhi.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
 800505e:	2b60      	cmp	r3, #96	; 0x60
 8005060:	d054      	beq.n	800510c <TIM_SlaveTimer_SetConfig+0xf8>
 8005062:	2b60      	cmp	r3, #96	; 0x60
 8005064:	d85c      	bhi.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
 8005066:	2b50      	cmp	r3, #80	; 0x50
 8005068:	d046      	beq.n	80050f8 <TIM_SlaveTimer_SetConfig+0xe4>
 800506a:	2b50      	cmp	r3, #80	; 0x50
 800506c:	d858      	bhi.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d019      	beq.n	80050a6 <TIM_SlaveTimer_SetConfig+0x92>
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d854      	bhi.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d054      	beq.n	8005124 <TIM_SlaveTimer_SetConfig+0x110>
 800507a:	2b30      	cmp	r3, #48	; 0x30
 800507c:	d850      	bhi.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
 800507e:	2b20      	cmp	r3, #32
 8005080:	d050      	beq.n	8005124 <TIM_SlaveTimer_SetConfig+0x110>
 8005082:	2b20      	cmp	r3, #32
 8005084:	d84c      	bhi.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d04c      	beq.n	8005124 <TIM_SlaveTimer_SetConfig+0x110>
 800508a:	2b10      	cmp	r3, #16
 800508c:	d04a      	beq.n	8005124 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800508e:	e047      	b.n	8005120 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68d9      	ldr	r1, [r3, #12]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f000 f9ca 	bl	8005438 <TIM_ETR_SetConfig>
      break;
 80050a4:	e03f      	b.n	8005126 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d101      	bne.n	80050b2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e03a      	b.n	8005128 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
      break;
 80050f6:	e016      	b.n	8005126 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6899      	ldr	r1, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	461a      	mov	r2, r3
 8005106:	f000 f86d 	bl	80051e4 <TIM_TI1_ConfigInputStage>
      break;
 800510a:	e00c      	b.n	8005126 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	461a      	mov	r2, r3
 800511a:	f000 f8cd 	bl	80052b8 <TIM_TI2_ConfigInputStage>
      break;
 800511e:	e002      	b.n	8005126 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005124:	bf00      	nop
  }
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <TIM_TI1_SetConfig+0xa8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_TI1_SetConfig+0x46>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d007      	beq.n	8005176 <TIM_TI1_SetConfig+0x46>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <TIM_TI1_SetConfig+0xac>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_TI1_SetConfig+0x46>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <TIM_TI1_SetConfig+0xb0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <TIM_TI1_SetConfig+0x4a>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <TIM_TI1_SetConfig+0x4c>
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e003      	b.n	800519a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f023 030a 	bic.w	r3, r3, #10
 80051b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f003 030a 	and.w	r3, r3, #10
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800

080051e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800520e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 030a 	bic.w	r3, r3, #10
 8005220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f023 0210 	bic.w	r2, r3, #16
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800527e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	031b      	lsls	r3, r3, #12
 8005284:	b29b      	uxth	r3, r3
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005292:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f023 0210 	bic.w	r2, r3, #16
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	031b      	lsls	r3, r3, #12
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005352:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	b2db      	uxtb	r3, r3
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005366:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	031b      	lsls	r3, r3, #12
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	031b      	lsls	r3, r3, #12
 80053e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr

08005404 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	f043 0307 	orr.w	r3, r3, #7
 8005426:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	609a      	str	r2, [r3, #8]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	021a      	lsls	r2, r3, #8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	431a      	orrs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4313      	orrs	r3, r2
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005476:	b480      	push	{r7}
 8005478:	b087      	sub	sp, #28
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2201      	movs	r2, #1
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	43db      	mvns	r3, r3
 8005498:	401a      	ands	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	431a      	orrs	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]
}
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e046      	b.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005524:	d009      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a12      	ldr	r2, [pc, #72]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d10c      	bne.n	8005554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800

0800557c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005594:	2302      	movs	r3, #2
 8005596:	e03d      	b.n	8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e03f      	b.n	80056d4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7fc fb85 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2224      	movs	r2, #36	; 0x24
 8005672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005684:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f904 	bl	8005894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800569a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	4613      	mov	r3, r2
 80056ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d17c      	bne.n	80057f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_UART_Transmit+0x2c>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e075      	b.n	80057f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_UART_Transmit+0x3e>
 8005716:	2302      	movs	r3, #2
 8005718:	e06e      	b.n	80057f8 <HAL_UART_Transmit+0x11c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2221      	movs	r2, #33	; 0x21
 800572c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005730:	f7fc fcec 	bl	800210c <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	d108      	bne.n	800575e <HAL_UART_Transmit+0x82>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e003      	b.n	8005766 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800576e:	e02a      	b.n	80057c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f840 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e036      	b.n	80057f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3302      	adds	r3, #2
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e007      	b.n	80057b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1cf      	bne.n	8005770 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f810 	bl	8005800 <UART_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e006      	b.n	80057f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005810:	e02c      	b.n	800586c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d028      	beq.n	800586c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <UART_WaitOnFlagUntilTimeout+0x30>
 8005820:	f7fc fc74 	bl	800210c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	429a      	cmp	r2, r3
 800582e:	d21d      	bcs.n	800586c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800583e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e00f      	b.n	800588c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	429a      	cmp	r2, r3
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	429a      	cmp	r2, r3
 8005888:	d0c3      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058ce:	f023 030c 	bic.w	r3, r3, #12
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	430b      	orrs	r3, r1
 80058da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <UART_SetConfig+0x114>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d103      	bne.n	8005904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7fe fabc 	bl	8003e78 <HAL_RCC_GetPCLK2Freq>
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	e002      	b.n	800590a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005904:	f7fe faa4 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8005908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009a      	lsls	r2, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	4a22      	ldr	r2, [pc, #136]	; (80059ac <UART_SetConfig+0x118>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	0119      	lsls	r1, r3, #4
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009a      	lsls	r2, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <UART_SetConfig+0x118>)
 8005942:	fba3 0302 	umull	r0, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2064      	movs	r0, #100	; 0x64
 800594a:	fb00 f303 	mul.w	r3, r0, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a15      	ldr	r2, [pc, #84]	; (80059ac <UART_SetConfig+0x118>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005960:	4419      	add	r1, r3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009a      	lsls	r2, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	fbb2 f2f3 	udiv	r2, r2, r3
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <UART_SetConfig+0x118>)
 800597a:	fba3 0302 	umull	r0, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2064      	movs	r0, #100	; 0x64
 8005982:	fb00 f303 	mul.w	r3, r0, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	3332      	adds	r3, #50	; 0x32
 800598c:	4a07      	ldr	r2, [pc, #28]	; (80059ac <UART_SetConfig+0x118>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	f003 020f 	and.w	r2, r3, #15
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	440a      	add	r2, r1
 800599e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40013800 	.word	0x40013800
 80059ac:	51eb851f 	.word	0x51eb851f

080059b0 <__errno>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	; (80059b8 <__errno+0x8>)
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000018 	.word	0x20000018

080059bc <__libc_init_array>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	2600      	movs	r6, #0
 80059c0:	4d0c      	ldr	r5, [pc, #48]	; (80059f4 <__libc_init_array+0x38>)
 80059c2:	4c0d      	ldr	r4, [pc, #52]	; (80059f8 <__libc_init_array+0x3c>)
 80059c4:	1b64      	subs	r4, r4, r5
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	42a6      	cmp	r6, r4
 80059ca:	d109      	bne.n	80059e0 <__libc_init_array+0x24>
 80059cc:	f003 f9c6 	bl	8008d5c <_init>
 80059d0:	2600      	movs	r6, #0
 80059d2:	4d0a      	ldr	r5, [pc, #40]	; (80059fc <__libc_init_array+0x40>)
 80059d4:	4c0a      	ldr	r4, [pc, #40]	; (8005a00 <__libc_init_array+0x44>)
 80059d6:	1b64      	subs	r4, r4, r5
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	42a6      	cmp	r6, r4
 80059dc:	d105      	bne.n	80059ea <__libc_init_array+0x2e>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e4:	4798      	blx	r3
 80059e6:	3601      	adds	r6, #1
 80059e8:	e7ee      	b.n	80059c8 <__libc_init_array+0xc>
 80059ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ee:	4798      	blx	r3
 80059f0:	3601      	adds	r6, #1
 80059f2:	e7f2      	b.n	80059da <__libc_init_array+0x1e>
 80059f4:	0800918c 	.word	0x0800918c
 80059f8:	0800918c 	.word	0x0800918c
 80059fc:	0800918c 	.word	0x0800918c
 8005a00:	08009190 	.word	0x08009190

08005a04 <memset>:
 8005a04:	4603      	mov	r3, r0
 8005a06:	4402      	add	r2, r0
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <__cvt>:
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1a:	461f      	mov	r7, r3
 8005a1c:	bfbb      	ittet	lt
 8005a1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a22:	461f      	movlt	r7, r3
 8005a24:	2300      	movge	r3, #0
 8005a26:	232d      	movlt	r3, #45	; 0x2d
 8005a28:	b088      	sub	sp, #32
 8005a2a:	4614      	mov	r4, r2
 8005a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a30:	7013      	strb	r3, [r2, #0]
 8005a32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a34:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a38:	f023 0820 	bic.w	r8, r3, #32
 8005a3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a40:	d005      	beq.n	8005a4e <__cvt+0x3a>
 8005a42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a46:	d100      	bne.n	8005a4a <__cvt+0x36>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e000      	b.n	8005a50 <__cvt+0x3c>
 8005a4e:	2303      	movs	r3, #3
 8005a50:	aa07      	add	r2, sp, #28
 8005a52:	9204      	str	r2, [sp, #16]
 8005a54:	aa06      	add	r2, sp, #24
 8005a56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a5a:	e9cd 3500 	strd	r3, r5, [sp]
 8005a5e:	4622      	mov	r2, r4
 8005a60:	463b      	mov	r3, r7
 8005a62:	f000 fce5 	bl	8006430 <_dtoa_r>
 8005a66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	d102      	bne.n	8005a74 <__cvt+0x60>
 8005a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a70:	07db      	lsls	r3, r3, #31
 8005a72:	d522      	bpl.n	8005aba <__cvt+0xa6>
 8005a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a78:	eb06 0905 	add.w	r9, r6, r5
 8005a7c:	d110      	bne.n	8005aa0 <__cvt+0x8c>
 8005a7e:	7833      	ldrb	r3, [r6, #0]
 8005a80:	2b30      	cmp	r3, #48	; 0x30
 8005a82:	d10a      	bne.n	8005a9a <__cvt+0x86>
 8005a84:	2200      	movs	r2, #0
 8005a86:	2300      	movs	r3, #0
 8005a88:	4620      	mov	r0, r4
 8005a8a:	4639      	mov	r1, r7
 8005a8c:	f7fa ff8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005a90:	b918      	cbnz	r0, 8005a9a <__cvt+0x86>
 8005a92:	f1c5 0501 	rsb	r5, r5, #1
 8005a96:	f8ca 5000 	str.w	r5, [sl]
 8005a9a:	f8da 3000 	ldr.w	r3, [sl]
 8005a9e:	4499      	add	r9, r3
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	f7fa ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8005aac:	b108      	cbz	r0, 8005ab2 <__cvt+0x9e>
 8005aae:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ab2:	2230      	movs	r2, #48	; 0x30
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	454b      	cmp	r3, r9
 8005ab8:	d307      	bcc.n	8005aca <__cvt+0xb6>
 8005aba:	4630      	mov	r0, r6
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ac0:	1b9b      	subs	r3, r3, r6
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	b008      	add	sp, #32
 8005ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aca:	1c59      	adds	r1, r3, #1
 8005acc:	9107      	str	r1, [sp, #28]
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e7f0      	b.n	8005ab4 <__cvt+0xa0>

08005ad2 <__exponent>:
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	f803 2b02 	strb.w	r2, [r3], #2
 8005adc:	bfb6      	itet	lt
 8005ade:	222d      	movlt	r2, #45	; 0x2d
 8005ae0:	222b      	movge	r2, #43	; 0x2b
 8005ae2:	4249      	neglt	r1, r1
 8005ae4:	2909      	cmp	r1, #9
 8005ae6:	7042      	strb	r2, [r0, #1]
 8005ae8:	dd2b      	ble.n	8005b42 <__exponent+0x70>
 8005aea:	f10d 0407 	add.w	r4, sp, #7
 8005aee:	46a4      	mov	ip, r4
 8005af0:	270a      	movs	r7, #10
 8005af2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005af6:	460a      	mov	r2, r1
 8005af8:	46a6      	mov	lr, r4
 8005afa:	fb07 1516 	mls	r5, r7, r6, r1
 8005afe:	2a63      	cmp	r2, #99	; 0x63
 8005b00:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005b04:	4631      	mov	r1, r6
 8005b06:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b0e:	dcf0      	bgt.n	8005af2 <__exponent+0x20>
 8005b10:	3130      	adds	r1, #48	; 0x30
 8005b12:	f1ae 0502 	sub.w	r5, lr, #2
 8005b16:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	1c44      	adds	r4, r0, #1
 8005b1e:	4561      	cmp	r1, ip
 8005b20:	d30a      	bcc.n	8005b38 <__exponent+0x66>
 8005b22:	f10d 0209 	add.w	r2, sp, #9
 8005b26:	eba2 020e 	sub.w	r2, r2, lr
 8005b2a:	4565      	cmp	r5, ip
 8005b2c:	bf88      	it	hi
 8005b2e:	2200      	movhi	r2, #0
 8005b30:	4413      	add	r3, r2
 8005b32:	1a18      	subs	r0, r3, r0
 8005b34:	b003      	add	sp, #12
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b3c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b40:	e7ed      	b.n	8005b1e <__exponent+0x4c>
 8005b42:	2330      	movs	r3, #48	; 0x30
 8005b44:	3130      	adds	r1, #48	; 0x30
 8005b46:	7083      	strb	r3, [r0, #2]
 8005b48:	70c1      	strb	r1, [r0, #3]
 8005b4a:	1d03      	adds	r3, r0, #4
 8005b4c:	e7f1      	b.n	8005b32 <__exponent+0x60>
	...

08005b50 <_printf_float>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	b091      	sub	sp, #68	; 0x44
 8005b56:	460c      	mov	r4, r1
 8005b58:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005b5c:	4616      	mov	r6, r2
 8005b5e:	461f      	mov	r7, r3
 8005b60:	4605      	mov	r5, r0
 8005b62:	f001 fa53 	bl	800700c <_localeconv_r>
 8005b66:	6803      	ldr	r3, [r0, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	f7fa faf0 	bl	8000150 <strlen>
 8005b70:	2300      	movs	r3, #0
 8005b72:	930e      	str	r3, [sp, #56]	; 0x38
 8005b74:	f8d8 3000 	ldr.w	r3, [r8]
 8005b78:	900a      	str	r0, [sp, #40]	; 0x28
 8005b7a:	3307      	adds	r3, #7
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	f103 0208 	add.w	r2, r3, #8
 8005b84:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005b88:	f8d4 b000 	ldr.w	fp, [r4]
 8005b8c:	f8c8 2000 	str.w	r2, [r8]
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b98:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005b9c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	4b9c      	ldr	r3, [pc, #624]	; (8005e1c <_printf_float+0x2cc>)
 8005baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bac:	f7fa ff2e 	bl	8000a0c <__aeabi_dcmpun>
 8005bb0:	bb70      	cbnz	r0, 8005c10 <_printf_float+0xc0>
 8005bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	4b98      	ldr	r3, [pc, #608]	; (8005e1c <_printf_float+0x2cc>)
 8005bba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bbc:	f7fa ff08 	bl	80009d0 <__aeabi_dcmple>
 8005bc0:	bb30      	cbnz	r0, 8005c10 <_printf_float+0xc0>
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4651      	mov	r1, sl
 8005bca:	f7fa fef7 	bl	80009bc <__aeabi_dcmplt>
 8005bce:	b110      	cbz	r0, 8005bd6 <_printf_float+0x86>
 8005bd0:	232d      	movs	r3, #45	; 0x2d
 8005bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd6:	4b92      	ldr	r3, [pc, #584]	; (8005e20 <_printf_float+0x2d0>)
 8005bd8:	4892      	ldr	r0, [pc, #584]	; (8005e24 <_printf_float+0x2d4>)
 8005bda:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005bde:	bf94      	ite	ls
 8005be0:	4698      	movls	r8, r3
 8005be2:	4680      	movhi	r8, r0
 8005be4:	2303      	movs	r3, #3
 8005be6:	f04f 0a00 	mov.w	sl, #0
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	f02b 0304 	bic.w	r3, fp, #4
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	4633      	mov	r3, r6
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	9700      	str	r7, [sp, #0]
 8005bfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8005bfc:	f000 f9d4 	bl	8005fa8 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	f040 8090 	bne.w	8005d26 <_printf_float+0x1d6>
 8005c06:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0a:	b011      	add	sp, #68	; 0x44
 8005c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c10:	4642      	mov	r2, r8
 8005c12:	4653      	mov	r3, sl
 8005c14:	4640      	mov	r0, r8
 8005c16:	4651      	mov	r1, sl
 8005c18:	f7fa fef8 	bl	8000a0c <__aeabi_dcmpun>
 8005c1c:	b148      	cbz	r0, 8005c32 <_printf_float+0xe2>
 8005c1e:	f1ba 0f00 	cmp.w	sl, #0
 8005c22:	bfb8      	it	lt
 8005c24:	232d      	movlt	r3, #45	; 0x2d
 8005c26:	4880      	ldr	r0, [pc, #512]	; (8005e28 <_printf_float+0x2d8>)
 8005c28:	bfb8      	it	lt
 8005c2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c2e:	4b7f      	ldr	r3, [pc, #508]	; (8005e2c <_printf_float+0x2dc>)
 8005c30:	e7d3      	b.n	8005bda <_printf_float+0x8a>
 8005c32:	6863      	ldr	r3, [r4, #4]
 8005c34:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	d142      	bne.n	8005cc2 <_printf_float+0x172>
 8005c3c:	2306      	movs	r3, #6
 8005c3e:	6063      	str	r3, [r4, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	9206      	str	r2, [sp, #24]
 8005c44:	aa0e      	add	r2, sp, #56	; 0x38
 8005c46:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005c4a:	aa0d      	add	r2, sp, #52	; 0x34
 8005c4c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005c50:	9203      	str	r2, [sp, #12]
 8005c52:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005c56:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c5a:	6023      	str	r3, [r4, #0]
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	4642      	mov	r2, r8
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4628      	mov	r0, r5
 8005c64:	4653      	mov	r3, sl
 8005c66:	910b      	str	r1, [sp, #44]	; 0x2c
 8005c68:	f7ff fed4 	bl	8005a14 <__cvt>
 8005c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c6e:	4680      	mov	r8, r0
 8005c70:	2947      	cmp	r1, #71	; 0x47
 8005c72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c74:	d108      	bne.n	8005c88 <_printf_float+0x138>
 8005c76:	1cc8      	adds	r0, r1, #3
 8005c78:	db02      	blt.n	8005c80 <_printf_float+0x130>
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	4299      	cmp	r1, r3
 8005c7e:	dd40      	ble.n	8005d02 <_printf_float+0x1b2>
 8005c80:	f1a9 0902 	sub.w	r9, r9, #2
 8005c84:	fa5f f989 	uxtb.w	r9, r9
 8005c88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c8c:	d81f      	bhi.n	8005cce <_printf_float+0x17e>
 8005c8e:	464a      	mov	r2, r9
 8005c90:	3901      	subs	r1, #1
 8005c92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c96:	910d      	str	r1, [sp, #52]	; 0x34
 8005c98:	f7ff ff1b 	bl	8005ad2 <__exponent>
 8005c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c9e:	4682      	mov	sl, r0
 8005ca0:	1813      	adds	r3, r2, r0
 8005ca2:	2a01      	cmp	r2, #1
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	dc02      	bgt.n	8005cae <_printf_float+0x15e>
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	07d2      	lsls	r2, r2, #31
 8005cac:	d501      	bpl.n	8005cb2 <_printf_float+0x162>
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d09b      	beq.n	8005bf2 <_printf_float+0xa2>
 8005cba:	232d      	movs	r3, #45	; 0x2d
 8005cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc0:	e797      	b.n	8005bf2 <_printf_float+0xa2>
 8005cc2:	2947      	cmp	r1, #71	; 0x47
 8005cc4:	d1bc      	bne.n	8005c40 <_printf_float+0xf0>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1ba      	bne.n	8005c40 <_printf_float+0xf0>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7b7      	b.n	8005c3e <_printf_float+0xee>
 8005cce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005cd2:	d118      	bne.n	8005d06 <_printf_float+0x1b6>
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	dd0b      	ble.n	8005cf2 <_printf_float+0x1a2>
 8005cda:	6121      	str	r1, [r4, #16]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <_printf_float+0x194>
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	07d0      	lsls	r0, r2, #31
 8005ce2:	d502      	bpl.n	8005cea <_printf_float+0x19a>
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	440b      	add	r3, r1
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	f04f 0a00 	mov.w	sl, #0
 8005cee:	65a1      	str	r1, [r4, #88]	; 0x58
 8005cf0:	e7df      	b.n	8005cb2 <_printf_float+0x162>
 8005cf2:	b913      	cbnz	r3, 8005cfa <_printf_float+0x1aa>
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	07d2      	lsls	r2, r2, #31
 8005cf8:	d501      	bpl.n	8005cfe <_printf_float+0x1ae>
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	e7f4      	b.n	8005ce8 <_printf_float+0x198>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e7f2      	b.n	8005ce8 <_printf_float+0x198>
 8005d02:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	db05      	blt.n	8005d18 <_printf_float+0x1c8>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	6121      	str	r1, [r4, #16]
 8005d10:	07d8      	lsls	r0, r3, #31
 8005d12:	d5ea      	bpl.n	8005cea <_printf_float+0x19a>
 8005d14:	1c4b      	adds	r3, r1, #1
 8005d16:	e7e7      	b.n	8005ce8 <_printf_float+0x198>
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	bfcc      	ite	gt
 8005d1c:	2201      	movgt	r2, #1
 8005d1e:	f1c1 0202 	rsble	r2, r1, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	e7e0      	b.n	8005ce8 <_printf_float+0x198>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	055a      	lsls	r2, r3, #21
 8005d2a:	d407      	bmi.n	8005d3c <_printf_float+0x1ec>
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	4642      	mov	r2, r8
 8005d30:	4631      	mov	r1, r6
 8005d32:	4628      	mov	r0, r5
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	d12b      	bne.n	8005d92 <_printf_float+0x242>
 8005d3a:	e764      	b.n	8005c06 <_printf_float+0xb6>
 8005d3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d40:	f240 80dd 	bls.w	8005efe <_printf_float+0x3ae>
 8005d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f7fa fe2c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d033      	beq.n	8005dbc <_printf_float+0x26c>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	4a35      	ldr	r2, [pc, #212]	; (8005e30 <_printf_float+0x2e0>)
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f43f af51 	beq.w	8005c06 <_printf_float+0xb6>
 8005d64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	db02      	blt.n	8005d72 <_printf_float+0x222>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	07d8      	lsls	r0, r3, #31
 8005d70:	d50f      	bpl.n	8005d92 <_printf_float+0x242>
 8005d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d76:	4631      	mov	r1, r6
 8005d78:	4628      	mov	r0, r5
 8005d7a:	47b8      	blx	r7
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	f43f af42 	beq.w	8005c06 <_printf_float+0xb6>
 8005d82:	f04f 0800 	mov.w	r8, #0
 8005d86:	f104 091a 	add.w	r9, r4, #26
 8005d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4543      	cmp	r3, r8
 8005d90:	dc09      	bgt.n	8005da6 <_printf_float+0x256>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	079b      	lsls	r3, r3, #30
 8005d96:	f100 8102 	bmi.w	8005f9e <_printf_float+0x44e>
 8005d9a:	68e0      	ldr	r0, [r4, #12]
 8005d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	bfb8      	it	lt
 8005da2:	4618      	movlt	r0, r3
 8005da4:	e731      	b.n	8005c0a <_printf_float+0xba>
 8005da6:	2301      	movs	r3, #1
 8005da8:	464a      	mov	r2, r9
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	f43f af28 	beq.w	8005c06 <_printf_float+0xb6>
 8005db6:	f108 0801 	add.w	r8, r8, #1
 8005dba:	e7e6      	b.n	8005d8a <_printf_float+0x23a>
 8005dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dc38      	bgt.n	8005e34 <_printf_float+0x2e4>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	4a19      	ldr	r2, [pc, #100]	; (8005e30 <_printf_float+0x2e0>)
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f af1a 	beq.w	8005c06 <_printf_float+0xb6>
 8005dd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	d102      	bne.n	8005de0 <_printf_float+0x290>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	07d9      	lsls	r1, r3, #31
 8005dde:	d5d8      	bpl.n	8005d92 <_printf_float+0x242>
 8005de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	f43f af0b 	beq.w	8005c06 <_printf_float+0xb6>
 8005df0:	f04f 0900 	mov.w	r9, #0
 8005df4:	f104 0a1a 	add.w	sl, r4, #26
 8005df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dfa:	425b      	negs	r3, r3
 8005dfc:	454b      	cmp	r3, r9
 8005dfe:	dc01      	bgt.n	8005e04 <_printf_float+0x2b4>
 8005e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e02:	e794      	b.n	8005d2e <_printf_float+0x1de>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f aef9 	beq.w	8005c06 <_printf_float+0xb6>
 8005e14:	f109 0901 	add.w	r9, r9, #1
 8005e18:	e7ee      	b.n	8005df8 <_printf_float+0x2a8>
 8005e1a:	bf00      	nop
 8005e1c:	7fefffff 	.word	0x7fefffff
 8005e20:	08008dac 	.word	0x08008dac
 8005e24:	08008db0 	.word	0x08008db0
 8005e28:	08008db8 	.word	0x08008db8
 8005e2c:	08008db4 	.word	0x08008db4
 8005e30:	08008dbc 	.word	0x08008dbc
 8005e34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	bfa8      	it	ge
 8005e3c:	461a      	movge	r2, r3
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	4691      	mov	r9, r2
 8005e42:	dc37      	bgt.n	8005eb4 <_printf_float+0x364>
 8005e44:	f04f 0b00 	mov.w	fp, #0
 8005e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e4c:	f104 021a 	add.w	r2, r4, #26
 8005e50:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005e54:	ebaa 0309 	sub.w	r3, sl, r9
 8005e58:	455b      	cmp	r3, fp
 8005e5a:	dc33      	bgt.n	8005ec4 <_printf_float+0x374>
 8005e5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e60:	429a      	cmp	r2, r3
 8005e62:	db3b      	blt.n	8005edc <_printf_float+0x38c>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07da      	lsls	r2, r3, #31
 8005e68:	d438      	bmi.n	8005edc <_printf_float+0x38c>
 8005e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e6e:	eba2 030a 	sub.w	r3, r2, sl
 8005e72:	eba2 0901 	sub.w	r9, r2, r1
 8005e76:	4599      	cmp	r9, r3
 8005e78:	bfa8      	it	ge
 8005e7a:	4699      	movge	r9, r3
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc34      	bgt.n	8005eec <_printf_float+0x39c>
 8005e82:	f04f 0800 	mov.w	r8, #0
 8005e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e8a:	f104 0a1a 	add.w	sl, r4, #26
 8005e8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e92:	1a9b      	subs	r3, r3, r2
 8005e94:	eba3 0309 	sub.w	r3, r3, r9
 8005e98:	4543      	cmp	r3, r8
 8005e9a:	f77f af7a 	ble.w	8005d92 <_printf_float+0x242>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f43f aeac 	beq.w	8005c06 <_printf_float+0xb6>
 8005eae:	f108 0801 	add.w	r8, r8, #1
 8005eb2:	e7ec      	b.n	8005e8e <_printf_float+0x33e>
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4642      	mov	r2, r8
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d1c0      	bne.n	8005e44 <_printf_float+0x2f4>
 8005ec2:	e6a0      	b.n	8005c06 <_printf_float+0xb6>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ecc:	47b8      	blx	r7
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f43f ae99 	beq.w	8005c06 <_printf_float+0xb6>
 8005ed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ed6:	f10b 0b01 	add.w	fp, fp, #1
 8005eda:	e7b9      	b.n	8005e50 <_printf_float+0x300>
 8005edc:	4631      	mov	r1, r6
 8005ede:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	d1bf      	bne.n	8005e6a <_printf_float+0x31a>
 8005eea:	e68c      	b.n	8005c06 <_printf_float+0xb6>
 8005eec:	464b      	mov	r3, r9
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	eb08 020a 	add.w	r2, r8, sl
 8005ef6:	47b8      	blx	r7
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d1c2      	bne.n	8005e82 <_printf_float+0x332>
 8005efc:	e683      	b.n	8005c06 <_printf_float+0xb6>
 8005efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f00:	2a01      	cmp	r2, #1
 8005f02:	dc01      	bgt.n	8005f08 <_printf_float+0x3b8>
 8005f04:	07db      	lsls	r3, r3, #31
 8005f06:	d537      	bpl.n	8005f78 <_printf_float+0x428>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f ae77 	beq.w	8005c06 <_printf_float+0xb6>
 8005f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f ae6f 	beq.w	8005c06 <_printf_float+0xb6>
 8005f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f7fa fd3a 	bl	80009a8 <__aeabi_dcmpeq>
 8005f34:	b9d8      	cbnz	r0, 8005f6e <_printf_float+0x41e>
 8005f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f38:	f108 0201 	add.w	r2, r8, #1
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	d10e      	bne.n	8005f66 <_printf_float+0x416>
 8005f48:	e65d      	b.n	8005c06 <_printf_float+0xb6>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	464a      	mov	r2, r9
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae56 	beq.w	8005c06 <_printf_float+0xb6>
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4543      	cmp	r3, r8
 8005f64:	dcf1      	bgt.n	8005f4a <_printf_float+0x3fa>
 8005f66:	4653      	mov	r3, sl
 8005f68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f6c:	e6e0      	b.n	8005d30 <_printf_float+0x1e0>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	f104 091a 	add.w	r9, r4, #26
 8005f76:	e7f2      	b.n	8005f5e <_printf_float+0x40e>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	e7df      	b.n	8005f3e <_printf_float+0x3ee>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	464a      	mov	r2, r9
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f ae3c 	beq.w	8005c06 <_printf_float+0xb6>
 8005f8e:	f108 0801 	add.w	r8, r8, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	4543      	cmp	r3, r8
 8005f9a:	dcf0      	bgt.n	8005f7e <_printf_float+0x42e>
 8005f9c:	e6fd      	b.n	8005d9a <_printf_float+0x24a>
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	f104 0919 	add.w	r9, r4, #25
 8005fa6:	e7f4      	b.n	8005f92 <_printf_float+0x442>

08005fa8 <_printf_common>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	4616      	mov	r6, r2
 8005fae:	4699      	mov	r9, r3
 8005fb0:	688a      	ldr	r2, [r1, #8]
 8005fb2:	690b      	ldr	r3, [r1, #16]
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	bfb8      	it	lt
 8005fba:	4613      	movlt	r3, r2
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc8:	b10a      	cbz	r2, 8005fce <_printf_common+0x26>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	bf42      	ittt	mi
 8005fd4:	6833      	ldrmi	r3, [r6, #0]
 8005fd6:	3302      	addmi	r3, #2
 8005fd8:	6033      	strmi	r3, [r6, #0]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	f015 0506 	ands.w	r5, r5, #6
 8005fe0:	d106      	bne.n	8005ff0 <_printf_common+0x48>
 8005fe2:	f104 0a19 	add.w	sl, r4, #25
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	6832      	ldr	r2, [r6, #0]
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc28      	bgt.n	8006042 <_printf_common+0x9a>
 8005ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ff4:	1e13      	subs	r3, r2, #0
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	bf18      	it	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	0692      	lsls	r2, r2, #26
 8005ffe:	d42d      	bmi.n	800605c <_printf_common+0xb4>
 8006000:	4649      	mov	r1, r9
 8006002:	4638      	mov	r0, r7
 8006004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006008:	47c0      	blx	r8
 800600a:	3001      	adds	r0, #1
 800600c:	d020      	beq.n	8006050 <_printf_common+0xa8>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	68e5      	ldr	r5, [r4, #12]
 8006012:	f003 0306 	and.w	r3, r3, #6
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf18      	it	ne
 800601a:	2500      	movne	r5, #0
 800601c:	6832      	ldr	r2, [r6, #0]
 800601e:	f04f 0600 	mov.w	r6, #0
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	bf08      	it	eq
 8006026:	1aad      	subeq	r5, r5, r2
 8006028:	6922      	ldr	r2, [r4, #16]
 800602a:	bf08      	it	eq
 800602c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006030:	4293      	cmp	r3, r2
 8006032:	bfc4      	itt	gt
 8006034:	1a9b      	subgt	r3, r3, r2
 8006036:	18ed      	addgt	r5, r5, r3
 8006038:	341a      	adds	r4, #26
 800603a:	42b5      	cmp	r5, r6
 800603c:	d11a      	bne.n	8006074 <_printf_common+0xcc>
 800603e:	2000      	movs	r0, #0
 8006040:	e008      	b.n	8006054 <_printf_common+0xac>
 8006042:	2301      	movs	r3, #1
 8006044:	4652      	mov	r2, sl
 8006046:	4649      	mov	r1, r9
 8006048:	4638      	mov	r0, r7
 800604a:	47c0      	blx	r8
 800604c:	3001      	adds	r0, #1
 800604e:	d103      	bne.n	8006058 <_printf_common+0xb0>
 8006050:	f04f 30ff 	mov.w	r0, #4294967295
 8006054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006058:	3501      	adds	r5, #1
 800605a:	e7c4      	b.n	8005fe6 <_printf_common+0x3e>
 800605c:	2030      	movs	r0, #48	; 0x30
 800605e:	18e1      	adds	r1, r4, r3
 8006060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800606a:	4422      	add	r2, r4
 800606c:	3302      	adds	r3, #2
 800606e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006072:	e7c5      	b.n	8006000 <_printf_common+0x58>
 8006074:	2301      	movs	r3, #1
 8006076:	4622      	mov	r2, r4
 8006078:	4649      	mov	r1, r9
 800607a:	4638      	mov	r0, r7
 800607c:	47c0      	blx	r8
 800607e:	3001      	adds	r0, #1
 8006080:	d0e6      	beq.n	8006050 <_printf_common+0xa8>
 8006082:	3601      	adds	r6, #1
 8006084:	e7d9      	b.n	800603a <_printf_common+0x92>
	...

08006088 <_printf_i>:
 8006088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	460c      	mov	r4, r1
 800608e:	7e27      	ldrb	r7, [r4, #24]
 8006090:	4691      	mov	r9, r2
 8006092:	2f78      	cmp	r7, #120	; 0x78
 8006094:	4680      	mov	r8, r0
 8006096:	469a      	mov	sl, r3
 8006098:	990c      	ldr	r1, [sp, #48]	; 0x30
 800609a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800609e:	d807      	bhi.n	80060b0 <_printf_i+0x28>
 80060a0:	2f62      	cmp	r7, #98	; 0x62
 80060a2:	d80a      	bhi.n	80060ba <_printf_i+0x32>
 80060a4:	2f00      	cmp	r7, #0
 80060a6:	f000 80d9 	beq.w	800625c <_printf_i+0x1d4>
 80060aa:	2f58      	cmp	r7, #88	; 0x58
 80060ac:	f000 80a4 	beq.w	80061f8 <_printf_i+0x170>
 80060b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060b8:	e03a      	b.n	8006130 <_printf_i+0xa8>
 80060ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060be:	2b15      	cmp	r3, #21
 80060c0:	d8f6      	bhi.n	80060b0 <_printf_i+0x28>
 80060c2:	a001      	add	r0, pc, #4	; (adr r0, 80060c8 <_printf_i+0x40>)
 80060c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006135 	.word	0x08006135
 80060d0:	080060b1 	.word	0x080060b1
 80060d4:	080060b1 	.word	0x080060b1
 80060d8:	080060b1 	.word	0x080060b1
 80060dc:	080060b1 	.word	0x080060b1
 80060e0:	08006135 	.word	0x08006135
 80060e4:	080060b1 	.word	0x080060b1
 80060e8:	080060b1 	.word	0x080060b1
 80060ec:	080060b1 	.word	0x080060b1
 80060f0:	080060b1 	.word	0x080060b1
 80060f4:	08006243 	.word	0x08006243
 80060f8:	08006165 	.word	0x08006165
 80060fc:	08006225 	.word	0x08006225
 8006100:	080060b1 	.word	0x080060b1
 8006104:	080060b1 	.word	0x080060b1
 8006108:	08006265 	.word	0x08006265
 800610c:	080060b1 	.word	0x080060b1
 8006110:	08006165 	.word	0x08006165
 8006114:	080060b1 	.word	0x080060b1
 8006118:	080060b1 	.word	0x080060b1
 800611c:	0800622d 	.word	0x0800622d
 8006120:	680b      	ldr	r3, [r1, #0]
 8006122:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	600a      	str	r2, [r1, #0]
 800612c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006130:	2301      	movs	r3, #1
 8006132:	e0a4      	b.n	800627e <_printf_i+0x1f6>
 8006134:	6825      	ldr	r5, [r4, #0]
 8006136:	6808      	ldr	r0, [r1, #0]
 8006138:	062e      	lsls	r6, r5, #24
 800613a:	f100 0304 	add.w	r3, r0, #4
 800613e:	d50a      	bpl.n	8006156 <_printf_i+0xce>
 8006140:	6805      	ldr	r5, [r0, #0]
 8006142:	600b      	str	r3, [r1, #0]
 8006144:	2d00      	cmp	r5, #0
 8006146:	da03      	bge.n	8006150 <_printf_i+0xc8>
 8006148:	232d      	movs	r3, #45	; 0x2d
 800614a:	426d      	negs	r5, r5
 800614c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006150:	230a      	movs	r3, #10
 8006152:	485e      	ldr	r0, [pc, #376]	; (80062cc <_printf_i+0x244>)
 8006154:	e019      	b.n	800618a <_printf_i+0x102>
 8006156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800615a:	6805      	ldr	r5, [r0, #0]
 800615c:	600b      	str	r3, [r1, #0]
 800615e:	bf18      	it	ne
 8006160:	b22d      	sxthne	r5, r5
 8006162:	e7ef      	b.n	8006144 <_printf_i+0xbc>
 8006164:	680b      	ldr	r3, [r1, #0]
 8006166:	6825      	ldr	r5, [r4, #0]
 8006168:	1d18      	adds	r0, r3, #4
 800616a:	6008      	str	r0, [r1, #0]
 800616c:	0628      	lsls	r0, r5, #24
 800616e:	d501      	bpl.n	8006174 <_printf_i+0xec>
 8006170:	681d      	ldr	r5, [r3, #0]
 8006172:	e002      	b.n	800617a <_printf_i+0xf2>
 8006174:	0669      	lsls	r1, r5, #25
 8006176:	d5fb      	bpl.n	8006170 <_printf_i+0xe8>
 8006178:	881d      	ldrh	r5, [r3, #0]
 800617a:	2f6f      	cmp	r7, #111	; 0x6f
 800617c:	bf0c      	ite	eq
 800617e:	2308      	moveq	r3, #8
 8006180:	230a      	movne	r3, #10
 8006182:	4852      	ldr	r0, [pc, #328]	; (80062cc <_printf_i+0x244>)
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800618a:	6866      	ldr	r6, [r4, #4]
 800618c:	2e00      	cmp	r6, #0
 800618e:	bfa8      	it	ge
 8006190:	6821      	ldrge	r1, [r4, #0]
 8006192:	60a6      	str	r6, [r4, #8]
 8006194:	bfa4      	itt	ge
 8006196:	f021 0104 	bicge.w	r1, r1, #4
 800619a:	6021      	strge	r1, [r4, #0]
 800619c:	b90d      	cbnz	r5, 80061a2 <_printf_i+0x11a>
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d04d      	beq.n	800623e <_printf_i+0x1b6>
 80061a2:	4616      	mov	r6, r2
 80061a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a8:	fb03 5711 	mls	r7, r3, r1, r5
 80061ac:	5dc7      	ldrb	r7, [r0, r7]
 80061ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b2:	462f      	mov	r7, r5
 80061b4:	42bb      	cmp	r3, r7
 80061b6:	460d      	mov	r5, r1
 80061b8:	d9f4      	bls.n	80061a4 <_printf_i+0x11c>
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d10b      	bne.n	80061d6 <_printf_i+0x14e>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	07df      	lsls	r7, r3, #31
 80061c2:	d508      	bpl.n	80061d6 <_printf_i+0x14e>
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	6861      	ldr	r1, [r4, #4]
 80061c8:	4299      	cmp	r1, r3
 80061ca:	bfde      	ittt	le
 80061cc:	2330      	movle	r3, #48	; 0x30
 80061ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d6:	1b92      	subs	r2, r2, r6
 80061d8:	6122      	str	r2, [r4, #16]
 80061da:	464b      	mov	r3, r9
 80061dc:	4621      	mov	r1, r4
 80061de:	4640      	mov	r0, r8
 80061e0:	f8cd a000 	str.w	sl, [sp]
 80061e4:	aa03      	add	r2, sp, #12
 80061e6:	f7ff fedf 	bl	8005fa8 <_printf_common>
 80061ea:	3001      	adds	r0, #1
 80061ec:	d14c      	bne.n	8006288 <_printf_i+0x200>
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	b004      	add	sp, #16
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	4834      	ldr	r0, [pc, #208]	; (80062cc <_printf_i+0x244>)
 80061fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061fe:	680e      	ldr	r6, [r1, #0]
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	f856 5b04 	ldr.w	r5, [r6], #4
 8006206:	061f      	lsls	r7, r3, #24
 8006208:	600e      	str	r6, [r1, #0]
 800620a:	d514      	bpl.n	8006236 <_printf_i+0x1ae>
 800620c:	07d9      	lsls	r1, r3, #31
 800620e:	bf44      	itt	mi
 8006210:	f043 0320 	orrmi.w	r3, r3, #32
 8006214:	6023      	strmi	r3, [r4, #0]
 8006216:	b91d      	cbnz	r5, 8006220 <_printf_i+0x198>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f023 0320 	bic.w	r3, r3, #32
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	2310      	movs	r3, #16
 8006222:	e7af      	b.n	8006184 <_printf_i+0xfc>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	f043 0320 	orr.w	r3, r3, #32
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	2378      	movs	r3, #120	; 0x78
 800622e:	4828      	ldr	r0, [pc, #160]	; (80062d0 <_printf_i+0x248>)
 8006230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006234:	e7e3      	b.n	80061fe <_printf_i+0x176>
 8006236:	065e      	lsls	r6, r3, #25
 8006238:	bf48      	it	mi
 800623a:	b2ad      	uxthmi	r5, r5
 800623c:	e7e6      	b.n	800620c <_printf_i+0x184>
 800623e:	4616      	mov	r6, r2
 8006240:	e7bb      	b.n	80061ba <_printf_i+0x132>
 8006242:	680b      	ldr	r3, [r1, #0]
 8006244:	6826      	ldr	r6, [r4, #0]
 8006246:	1d1d      	adds	r5, r3, #4
 8006248:	6960      	ldr	r0, [r4, #20]
 800624a:	600d      	str	r5, [r1, #0]
 800624c:	0635      	lsls	r5, r6, #24
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	d501      	bpl.n	8006256 <_printf_i+0x1ce>
 8006252:	6018      	str	r0, [r3, #0]
 8006254:	e002      	b.n	800625c <_printf_i+0x1d4>
 8006256:	0671      	lsls	r1, r6, #25
 8006258:	d5fb      	bpl.n	8006252 <_printf_i+0x1ca>
 800625a:	8018      	strh	r0, [r3, #0]
 800625c:	2300      	movs	r3, #0
 800625e:	4616      	mov	r6, r2
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	e7ba      	b.n	80061da <_printf_i+0x152>
 8006264:	680b      	ldr	r3, [r1, #0]
 8006266:	1d1a      	adds	r2, r3, #4
 8006268:	600a      	str	r2, [r1, #0]
 800626a:	681e      	ldr	r6, [r3, #0]
 800626c:	2100      	movs	r1, #0
 800626e:	4630      	mov	r0, r6
 8006270:	6862      	ldr	r2, [r4, #4]
 8006272:	f000 fed7 	bl	8007024 <memchr>
 8006276:	b108      	cbz	r0, 800627c <_printf_i+0x1f4>
 8006278:	1b80      	subs	r0, r0, r6
 800627a:	6060      	str	r0, [r4, #4]
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	6123      	str	r3, [r4, #16]
 8006280:	2300      	movs	r3, #0
 8006282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006286:	e7a8      	b.n	80061da <_printf_i+0x152>
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	47d0      	blx	sl
 8006292:	3001      	adds	r0, #1
 8006294:	d0ab      	beq.n	80061ee <_printf_i+0x166>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	079b      	lsls	r3, r3, #30
 800629a:	d413      	bmi.n	80062c4 <_printf_i+0x23c>
 800629c:	68e0      	ldr	r0, [r4, #12]
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	4298      	cmp	r0, r3
 80062a2:	bfb8      	it	lt
 80062a4:	4618      	movlt	r0, r3
 80062a6:	e7a4      	b.n	80061f2 <_printf_i+0x16a>
 80062a8:	2301      	movs	r3, #1
 80062aa:	4632      	mov	r2, r6
 80062ac:	4649      	mov	r1, r9
 80062ae:	4640      	mov	r0, r8
 80062b0:	47d0      	blx	sl
 80062b2:	3001      	adds	r0, #1
 80062b4:	d09b      	beq.n	80061ee <_printf_i+0x166>
 80062b6:	3501      	adds	r5, #1
 80062b8:	68e3      	ldr	r3, [r4, #12]
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	1a5b      	subs	r3, r3, r1
 80062be:	42ab      	cmp	r3, r5
 80062c0:	dcf2      	bgt.n	80062a8 <_printf_i+0x220>
 80062c2:	e7eb      	b.n	800629c <_printf_i+0x214>
 80062c4:	2500      	movs	r5, #0
 80062c6:	f104 0619 	add.w	r6, r4, #25
 80062ca:	e7f5      	b.n	80062b8 <_printf_i+0x230>
 80062cc:	08008dbe 	.word	0x08008dbe
 80062d0:	08008dcf 	.word	0x08008dcf

080062d4 <siprintf>:
 80062d4:	b40e      	push	{r1, r2, r3}
 80062d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062da:	b500      	push	{lr}
 80062dc:	b09c      	sub	sp, #112	; 0x70
 80062de:	ab1d      	add	r3, sp, #116	; 0x74
 80062e0:	9002      	str	r0, [sp, #8]
 80062e2:	9006      	str	r0, [sp, #24]
 80062e4:	9107      	str	r1, [sp, #28]
 80062e6:	9104      	str	r1, [sp, #16]
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <siprintf+0x38>)
 80062ea:	4909      	ldr	r1, [pc, #36]	; (8006310 <siprintf+0x3c>)
 80062ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f0:	9105      	str	r1, [sp, #20]
 80062f2:	6800      	ldr	r0, [r0, #0]
 80062f4:	a902      	add	r1, sp, #8
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f001 fb42 	bl	8007980 <_svfiprintf_r>
 80062fc:	2200      	movs	r2, #0
 80062fe:	9b02      	ldr	r3, [sp, #8]
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	b01c      	add	sp, #112	; 0x70
 8006304:	f85d eb04 	ldr.w	lr, [sp], #4
 8006308:	b003      	add	sp, #12
 800630a:	4770      	bx	lr
 800630c:	20000018 	.word	0x20000018
 8006310:	ffff0208 	.word	0xffff0208

08006314 <quorem>:
 8006314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	6903      	ldr	r3, [r0, #16]
 800631a:	690c      	ldr	r4, [r1, #16]
 800631c:	4607      	mov	r7, r0
 800631e:	42a3      	cmp	r3, r4
 8006320:	f2c0 8083 	blt.w	800642a <quorem+0x116>
 8006324:	3c01      	subs	r4, #1
 8006326:	f100 0514 	add.w	r5, r0, #20
 800632a:	f101 0814 	add.w	r8, r1, #20
 800632e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800633c:	3301      	adds	r3, #1
 800633e:	429a      	cmp	r2, r3
 8006340:	fbb2 f6f3 	udiv	r6, r2, r3
 8006344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800634c:	d332      	bcc.n	80063b4 <quorem+0xa0>
 800634e:	f04f 0e00 	mov.w	lr, #0
 8006352:	4640      	mov	r0, r8
 8006354:	46ac      	mov	ip, r5
 8006356:	46f2      	mov	sl, lr
 8006358:	f850 2b04 	ldr.w	r2, [r0], #4
 800635c:	b293      	uxth	r3, r2
 800635e:	fb06 e303 	mla	r3, r6, r3, lr
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006368:	fb06 e202 	mla	r2, r6, r2, lr
 800636c:	b29b      	uxth	r3, r3
 800636e:	ebaa 0303 	sub.w	r3, sl, r3
 8006372:	f8dc a000 	ldr.w	sl, [ip]
 8006376:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800637a:	fa1f fa8a 	uxth.w	sl, sl
 800637e:	4453      	add	r3, sl
 8006380:	fa1f fa82 	uxth.w	sl, r2
 8006384:	f8dc 2000 	ldr.w	r2, [ip]
 8006388:	4581      	cmp	r9, r0
 800638a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800638e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006398:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800639c:	f84c 3b04 	str.w	r3, [ip], #4
 80063a0:	d2da      	bcs.n	8006358 <quorem+0x44>
 80063a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80063a6:	b92b      	cbnz	r3, 80063b4 <quorem+0xa0>
 80063a8:	9b01      	ldr	r3, [sp, #4]
 80063aa:	3b04      	subs	r3, #4
 80063ac:	429d      	cmp	r5, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	d32f      	bcc.n	8006412 <quorem+0xfe>
 80063b2:	613c      	str	r4, [r7, #16]
 80063b4:	4638      	mov	r0, r7
 80063b6:	f001 f8cb 	bl	8007550 <__mcmp>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	db25      	blt.n	800640a <quorem+0xf6>
 80063be:	4628      	mov	r0, r5
 80063c0:	f04f 0c00 	mov.w	ip, #0
 80063c4:	3601      	adds	r6, #1
 80063c6:	f858 1b04 	ldr.w	r1, [r8], #4
 80063ca:	f8d0 e000 	ldr.w	lr, [r0]
 80063ce:	b28b      	uxth	r3, r1
 80063d0:	ebac 0303 	sub.w	r3, ip, r3
 80063d4:	fa1f f28e 	uxth.w	r2, lr
 80063d8:	4413      	add	r3, r2
 80063da:	0c0a      	lsrs	r2, r1, #16
 80063dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ea:	45c1      	cmp	r9, r8
 80063ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063f0:	f840 3b04 	str.w	r3, [r0], #4
 80063f4:	d2e7      	bcs.n	80063c6 <quorem+0xb2>
 80063f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fe:	b922      	cbnz	r2, 800640a <quorem+0xf6>
 8006400:	3b04      	subs	r3, #4
 8006402:	429d      	cmp	r5, r3
 8006404:	461a      	mov	r2, r3
 8006406:	d30a      	bcc.n	800641e <quorem+0x10a>
 8006408:	613c      	str	r4, [r7, #16]
 800640a:	4630      	mov	r0, r6
 800640c:	b003      	add	sp, #12
 800640e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	3b04      	subs	r3, #4
 8006416:	2a00      	cmp	r2, #0
 8006418:	d1cb      	bne.n	80063b2 <quorem+0x9e>
 800641a:	3c01      	subs	r4, #1
 800641c:	e7c6      	b.n	80063ac <quorem+0x98>
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	3b04      	subs	r3, #4
 8006422:	2a00      	cmp	r2, #0
 8006424:	d1f0      	bne.n	8006408 <quorem+0xf4>
 8006426:	3c01      	subs	r4, #1
 8006428:	e7eb      	b.n	8006402 <quorem+0xee>
 800642a:	2000      	movs	r0, #0
 800642c:	e7ee      	b.n	800640c <quorem+0xf8>
	...

08006430 <_dtoa_r>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	4616      	mov	r6, r2
 8006436:	461f      	mov	r7, r3
 8006438:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800643a:	b099      	sub	sp, #100	; 0x64
 800643c:	4605      	mov	r5, r0
 800643e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006442:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006446:	b974      	cbnz	r4, 8006466 <_dtoa_r+0x36>
 8006448:	2010      	movs	r0, #16
 800644a:	f000 fde3 	bl	8007014 <malloc>
 800644e:	4602      	mov	r2, r0
 8006450:	6268      	str	r0, [r5, #36]	; 0x24
 8006452:	b920      	cbnz	r0, 800645e <_dtoa_r+0x2e>
 8006454:	21ea      	movs	r1, #234	; 0xea
 8006456:	4bae      	ldr	r3, [pc, #696]	; (8006710 <_dtoa_r+0x2e0>)
 8006458:	48ae      	ldr	r0, [pc, #696]	; (8006714 <_dtoa_r+0x2e4>)
 800645a:	f001 fba1 	bl	8007ba0 <__assert_func>
 800645e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006462:	6004      	str	r4, [r0, #0]
 8006464:	60c4      	str	r4, [r0, #12]
 8006466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006468:	6819      	ldr	r1, [r3, #0]
 800646a:	b151      	cbz	r1, 8006482 <_dtoa_r+0x52>
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	2301      	movs	r3, #1
 8006470:	4093      	lsls	r3, r2
 8006472:	604a      	str	r2, [r1, #4]
 8006474:	608b      	str	r3, [r1, #8]
 8006476:	4628      	mov	r0, r5
 8006478:	f000 fe30 	bl	80070dc <_Bfree>
 800647c:	2200      	movs	r2, #0
 800647e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	1e3b      	subs	r3, r7, #0
 8006484:	bfaf      	iteee	ge
 8006486:	2300      	movge	r3, #0
 8006488:	2201      	movlt	r2, #1
 800648a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800648e:	9305      	strlt	r3, [sp, #20]
 8006490:	bfa8      	it	ge
 8006492:	f8c8 3000 	strge.w	r3, [r8]
 8006496:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800649a:	4b9f      	ldr	r3, [pc, #636]	; (8006718 <_dtoa_r+0x2e8>)
 800649c:	bfb8      	it	lt
 800649e:	f8c8 2000 	strlt.w	r2, [r8]
 80064a2:	ea33 0309 	bics.w	r3, r3, r9
 80064a6:	d119      	bne.n	80064dc <_dtoa_r+0xac>
 80064a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064b4:	4333      	orrs	r3, r6
 80064b6:	f000 8580 	beq.w	8006fba <_dtoa_r+0xb8a>
 80064ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064bc:	b953      	cbnz	r3, 80064d4 <_dtoa_r+0xa4>
 80064be:	4b97      	ldr	r3, [pc, #604]	; (800671c <_dtoa_r+0x2ec>)
 80064c0:	e022      	b.n	8006508 <_dtoa_r+0xd8>
 80064c2:	4b97      	ldr	r3, [pc, #604]	; (8006720 <_dtoa_r+0x2f0>)
 80064c4:	9308      	str	r3, [sp, #32]
 80064c6:	3308      	adds	r3, #8
 80064c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	9808      	ldr	r0, [sp, #32]
 80064ce:	b019      	add	sp, #100	; 0x64
 80064d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d4:	4b91      	ldr	r3, [pc, #580]	; (800671c <_dtoa_r+0x2ec>)
 80064d6:	9308      	str	r3, [sp, #32]
 80064d8:	3303      	adds	r3, #3
 80064da:	e7f5      	b.n	80064c8 <_dtoa_r+0x98>
 80064dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80064e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	f7fa fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80064f0:	4680      	mov	r8, r0
 80064f2:	b158      	cbz	r0, 800650c <_dtoa_r+0xdc>
 80064f4:	2301      	movs	r3, #1
 80064f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8559 	beq.w	8006fb4 <_dtoa_r+0xb84>
 8006502:	4888      	ldr	r0, [pc, #544]	; (8006724 <_dtoa_r+0x2f4>)
 8006504:	6018      	str	r0, [r3, #0]
 8006506:	1e43      	subs	r3, r0, #1
 8006508:	9308      	str	r3, [sp, #32]
 800650a:	e7df      	b.n	80064cc <_dtoa_r+0x9c>
 800650c:	ab16      	add	r3, sp, #88	; 0x58
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	ab17      	add	r3, sp, #92	; 0x5c
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	4628      	mov	r0, r5
 8006516:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800651a:	f001 f8c5 	bl	80076a8 <__d2b>
 800651e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006522:	4682      	mov	sl, r0
 8006524:	2c00      	cmp	r4, #0
 8006526:	d07e      	beq.n	8006626 <_dtoa_r+0x1f6>
 8006528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800652c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006532:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006536:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800653a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800653e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006542:	2200      	movs	r2, #0
 8006544:	4b78      	ldr	r3, [pc, #480]	; (8006728 <_dtoa_r+0x2f8>)
 8006546:	f7f9 fe0f 	bl	8000168 <__aeabi_dsub>
 800654a:	a36b      	add	r3, pc, #428	; (adr r3, 80066f8 <_dtoa_r+0x2c8>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7f9 ffc2 	bl	80004d8 <__aeabi_dmul>
 8006554:	a36a      	add	r3, pc, #424	; (adr r3, 8006700 <_dtoa_r+0x2d0>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7f9 fe07 	bl	800016c <__adddf3>
 800655e:	4606      	mov	r6, r0
 8006560:	4620      	mov	r0, r4
 8006562:	460f      	mov	r7, r1
 8006564:	f7f9 ff4e 	bl	8000404 <__aeabi_i2d>
 8006568:	a367      	add	r3, pc, #412	; (adr r3, 8006708 <_dtoa_r+0x2d8>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 ffb3 	bl	80004d8 <__aeabi_dmul>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7f9 fdf7 	bl	800016c <__adddf3>
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	f7fa fa59 	bl	8000a38 <__aeabi_d2iz>
 8006586:	2200      	movs	r2, #0
 8006588:	4681      	mov	r9, r0
 800658a:	2300      	movs	r3, #0
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f7fa fa14 	bl	80009bc <__aeabi_dcmplt>
 8006594:	b148      	cbz	r0, 80065aa <_dtoa_r+0x17a>
 8006596:	4648      	mov	r0, r9
 8006598:	f7f9 ff34 	bl	8000404 <__aeabi_i2d>
 800659c:	4632      	mov	r2, r6
 800659e:	463b      	mov	r3, r7
 80065a0:	f7fa fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80065a4:	b908      	cbnz	r0, 80065aa <_dtoa_r+0x17a>
 80065a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80065aa:	f1b9 0f16 	cmp.w	r9, #22
 80065ae:	d857      	bhi.n	8006660 <_dtoa_r+0x230>
 80065b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065b4:	4b5d      	ldr	r3, [pc, #372]	; (800672c <_dtoa_r+0x2fc>)
 80065b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f7fa f9fd 	bl	80009bc <__aeabi_dcmplt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d04e      	beq.n	8006664 <_dtoa_r+0x234>
 80065c6:	2300      	movs	r3, #0
 80065c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80065cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065d0:	1b1c      	subs	r4, r3, r4
 80065d2:	1e63      	subs	r3, r4, #1
 80065d4:	9309      	str	r3, [sp, #36]	; 0x24
 80065d6:	bf49      	itett	mi
 80065d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80065dc:	2300      	movpl	r3, #0
 80065de:	9306      	strmi	r3, [sp, #24]
 80065e0:	2300      	movmi	r3, #0
 80065e2:	bf54      	ite	pl
 80065e4:	9306      	strpl	r3, [sp, #24]
 80065e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80065e8:	f1b9 0f00 	cmp.w	r9, #0
 80065ec:	db3c      	blt.n	8006668 <_dtoa_r+0x238>
 80065ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80065f4:	444b      	add	r3, r9
 80065f6:	9309      	str	r3, [sp, #36]	; 0x24
 80065f8:	2300      	movs	r3, #0
 80065fa:	930a      	str	r3, [sp, #40]	; 0x28
 80065fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d86c      	bhi.n	80066dc <_dtoa_r+0x2ac>
 8006602:	2b05      	cmp	r3, #5
 8006604:	bfc4      	itt	gt
 8006606:	3b04      	subgt	r3, #4
 8006608:	9322      	strgt	r3, [sp, #136]	; 0x88
 800660a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800660c:	bfc8      	it	gt
 800660e:	2400      	movgt	r4, #0
 8006610:	f1a3 0302 	sub.w	r3, r3, #2
 8006614:	bfd8      	it	le
 8006616:	2401      	movle	r4, #1
 8006618:	2b03      	cmp	r3, #3
 800661a:	f200 808b 	bhi.w	8006734 <_dtoa_r+0x304>
 800661e:	e8df f003 	tbb	[pc, r3]
 8006622:	4f2d      	.short	0x4f2d
 8006624:	5b4d      	.short	0x5b4d
 8006626:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800662a:	441c      	add	r4, r3
 800662c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006630:	2b20      	cmp	r3, #32
 8006632:	bfc3      	ittte	gt
 8006634:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006638:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800663c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006640:	f1c3 0320 	rsble	r3, r3, #32
 8006644:	bfc6      	itte	gt
 8006646:	fa26 f000 	lsrgt.w	r0, r6, r0
 800664a:	4318      	orrgt	r0, r3
 800664c:	fa06 f003 	lslle.w	r0, r6, r3
 8006650:	f7f9 fec8 	bl	80003e4 <__aeabi_ui2d>
 8006654:	2301      	movs	r3, #1
 8006656:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800665a:	3c01      	subs	r4, #1
 800665c:	9313      	str	r3, [sp, #76]	; 0x4c
 800665e:	e770      	b.n	8006542 <_dtoa_r+0x112>
 8006660:	2301      	movs	r3, #1
 8006662:	e7b3      	b.n	80065cc <_dtoa_r+0x19c>
 8006664:	900f      	str	r0, [sp, #60]	; 0x3c
 8006666:	e7b2      	b.n	80065ce <_dtoa_r+0x19e>
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	eba3 0309 	sub.w	r3, r3, r9
 800666e:	9306      	str	r3, [sp, #24]
 8006670:	f1c9 0300 	rsb	r3, r9, #0
 8006674:	930a      	str	r3, [sp, #40]	; 0x28
 8006676:	2300      	movs	r3, #0
 8006678:	930e      	str	r3, [sp, #56]	; 0x38
 800667a:	e7bf      	b.n	80065fc <_dtoa_r+0x1cc>
 800667c:	2300      	movs	r3, #0
 800667e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006682:	2b00      	cmp	r3, #0
 8006684:	dc59      	bgt.n	800673a <_dtoa_r+0x30a>
 8006686:	f04f 0b01 	mov.w	fp, #1
 800668a:	465b      	mov	r3, fp
 800668c:	f8cd b008 	str.w	fp, [sp, #8]
 8006690:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006694:	2200      	movs	r2, #0
 8006696:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006698:	6042      	str	r2, [r0, #4]
 800669a:	2204      	movs	r2, #4
 800669c:	f102 0614 	add.w	r6, r2, #20
 80066a0:	429e      	cmp	r6, r3
 80066a2:	6841      	ldr	r1, [r0, #4]
 80066a4:	d94f      	bls.n	8006746 <_dtoa_r+0x316>
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 fcd8 	bl	800705c <_Balloc>
 80066ac:	9008      	str	r0, [sp, #32]
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d14d      	bne.n	800674e <_dtoa_r+0x31e>
 80066b2:	4602      	mov	r2, r0
 80066b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066b8:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <_dtoa_r+0x300>)
 80066ba:	e6cd      	b.n	8006458 <_dtoa_r+0x28>
 80066bc:	2301      	movs	r3, #1
 80066be:	e7de      	b.n	800667e <_dtoa_r+0x24e>
 80066c0:	2300      	movs	r3, #0
 80066c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066c6:	eb09 0b03 	add.w	fp, r9, r3
 80066ca:	f10b 0301 	add.w	r3, fp, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	9302      	str	r3, [sp, #8]
 80066d2:	bfb8      	it	lt
 80066d4:	2301      	movlt	r3, #1
 80066d6:	e7dd      	b.n	8006694 <_dtoa_r+0x264>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7f2      	b.n	80066c2 <_dtoa_r+0x292>
 80066dc:	2401      	movs	r4, #1
 80066de:	2300      	movs	r3, #0
 80066e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80066e2:	9322      	str	r3, [sp, #136]	; 0x88
 80066e4:	f04f 3bff 	mov.w	fp, #4294967295
 80066e8:	2200      	movs	r2, #0
 80066ea:	2312      	movs	r3, #18
 80066ec:	f8cd b008 	str.w	fp, [sp, #8]
 80066f0:	9223      	str	r2, [sp, #140]	; 0x8c
 80066f2:	e7cf      	b.n	8006694 <_dtoa_r+0x264>
 80066f4:	f3af 8000 	nop.w
 80066f8:	636f4361 	.word	0x636f4361
 80066fc:	3fd287a7 	.word	0x3fd287a7
 8006700:	8b60c8b3 	.word	0x8b60c8b3
 8006704:	3fc68a28 	.word	0x3fc68a28
 8006708:	509f79fb 	.word	0x509f79fb
 800670c:	3fd34413 	.word	0x3fd34413
 8006710:	08008ded 	.word	0x08008ded
 8006714:	08008e04 	.word	0x08008e04
 8006718:	7ff00000 	.word	0x7ff00000
 800671c:	08008de9 	.word	0x08008de9
 8006720:	08008de0 	.word	0x08008de0
 8006724:	08008dbd 	.word	0x08008dbd
 8006728:	3ff80000 	.word	0x3ff80000
 800672c:	08008f00 	.word	0x08008f00
 8006730:	08008e63 	.word	0x08008e63
 8006734:	2301      	movs	r3, #1
 8006736:	930b      	str	r3, [sp, #44]	; 0x2c
 8006738:	e7d4      	b.n	80066e4 <_dtoa_r+0x2b4>
 800673a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800673e:	465b      	mov	r3, fp
 8006740:	f8cd b008 	str.w	fp, [sp, #8]
 8006744:	e7a6      	b.n	8006694 <_dtoa_r+0x264>
 8006746:	3101      	adds	r1, #1
 8006748:	6041      	str	r1, [r0, #4]
 800674a:	0052      	lsls	r2, r2, #1
 800674c:	e7a6      	b.n	800669c <_dtoa_r+0x26c>
 800674e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006750:	9a08      	ldr	r2, [sp, #32]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	9b02      	ldr	r3, [sp, #8]
 8006756:	2b0e      	cmp	r3, #14
 8006758:	f200 80a8 	bhi.w	80068ac <_dtoa_r+0x47c>
 800675c:	2c00      	cmp	r4, #0
 800675e:	f000 80a5 	beq.w	80068ac <_dtoa_r+0x47c>
 8006762:	f1b9 0f00 	cmp.w	r9, #0
 8006766:	dd34      	ble.n	80067d2 <_dtoa_r+0x3a2>
 8006768:	4a9a      	ldr	r2, [pc, #616]	; (80069d4 <_dtoa_r+0x5a4>)
 800676a:	f009 030f 	and.w	r3, r9, #15
 800676e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006772:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800677a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800677e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006782:	d016      	beq.n	80067b2 <_dtoa_r+0x382>
 8006784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006788:	4b93      	ldr	r3, [pc, #588]	; (80069d8 <_dtoa_r+0x5a8>)
 800678a:	2703      	movs	r7, #3
 800678c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006790:	f7f9 ffcc 	bl	800072c <__aeabi_ddiv>
 8006794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006798:	f004 040f 	and.w	r4, r4, #15
 800679c:	4e8e      	ldr	r6, [pc, #568]	; (80069d8 <_dtoa_r+0x5a8>)
 800679e:	b954      	cbnz	r4, 80067b6 <_dtoa_r+0x386>
 80067a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067a8:	f7f9 ffc0 	bl	800072c <__aeabi_ddiv>
 80067ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b0:	e029      	b.n	8006806 <_dtoa_r+0x3d6>
 80067b2:	2702      	movs	r7, #2
 80067b4:	e7f2      	b.n	800679c <_dtoa_r+0x36c>
 80067b6:	07e1      	lsls	r1, r4, #31
 80067b8:	d508      	bpl.n	80067cc <_dtoa_r+0x39c>
 80067ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067c2:	f7f9 fe89 	bl	80004d8 <__aeabi_dmul>
 80067c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ca:	3701      	adds	r7, #1
 80067cc:	1064      	asrs	r4, r4, #1
 80067ce:	3608      	adds	r6, #8
 80067d0:	e7e5      	b.n	800679e <_dtoa_r+0x36e>
 80067d2:	f000 80a5 	beq.w	8006920 <_dtoa_r+0x4f0>
 80067d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067da:	f1c9 0400 	rsb	r4, r9, #0
 80067de:	4b7d      	ldr	r3, [pc, #500]	; (80069d4 <_dtoa_r+0x5a4>)
 80067e0:	f004 020f 	and.w	r2, r4, #15
 80067e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f7f9 fe74 	bl	80004d8 <__aeabi_dmul>
 80067f0:	2702      	movs	r7, #2
 80067f2:	2300      	movs	r3, #0
 80067f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f8:	4e77      	ldr	r6, [pc, #476]	; (80069d8 <_dtoa_r+0x5a8>)
 80067fa:	1124      	asrs	r4, r4, #4
 80067fc:	2c00      	cmp	r4, #0
 80067fe:	f040 8084 	bne.w	800690a <_dtoa_r+0x4da>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1d2      	bne.n	80067ac <_dtoa_r+0x37c>
 8006806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 808b 	beq.w	8006924 <_dtoa_r+0x4f4>
 800680e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006812:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006816:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800681a:	2200      	movs	r2, #0
 800681c:	4b6f      	ldr	r3, [pc, #444]	; (80069dc <_dtoa_r+0x5ac>)
 800681e:	f7fa f8cd 	bl	80009bc <__aeabi_dcmplt>
 8006822:	2800      	cmp	r0, #0
 8006824:	d07e      	beq.n	8006924 <_dtoa_r+0x4f4>
 8006826:	9b02      	ldr	r3, [sp, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d07b      	beq.n	8006924 <_dtoa_r+0x4f4>
 800682c:	f1bb 0f00 	cmp.w	fp, #0
 8006830:	dd38      	ble.n	80068a4 <_dtoa_r+0x474>
 8006832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006836:	2200      	movs	r2, #0
 8006838:	4b69      	ldr	r3, [pc, #420]	; (80069e0 <_dtoa_r+0x5b0>)
 800683a:	f7f9 fe4d 	bl	80004d8 <__aeabi_dmul>
 800683e:	465c      	mov	r4, fp
 8006840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006844:	f109 38ff 	add.w	r8, r9, #4294967295
 8006848:	3701      	adds	r7, #1
 800684a:	4638      	mov	r0, r7
 800684c:	f7f9 fdda 	bl	8000404 <__aeabi_i2d>
 8006850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006854:	f7f9 fe40 	bl	80004d8 <__aeabi_dmul>
 8006858:	2200      	movs	r2, #0
 800685a:	4b62      	ldr	r3, [pc, #392]	; (80069e4 <_dtoa_r+0x5b4>)
 800685c:	f7f9 fc86 	bl	800016c <__adddf3>
 8006860:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006864:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006868:	9611      	str	r6, [sp, #68]	; 0x44
 800686a:	2c00      	cmp	r4, #0
 800686c:	d15d      	bne.n	800692a <_dtoa_r+0x4fa>
 800686e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006872:	2200      	movs	r2, #0
 8006874:	4b5c      	ldr	r3, [pc, #368]	; (80069e8 <_dtoa_r+0x5b8>)
 8006876:	f7f9 fc77 	bl	8000168 <__aeabi_dsub>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006882:	4633      	mov	r3, r6
 8006884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006886:	f7fa f8b7 	bl	80009f8 <__aeabi_dcmpgt>
 800688a:	2800      	cmp	r0, #0
 800688c:	f040 829e 	bne.w	8006dcc <_dtoa_r+0x99c>
 8006890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006896:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800689a:	f7fa f88f 	bl	80009bc <__aeabi_dcmplt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	f040 8292 	bne.w	8006dc8 <_dtoa_r+0x998>
 80068a4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f2c0 8153 	blt.w	8006b5a <_dtoa_r+0x72a>
 80068b4:	f1b9 0f0e 	cmp.w	r9, #14
 80068b8:	f300 814f 	bgt.w	8006b5a <_dtoa_r+0x72a>
 80068bc:	4b45      	ldr	r3, [pc, #276]	; (80069d4 <_dtoa_r+0x5a4>)
 80068be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80068c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068c6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80068ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f280 80db 	bge.w	8006a88 <_dtoa_r+0x658>
 80068d2:	9b02      	ldr	r3, [sp, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f300 80d7 	bgt.w	8006a88 <_dtoa_r+0x658>
 80068da:	f040 8274 	bne.w	8006dc6 <_dtoa_r+0x996>
 80068de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e2:	2200      	movs	r2, #0
 80068e4:	4b40      	ldr	r3, [pc, #256]	; (80069e8 <_dtoa_r+0x5b8>)
 80068e6:	f7f9 fdf7 	bl	80004d8 <__aeabi_dmul>
 80068ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ee:	f7fa f879 	bl	80009e4 <__aeabi_dcmpge>
 80068f2:	9c02      	ldr	r4, [sp, #8]
 80068f4:	4626      	mov	r6, r4
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 824a 	bne.w	8006d90 <_dtoa_r+0x960>
 80068fc:	2331      	movs	r3, #49	; 0x31
 80068fe:	9f08      	ldr	r7, [sp, #32]
 8006900:	f109 0901 	add.w	r9, r9, #1
 8006904:	f807 3b01 	strb.w	r3, [r7], #1
 8006908:	e246      	b.n	8006d98 <_dtoa_r+0x968>
 800690a:	07e2      	lsls	r2, r4, #31
 800690c:	d505      	bpl.n	800691a <_dtoa_r+0x4ea>
 800690e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006912:	f7f9 fde1 	bl	80004d8 <__aeabi_dmul>
 8006916:	2301      	movs	r3, #1
 8006918:	3701      	adds	r7, #1
 800691a:	1064      	asrs	r4, r4, #1
 800691c:	3608      	adds	r6, #8
 800691e:	e76d      	b.n	80067fc <_dtoa_r+0x3cc>
 8006920:	2702      	movs	r7, #2
 8006922:	e770      	b.n	8006806 <_dtoa_r+0x3d6>
 8006924:	46c8      	mov	r8, r9
 8006926:	9c02      	ldr	r4, [sp, #8]
 8006928:	e78f      	b.n	800684a <_dtoa_r+0x41a>
 800692a:	9908      	ldr	r1, [sp, #32]
 800692c:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <_dtoa_r+0x5a4>)
 800692e:	4421      	add	r1, r4
 8006930:	9112      	str	r1, [sp, #72]	; 0x48
 8006932:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006934:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006938:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800693c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006940:	2900      	cmp	r1, #0
 8006942:	d055      	beq.n	80069f0 <_dtoa_r+0x5c0>
 8006944:	2000      	movs	r0, #0
 8006946:	4929      	ldr	r1, [pc, #164]	; (80069ec <_dtoa_r+0x5bc>)
 8006948:	f7f9 fef0 	bl	800072c <__aeabi_ddiv>
 800694c:	463b      	mov	r3, r7
 800694e:	4632      	mov	r2, r6
 8006950:	f7f9 fc0a 	bl	8000168 <__aeabi_dsub>
 8006954:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006958:	9f08      	ldr	r7, [sp, #32]
 800695a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800695e:	f7fa f86b 	bl	8000a38 <__aeabi_d2iz>
 8006962:	4604      	mov	r4, r0
 8006964:	f7f9 fd4e 	bl	8000404 <__aeabi_i2d>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006970:	f7f9 fbfa 	bl	8000168 <__aeabi_dsub>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	3430      	adds	r4, #48	; 0x30
 800697a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800697e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006982:	f807 4b01 	strb.w	r4, [r7], #1
 8006986:	f7fa f819 	bl	80009bc <__aeabi_dcmplt>
 800698a:	2800      	cmp	r0, #0
 800698c:	d174      	bne.n	8006a78 <_dtoa_r+0x648>
 800698e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006992:	2000      	movs	r0, #0
 8006994:	4911      	ldr	r1, [pc, #68]	; (80069dc <_dtoa_r+0x5ac>)
 8006996:	f7f9 fbe7 	bl	8000168 <__aeabi_dsub>
 800699a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800699e:	f7fa f80d 	bl	80009bc <__aeabi_dcmplt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f040 80b6 	bne.w	8006b14 <_dtoa_r+0x6e4>
 80069a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069aa:	429f      	cmp	r7, r3
 80069ac:	f43f af7a 	beq.w	80068a4 <_dtoa_r+0x474>
 80069b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069b4:	2200      	movs	r2, #0
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <_dtoa_r+0x5b0>)
 80069b8:	f7f9 fd8e 	bl	80004d8 <__aeabi_dmul>
 80069bc:	2200      	movs	r2, #0
 80069be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c6:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <_dtoa_r+0x5b0>)
 80069c8:	f7f9 fd86 	bl	80004d8 <__aeabi_dmul>
 80069cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d0:	e7c3      	b.n	800695a <_dtoa_r+0x52a>
 80069d2:	bf00      	nop
 80069d4:	08008f00 	.word	0x08008f00
 80069d8:	08008ed8 	.word	0x08008ed8
 80069dc:	3ff00000 	.word	0x3ff00000
 80069e0:	40240000 	.word	0x40240000
 80069e4:	401c0000 	.word	0x401c0000
 80069e8:	40140000 	.word	0x40140000
 80069ec:	3fe00000 	.word	0x3fe00000
 80069f0:	4630      	mov	r0, r6
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069fe:	9c08      	ldr	r4, [sp, #32]
 8006a00:	9314      	str	r3, [sp, #80]	; 0x50
 8006a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a06:	f7fa f817 	bl	8000a38 <__aeabi_d2iz>
 8006a0a:	9015      	str	r0, [sp, #84]	; 0x54
 8006a0c:	f7f9 fcfa 	bl	8000404 <__aeabi_i2d>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a18:	f7f9 fba6 	bl	8000168 <__aeabi_dsub>
 8006a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a1e:	4606      	mov	r6, r0
 8006a20:	3330      	adds	r3, #48	; 0x30
 8006a22:	f804 3b01 	strb.w	r3, [r4], #1
 8006a26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a28:	460f      	mov	r7, r1
 8006a2a:	429c      	cmp	r4, r3
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	d124      	bne.n	8006a7c <_dtoa_r+0x64c>
 8006a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a36:	4bb3      	ldr	r3, [pc, #716]	; (8006d04 <_dtoa_r+0x8d4>)
 8006a38:	f7f9 fb98 	bl	800016c <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7f9 ffd8 	bl	80009f8 <__aeabi_dcmpgt>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d162      	bne.n	8006b12 <_dtoa_r+0x6e2>
 8006a4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a50:	2000      	movs	r0, #0
 8006a52:	49ac      	ldr	r1, [pc, #688]	; (8006d04 <_dtoa_r+0x8d4>)
 8006a54:	f7f9 fb88 	bl	8000168 <__aeabi_dsub>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	4639      	mov	r1, r7
 8006a60:	f7f9 ffac 	bl	80009bc <__aeabi_dcmplt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f43f af1d 	beq.w	80068a4 <_dtoa_r+0x474>
 8006a6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006a6c:	1e7b      	subs	r3, r7, #1
 8006a6e:	9314      	str	r3, [sp, #80]	; 0x50
 8006a70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d0f8      	beq.n	8006a6a <_dtoa_r+0x63a>
 8006a78:	46c1      	mov	r9, r8
 8006a7a:	e03a      	b.n	8006af2 <_dtoa_r+0x6c2>
 8006a7c:	4ba2      	ldr	r3, [pc, #648]	; (8006d08 <_dtoa_r+0x8d8>)
 8006a7e:	f7f9 fd2b 	bl	80004d8 <__aeabi_dmul>
 8006a82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a86:	e7bc      	b.n	8006a02 <_dtoa_r+0x5d2>
 8006a88:	9f08      	ldr	r7, [sp, #32]
 8006a8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a92:	f7f9 fe4b 	bl	800072c <__aeabi_ddiv>
 8006a96:	f7f9 ffcf 	bl	8000a38 <__aeabi_d2iz>
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	f7f9 fcb2 	bl	8000404 <__aeabi_i2d>
 8006aa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aa4:	f7f9 fd18 	bl	80004d8 <__aeabi_dmul>
 8006aa8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006aac:	460b      	mov	r3, r1
 8006aae:	4602      	mov	r2, r0
 8006ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab4:	f7f9 fb58 	bl	8000168 <__aeabi_dsub>
 8006ab8:	f807 6b01 	strb.w	r6, [r7], #1
 8006abc:	9e08      	ldr	r6, [sp, #32]
 8006abe:	9b02      	ldr	r3, [sp, #8]
 8006ac0:	1bbe      	subs	r6, r7, r6
 8006ac2:	42b3      	cmp	r3, r6
 8006ac4:	d13a      	bne.n	8006b3c <_dtoa_r+0x70c>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	f7f9 fb4f 	bl	800016c <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ada:	f7f9 ff8d 	bl	80009f8 <__aeabi_dcmpgt>
 8006ade:	bb58      	cbnz	r0, 8006b38 <_dtoa_r+0x708>
 8006ae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae8:	f7f9 ff5e 	bl	80009a8 <__aeabi_dcmpeq>
 8006aec:	b108      	cbz	r0, 8006af2 <_dtoa_r+0x6c2>
 8006aee:	07e1      	lsls	r1, r4, #31
 8006af0:	d422      	bmi.n	8006b38 <_dtoa_r+0x708>
 8006af2:	4628      	mov	r0, r5
 8006af4:	4651      	mov	r1, sl
 8006af6:	f000 faf1 	bl	80070dc <_Bfree>
 8006afa:	2300      	movs	r3, #0
 8006afc:	703b      	strb	r3, [r7, #0]
 8006afe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b00:	f109 0001 	add.w	r0, r9, #1
 8006b04:	6018      	str	r0, [r3, #0]
 8006b06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f43f acdf 	beq.w	80064cc <_dtoa_r+0x9c>
 8006b0e:	601f      	str	r7, [r3, #0]
 8006b10:	e4dc      	b.n	80064cc <_dtoa_r+0x9c>
 8006b12:	4627      	mov	r7, r4
 8006b14:	463b      	mov	r3, r7
 8006b16:	461f      	mov	r7, r3
 8006b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1c:	2a39      	cmp	r2, #57	; 0x39
 8006b1e:	d107      	bne.n	8006b30 <_dtoa_r+0x700>
 8006b20:	9a08      	ldr	r2, [sp, #32]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d1f7      	bne.n	8006b16 <_dtoa_r+0x6e6>
 8006b26:	2230      	movs	r2, #48	; 0x30
 8006b28:	9908      	ldr	r1, [sp, #32]
 8006b2a:	f108 0801 	add.w	r8, r8, #1
 8006b2e:	700a      	strb	r2, [r1, #0]
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	3201      	adds	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e79f      	b.n	8006a78 <_dtoa_r+0x648>
 8006b38:	46c8      	mov	r8, r9
 8006b3a:	e7eb      	b.n	8006b14 <_dtoa_r+0x6e4>
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4b72      	ldr	r3, [pc, #456]	; (8006d08 <_dtoa_r+0x8d8>)
 8006b40:	f7f9 fcca 	bl	80004d8 <__aeabi_dmul>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f7f9 ff2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d098      	beq.n	8006a8a <_dtoa_r+0x65a>
 8006b58:	e7cb      	b.n	8006af2 <_dtoa_r+0x6c2>
 8006b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	f000 80cd 	beq.w	8006cfc <_dtoa_r+0x8cc>
 8006b62:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b64:	2a01      	cmp	r2, #1
 8006b66:	f300 80af 	bgt.w	8006cc8 <_dtoa_r+0x898>
 8006b6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b6c:	2a00      	cmp	r2, #0
 8006b6e:	f000 80a7 	beq.w	8006cc0 <_dtoa_r+0x890>
 8006b72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b78:	9f06      	ldr	r7, [sp, #24]
 8006b7a:	9a06      	ldr	r2, [sp, #24]
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	441a      	add	r2, r3
 8006b80:	9206      	str	r2, [sp, #24]
 8006b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b84:	4628      	mov	r0, r5
 8006b86:	441a      	add	r2, r3
 8006b88:	9209      	str	r2, [sp, #36]	; 0x24
 8006b8a:	f000 fb61 	bl	8007250 <__i2b>
 8006b8e:	4606      	mov	r6, r0
 8006b90:	2f00      	cmp	r7, #0
 8006b92:	dd0c      	ble.n	8006bae <_dtoa_r+0x77e>
 8006b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd09      	ble.n	8006bae <_dtoa_r+0x77e>
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	bfa8      	it	ge
 8006b9e:	463b      	movge	r3, r7
 8006ba0:	9a06      	ldr	r2, [sp, #24]
 8006ba2:	1aff      	subs	r7, r7, r3
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	9206      	str	r2, [sp, #24]
 8006ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb0:	b1f3      	cbz	r3, 8006bf0 <_dtoa_r+0x7c0>
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 80a9 	beq.w	8006d0c <_dtoa_r+0x8dc>
 8006bba:	2c00      	cmp	r4, #0
 8006bbc:	dd10      	ble.n	8006be0 <_dtoa_r+0x7b0>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f000 fbfe 	bl	80073c4 <__pow5mult>
 8006bc8:	4652      	mov	r2, sl
 8006bca:	4601      	mov	r1, r0
 8006bcc:	4606      	mov	r6, r0
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 fb54 	bl	800727c <__multiply>
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f000 fa7f 	bl	80070dc <_Bfree>
 8006bde:	46c2      	mov	sl, r8
 8006be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be2:	1b1a      	subs	r2, r3, r4
 8006be4:	d004      	beq.n	8006bf0 <_dtoa_r+0x7c0>
 8006be6:	4651      	mov	r1, sl
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 fbeb 	bl	80073c4 <__pow5mult>
 8006bee:	4682      	mov	sl, r0
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f000 fb2c 	bl	8007250 <__i2b>
 8006bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f340 8087 	ble.w	8006d10 <_dtoa_r+0x8e0>
 8006c02:	461a      	mov	r2, r3
 8006c04:	4601      	mov	r1, r0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 fbdc 	bl	80073c4 <__pow5mult>
 8006c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c0e:	4604      	mov	r4, r0
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	f340 8080 	ble.w	8006d16 <_dtoa_r+0x8e6>
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c20:	6918      	ldr	r0, [r3, #16]
 8006c22:	f000 fac7 	bl	80071b4 <__hi0bits>
 8006c26:	f1c0 0020 	rsb	r0, r0, #32
 8006c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2c:	4418      	add	r0, r3
 8006c2e:	f010 001f 	ands.w	r0, r0, #31
 8006c32:	f000 8092 	beq.w	8006d5a <_dtoa_r+0x92a>
 8006c36:	f1c0 0320 	rsb	r3, r0, #32
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	f340 808a 	ble.w	8006d54 <_dtoa_r+0x924>
 8006c40:	f1c0 001c 	rsb	r0, r0, #28
 8006c44:	9b06      	ldr	r3, [sp, #24]
 8006c46:	4407      	add	r7, r0
 8006c48:	4403      	add	r3, r0
 8006c4a:	9306      	str	r3, [sp, #24]
 8006c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4e:	4403      	add	r3, r0
 8006c50:	9309      	str	r3, [sp, #36]	; 0x24
 8006c52:	9b06      	ldr	r3, [sp, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dd05      	ble.n	8006c64 <_dtoa_r+0x834>
 8006c58:	4651      	mov	r1, sl
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 fc0b 	bl	8007478 <__lshift>
 8006c62:	4682      	mov	sl, r0
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	dd05      	ble.n	8006c76 <_dtoa_r+0x846>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fc02 	bl	8007478 <__lshift>
 8006c74:	4604      	mov	r4, r0
 8006c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d070      	beq.n	8006d5e <_dtoa_r+0x92e>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4650      	mov	r0, sl
 8006c80:	f000 fc66 	bl	8007550 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	da6a      	bge.n	8006d5e <_dtoa_r+0x92e>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fa46 	bl	8007120 <__multadd>
 8006c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c96:	4682      	mov	sl, r0
 8006c98:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8193 	beq.w	8006fc8 <_dtoa_r+0xb98>
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	220a      	movs	r2, #10
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 fa39 	bl	8007120 <__multadd>
 8006cae:	f1bb 0f00 	cmp.w	fp, #0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	f300 8093 	bgt.w	8006dde <_dtoa_r+0x9ae>
 8006cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	dc57      	bgt.n	8006d6e <_dtoa_r+0x93e>
 8006cbe:	e08e      	b.n	8006dde <_dtoa_r+0x9ae>
 8006cc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cc6:	e756      	b.n	8006b76 <_dtoa_r+0x746>
 8006cc8:	9b02      	ldr	r3, [sp, #8]
 8006cca:	1e5c      	subs	r4, r3, #1
 8006ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cce:	42a3      	cmp	r3, r4
 8006cd0:	bfb7      	itett	lt
 8006cd2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cd4:	1b1c      	subge	r4, r3, r4
 8006cd6:	1ae2      	sublt	r2, r4, r3
 8006cd8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006cda:	bfbe      	ittt	lt
 8006cdc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006cde:	189b      	addlt	r3, r3, r2
 8006ce0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ce2:	9b02      	ldr	r3, [sp, #8]
 8006ce4:	bfb8      	it	lt
 8006ce6:	2400      	movlt	r4, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bfbb      	ittet	lt
 8006cec:	9b06      	ldrlt	r3, [sp, #24]
 8006cee:	9a02      	ldrlt	r2, [sp, #8]
 8006cf0:	9f06      	ldrge	r7, [sp, #24]
 8006cf2:	1a9f      	sublt	r7, r3, r2
 8006cf4:	bfac      	ite	ge
 8006cf6:	9b02      	ldrge	r3, [sp, #8]
 8006cf8:	2300      	movlt	r3, #0
 8006cfa:	e73e      	b.n	8006b7a <_dtoa_r+0x74a>
 8006cfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cfe:	9f06      	ldr	r7, [sp, #24]
 8006d00:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d02:	e745      	b.n	8006b90 <_dtoa_r+0x760>
 8006d04:	3fe00000 	.word	0x3fe00000
 8006d08:	40240000 	.word	0x40240000
 8006d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d0e:	e76a      	b.n	8006be6 <_dtoa_r+0x7b6>
 8006d10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	dc19      	bgt.n	8006d4a <_dtoa_r+0x91a>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	b9bb      	cbnz	r3, 8006d4a <_dtoa_r+0x91a>
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d20:	b99b      	cbnz	r3, 8006d4a <_dtoa_r+0x91a>
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	0d1b      	lsrs	r3, r3, #20
 8006d2a:	051b      	lsls	r3, r3, #20
 8006d2c:	b183      	cbz	r3, 8006d50 <_dtoa_r+0x920>
 8006d2e:	f04f 0801 	mov.w	r8, #1
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	3301      	adds	r3, #1
 8006d36:	9306      	str	r3, [sp, #24]
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f af6a 	bne.w	8006c1a <_dtoa_r+0x7ea>
 8006d46:	2001      	movs	r0, #1
 8006d48:	e76f      	b.n	8006c2a <_dtoa_r+0x7fa>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	e7f6      	b.n	8006d3e <_dtoa_r+0x90e>
 8006d50:	4698      	mov	r8, r3
 8006d52:	e7f4      	b.n	8006d3e <_dtoa_r+0x90e>
 8006d54:	f43f af7d 	beq.w	8006c52 <_dtoa_r+0x822>
 8006d58:	4618      	mov	r0, r3
 8006d5a:	301c      	adds	r0, #28
 8006d5c:	e772      	b.n	8006c44 <_dtoa_r+0x814>
 8006d5e:	9b02      	ldr	r3, [sp, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc36      	bgt.n	8006dd2 <_dtoa_r+0x9a2>
 8006d64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	dd33      	ble.n	8006dd2 <_dtoa_r+0x9a2>
 8006d6a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006d6e:	f1bb 0f00 	cmp.w	fp, #0
 8006d72:	d10d      	bne.n	8006d90 <_dtoa_r+0x960>
 8006d74:	4621      	mov	r1, r4
 8006d76:	465b      	mov	r3, fp
 8006d78:	2205      	movs	r2, #5
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 f9d0 	bl	8007120 <__multadd>
 8006d80:	4601      	mov	r1, r0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4650      	mov	r0, sl
 8006d86:	f000 fbe3 	bl	8007550 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f73f adb6 	bgt.w	80068fc <_dtoa_r+0x4cc>
 8006d90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d92:	9f08      	ldr	r7, [sp, #32]
 8006d94:	ea6f 0903 	mvn.w	r9, r3
 8006d98:	f04f 0800 	mov.w	r8, #0
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 f99c 	bl	80070dc <_Bfree>
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	f43f aea4 	beq.w	8006af2 <_dtoa_r+0x6c2>
 8006daa:	f1b8 0f00 	cmp.w	r8, #0
 8006dae:	d005      	beq.n	8006dbc <_dtoa_r+0x98c>
 8006db0:	45b0      	cmp	r8, r6
 8006db2:	d003      	beq.n	8006dbc <_dtoa_r+0x98c>
 8006db4:	4641      	mov	r1, r8
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 f990 	bl	80070dc <_Bfree>
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f98c 	bl	80070dc <_Bfree>
 8006dc4:	e695      	b.n	8006af2 <_dtoa_r+0x6c2>
 8006dc6:	2400      	movs	r4, #0
 8006dc8:	4626      	mov	r6, r4
 8006dca:	e7e1      	b.n	8006d90 <_dtoa_r+0x960>
 8006dcc:	46c1      	mov	r9, r8
 8006dce:	4626      	mov	r6, r4
 8006dd0:	e594      	b.n	80068fc <_dtoa_r+0x4cc>
 8006dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80fc 	beq.w	8006fd6 <_dtoa_r+0xba6>
 8006dde:	2f00      	cmp	r7, #0
 8006de0:	dd05      	ble.n	8006dee <_dtoa_r+0x9be>
 8006de2:	4631      	mov	r1, r6
 8006de4:	463a      	mov	r2, r7
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fb46 	bl	8007478 <__lshift>
 8006dec:	4606      	mov	r6, r0
 8006dee:	f1b8 0f00 	cmp.w	r8, #0
 8006df2:	d05c      	beq.n	8006eae <_dtoa_r+0xa7e>
 8006df4:	4628      	mov	r0, r5
 8006df6:	6871      	ldr	r1, [r6, #4]
 8006df8:	f000 f930 	bl	800705c <_Balloc>
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	b928      	cbnz	r0, 8006e0c <_dtoa_r+0x9dc>
 8006e00:	4602      	mov	r2, r0
 8006e02:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e06:	4b7e      	ldr	r3, [pc, #504]	; (8007000 <_dtoa_r+0xbd0>)
 8006e08:	f7ff bb26 	b.w	8006458 <_dtoa_r+0x28>
 8006e0c:	6932      	ldr	r2, [r6, #16]
 8006e0e:	f106 010c 	add.w	r1, r6, #12
 8006e12:	3202      	adds	r2, #2
 8006e14:	0092      	lsls	r2, r2, #2
 8006e16:	300c      	adds	r0, #12
 8006e18:	f000 f912 	bl	8007040 <memcpy>
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4639      	mov	r1, r7
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 fb29 	bl	8007478 <__lshift>
 8006e26:	46b0      	mov	r8, r6
 8006e28:	4606      	mov	r6, r0
 8006e2a:	9b08      	ldr	r3, [sp, #32]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	9302      	str	r3, [sp, #8]
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	445b      	add	r3, fp
 8006e34:	930a      	str	r3, [sp, #40]	; 0x28
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	4621      	mov	r1, r4
 8006e42:	4650      	mov	r0, sl
 8006e44:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e48:	f7ff fa64 	bl	8006314 <quorem>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4641      	mov	r1, r8
 8006e50:	3330      	adds	r3, #48	; 0x30
 8006e52:	9004      	str	r0, [sp, #16]
 8006e54:	4650      	mov	r0, sl
 8006e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e58:	f000 fb7a 	bl	8007550 <__mcmp>
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	9006      	str	r0, [sp, #24]
 8006e60:	4621      	mov	r1, r4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f000 fb90 	bl	8007588 <__mdiff>
 8006e68:	68c2      	ldr	r2, [r0, #12]
 8006e6a:	4607      	mov	r7, r0
 8006e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6e:	bb02      	cbnz	r2, 8006eb2 <_dtoa_r+0xa82>
 8006e70:	4601      	mov	r1, r0
 8006e72:	4650      	mov	r0, sl
 8006e74:	f000 fb6c 	bl	8007550 <__mcmp>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	4628      	mov	r0, r5
 8006e80:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006e84:	f000 f92a 	bl	80070dc <_Bfree>
 8006e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e8c:	9f02      	ldr	r7, [sp, #8]
 8006e8e:	ea43 0102 	orr.w	r1, r3, r2
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	430b      	orrs	r3, r1
 8006e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e98:	d10d      	bne.n	8006eb6 <_dtoa_r+0xa86>
 8006e9a:	2b39      	cmp	r3, #57	; 0x39
 8006e9c:	d027      	beq.n	8006eee <_dtoa_r+0xabe>
 8006e9e:	9a06      	ldr	r2, [sp, #24]
 8006ea0:	2a00      	cmp	r2, #0
 8006ea2:	dd01      	ble.n	8006ea8 <_dtoa_r+0xa78>
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	3331      	adds	r3, #49	; 0x31
 8006ea8:	f88b 3000 	strb.w	r3, [fp]
 8006eac:	e776      	b.n	8006d9c <_dtoa_r+0x96c>
 8006eae:	4630      	mov	r0, r6
 8006eb0:	e7b9      	b.n	8006e26 <_dtoa_r+0x9f6>
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	e7e2      	b.n	8006e7c <_dtoa_r+0xa4c>
 8006eb6:	9906      	ldr	r1, [sp, #24]
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	db04      	blt.n	8006ec6 <_dtoa_r+0xa96>
 8006ebc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006ebe:	4301      	orrs	r1, r0
 8006ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec2:	4301      	orrs	r1, r0
 8006ec4:	d120      	bne.n	8006f08 <_dtoa_r+0xad8>
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	ddee      	ble.n	8006ea8 <_dtoa_r+0xa78>
 8006eca:	4651      	mov	r1, sl
 8006ecc:	2201      	movs	r2, #1
 8006ece:	4628      	mov	r0, r5
 8006ed0:	9302      	str	r3, [sp, #8]
 8006ed2:	f000 fad1 	bl	8007478 <__lshift>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4682      	mov	sl, r0
 8006eda:	f000 fb39 	bl	8007550 <__mcmp>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	9b02      	ldr	r3, [sp, #8]
 8006ee2:	dc02      	bgt.n	8006eea <_dtoa_r+0xaba>
 8006ee4:	d1e0      	bne.n	8006ea8 <_dtoa_r+0xa78>
 8006ee6:	07da      	lsls	r2, r3, #31
 8006ee8:	d5de      	bpl.n	8006ea8 <_dtoa_r+0xa78>
 8006eea:	2b39      	cmp	r3, #57	; 0x39
 8006eec:	d1da      	bne.n	8006ea4 <_dtoa_r+0xa74>
 8006eee:	2339      	movs	r3, #57	; 0x39
 8006ef0:	f88b 3000 	strb.w	r3, [fp]
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	2a39      	cmp	r2, #57	; 0x39
 8006f00:	d050      	beq.n	8006fa4 <_dtoa_r+0xb74>
 8006f02:	3201      	adds	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	e749      	b.n	8006d9c <_dtoa_r+0x96c>
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	dd03      	ble.n	8006f14 <_dtoa_r+0xae4>
 8006f0c:	2b39      	cmp	r3, #57	; 0x39
 8006f0e:	d0ee      	beq.n	8006eee <_dtoa_r+0xabe>
 8006f10:	3301      	adds	r3, #1
 8006f12:	e7c9      	b.n	8006ea8 <_dtoa_r+0xa78>
 8006f14:	9a02      	ldr	r2, [sp, #8]
 8006f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f18:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	d02a      	beq.n	8006f76 <_dtoa_r+0xb46>
 8006f20:	4651      	mov	r1, sl
 8006f22:	2300      	movs	r3, #0
 8006f24:	220a      	movs	r2, #10
 8006f26:	4628      	mov	r0, r5
 8006f28:	f000 f8fa 	bl	8007120 <__multadd>
 8006f2c:	45b0      	cmp	r8, r6
 8006f2e:	4682      	mov	sl, r0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	f04f 020a 	mov.w	r2, #10
 8006f38:	4641      	mov	r1, r8
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	d107      	bne.n	8006f4e <_dtoa_r+0xb1e>
 8006f3e:	f000 f8ef 	bl	8007120 <__multadd>
 8006f42:	4680      	mov	r8, r0
 8006f44:	4606      	mov	r6, r0
 8006f46:	9b02      	ldr	r3, [sp, #8]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	9302      	str	r3, [sp, #8]
 8006f4c:	e777      	b.n	8006e3e <_dtoa_r+0xa0e>
 8006f4e:	f000 f8e7 	bl	8007120 <__multadd>
 8006f52:	4631      	mov	r1, r6
 8006f54:	4680      	mov	r8, r0
 8006f56:	2300      	movs	r3, #0
 8006f58:	220a      	movs	r2, #10
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 f8e0 	bl	8007120 <__multadd>
 8006f60:	4606      	mov	r6, r0
 8006f62:	e7f0      	b.n	8006f46 <_dtoa_r+0xb16>
 8006f64:	f1bb 0f00 	cmp.w	fp, #0
 8006f68:	bfcc      	ite	gt
 8006f6a:	465f      	movgt	r7, fp
 8006f6c:	2701      	movle	r7, #1
 8006f6e:	f04f 0800 	mov.w	r8, #0
 8006f72:	9a08      	ldr	r2, [sp, #32]
 8006f74:	4417      	add	r7, r2
 8006f76:	4651      	mov	r1, sl
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	9302      	str	r3, [sp, #8]
 8006f7e:	f000 fa7b 	bl	8007478 <__lshift>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4682      	mov	sl, r0
 8006f86:	f000 fae3 	bl	8007550 <__mcmp>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	dcb2      	bgt.n	8006ef4 <_dtoa_r+0xac4>
 8006f8e:	d102      	bne.n	8006f96 <_dtoa_r+0xb66>
 8006f90:	9b02      	ldr	r3, [sp, #8]
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d4ae      	bmi.n	8006ef4 <_dtoa_r+0xac4>
 8006f96:	463b      	mov	r3, r7
 8006f98:	461f      	mov	r7, r3
 8006f9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f9e:	2a30      	cmp	r2, #48	; 0x30
 8006fa0:	d0fa      	beq.n	8006f98 <_dtoa_r+0xb68>
 8006fa2:	e6fb      	b.n	8006d9c <_dtoa_r+0x96c>
 8006fa4:	9a08      	ldr	r2, [sp, #32]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d1a5      	bne.n	8006ef6 <_dtoa_r+0xac6>
 8006faa:	2331      	movs	r3, #49	; 0x31
 8006fac:	f109 0901 	add.w	r9, r9, #1
 8006fb0:	7013      	strb	r3, [r2, #0]
 8006fb2:	e6f3      	b.n	8006d9c <_dtoa_r+0x96c>
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <_dtoa_r+0xbd4>)
 8006fb6:	f7ff baa7 	b.w	8006508 <_dtoa_r+0xd8>
 8006fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f47f aa80 	bne.w	80064c2 <_dtoa_r+0x92>
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <_dtoa_r+0xbd8>)
 8006fc4:	f7ff baa0 	b.w	8006508 <_dtoa_r+0xd8>
 8006fc8:	f1bb 0f00 	cmp.w	fp, #0
 8006fcc:	dc03      	bgt.n	8006fd6 <_dtoa_r+0xba6>
 8006fce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	f73f aecc 	bgt.w	8006d6e <_dtoa_r+0x93e>
 8006fd6:	9f08      	ldr	r7, [sp, #32]
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4650      	mov	r0, sl
 8006fdc:	f7ff f99a 	bl	8006314 <quorem>
 8006fe0:	9a08      	ldr	r2, [sp, #32]
 8006fe2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006fe6:	f807 3b01 	strb.w	r3, [r7], #1
 8006fea:	1aba      	subs	r2, r7, r2
 8006fec:	4593      	cmp	fp, r2
 8006fee:	ddb9      	ble.n	8006f64 <_dtoa_r+0xb34>
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f892 	bl	8007120 <__multadd>
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	e7eb      	b.n	8006fd8 <_dtoa_r+0xba8>
 8007000:	08008e63 	.word	0x08008e63
 8007004:	08008dbc 	.word	0x08008dbc
 8007008:	08008de0 	.word	0x08008de0

0800700c <_localeconv_r>:
 800700c:	4800      	ldr	r0, [pc, #0]	; (8007010 <_localeconv_r+0x4>)
 800700e:	4770      	bx	lr
 8007010:	2000016c 	.word	0x2000016c

08007014 <malloc>:
 8007014:	4b02      	ldr	r3, [pc, #8]	; (8007020 <malloc+0xc>)
 8007016:	4601      	mov	r1, r0
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	f000 bbfb 	b.w	8007814 <_malloc_r>
 800701e:	bf00      	nop
 8007020:	20000018 	.word	0x20000018

08007024 <memchr>:
 8007024:	4603      	mov	r3, r0
 8007026:	b510      	push	{r4, lr}
 8007028:	b2c9      	uxtb	r1, r1
 800702a:	4402      	add	r2, r0
 800702c:	4293      	cmp	r3, r2
 800702e:	4618      	mov	r0, r3
 8007030:	d101      	bne.n	8007036 <memchr+0x12>
 8007032:	2000      	movs	r0, #0
 8007034:	e003      	b.n	800703e <memchr+0x1a>
 8007036:	7804      	ldrb	r4, [r0, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	428c      	cmp	r4, r1
 800703c:	d1f6      	bne.n	800702c <memchr+0x8>
 800703e:	bd10      	pop	{r4, pc}

08007040 <memcpy>:
 8007040:	440a      	add	r2, r1
 8007042:	4291      	cmp	r1, r2
 8007044:	f100 33ff 	add.w	r3, r0, #4294967295
 8007048:	d100      	bne.n	800704c <memcpy+0xc>
 800704a:	4770      	bx	lr
 800704c:	b510      	push	{r4, lr}
 800704e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007052:	4291      	cmp	r1, r2
 8007054:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007058:	d1f9      	bne.n	800704e <memcpy+0xe>
 800705a:	bd10      	pop	{r4, pc}

0800705c <_Balloc>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007060:	4604      	mov	r4, r0
 8007062:	460d      	mov	r5, r1
 8007064:	b976      	cbnz	r6, 8007084 <_Balloc+0x28>
 8007066:	2010      	movs	r0, #16
 8007068:	f7ff ffd4 	bl	8007014 <malloc>
 800706c:	4602      	mov	r2, r0
 800706e:	6260      	str	r0, [r4, #36]	; 0x24
 8007070:	b920      	cbnz	r0, 800707c <_Balloc+0x20>
 8007072:	2166      	movs	r1, #102	; 0x66
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <_Balloc+0x78>)
 8007076:	4818      	ldr	r0, [pc, #96]	; (80070d8 <_Balloc+0x7c>)
 8007078:	f000 fd92 	bl	8007ba0 <__assert_func>
 800707c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007080:	6006      	str	r6, [r0, #0]
 8007082:	60c6      	str	r6, [r0, #12]
 8007084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007086:	68f3      	ldr	r3, [r6, #12]
 8007088:	b183      	cbz	r3, 80070ac <_Balloc+0x50>
 800708a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007092:	b9b8      	cbnz	r0, 80070c4 <_Balloc+0x68>
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f605 	lsl.w	r6, r1, r5
 800709a:	1d72      	adds	r2, r6, #5
 800709c:	4620      	mov	r0, r4
 800709e:	0092      	lsls	r2, r2, #2
 80070a0:	f000 fb5e 	bl	8007760 <_calloc_r>
 80070a4:	b160      	cbz	r0, 80070c0 <_Balloc+0x64>
 80070a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070aa:	e00e      	b.n	80070ca <_Balloc+0x6e>
 80070ac:	2221      	movs	r2, #33	; 0x21
 80070ae:	2104      	movs	r1, #4
 80070b0:	4620      	mov	r0, r4
 80070b2:	f000 fb55 	bl	8007760 <_calloc_r>
 80070b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b8:	60f0      	str	r0, [r6, #12]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e4      	bne.n	800708a <_Balloc+0x2e>
 80070c0:	2000      	movs	r0, #0
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	6802      	ldr	r2, [r0, #0]
 80070c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070ca:	2300      	movs	r3, #0
 80070cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070d0:	e7f7      	b.n	80070c2 <_Balloc+0x66>
 80070d2:	bf00      	nop
 80070d4:	08008ded 	.word	0x08008ded
 80070d8:	08008e74 	.word	0x08008e74

080070dc <_Bfree>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070e0:	4605      	mov	r5, r0
 80070e2:	460c      	mov	r4, r1
 80070e4:	b976      	cbnz	r6, 8007104 <_Bfree+0x28>
 80070e6:	2010      	movs	r0, #16
 80070e8:	f7ff ff94 	bl	8007014 <malloc>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6268      	str	r0, [r5, #36]	; 0x24
 80070f0:	b920      	cbnz	r0, 80070fc <_Bfree+0x20>
 80070f2:	218a      	movs	r1, #138	; 0x8a
 80070f4:	4b08      	ldr	r3, [pc, #32]	; (8007118 <_Bfree+0x3c>)
 80070f6:	4809      	ldr	r0, [pc, #36]	; (800711c <_Bfree+0x40>)
 80070f8:	f000 fd52 	bl	8007ba0 <__assert_func>
 80070fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007100:	6006      	str	r6, [r0, #0]
 8007102:	60c6      	str	r6, [r0, #12]
 8007104:	b13c      	cbz	r4, 8007116 <_Bfree+0x3a>
 8007106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007108:	6862      	ldr	r2, [r4, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007110:	6021      	str	r1, [r4, #0]
 8007112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	08008ded 	.word	0x08008ded
 800711c:	08008e74 	.word	0x08008e74

08007120 <__multadd>:
 8007120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007124:	4698      	mov	r8, r3
 8007126:	460c      	mov	r4, r1
 8007128:	2300      	movs	r3, #0
 800712a:	690e      	ldr	r6, [r1, #16]
 800712c:	4607      	mov	r7, r0
 800712e:	f101 0014 	add.w	r0, r1, #20
 8007132:	6805      	ldr	r5, [r0, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	b2a9      	uxth	r1, r5
 8007138:	fb02 8101 	mla	r1, r2, r1, r8
 800713c:	0c2d      	lsrs	r5, r5, #16
 800713e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007142:	fb02 c505 	mla	r5, r2, r5, ip
 8007146:	b289      	uxth	r1, r1
 8007148:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800714c:	429e      	cmp	r6, r3
 800714e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007152:	f840 1b04 	str.w	r1, [r0], #4
 8007156:	dcec      	bgt.n	8007132 <__multadd+0x12>
 8007158:	f1b8 0f00 	cmp.w	r8, #0
 800715c:	d022      	beq.n	80071a4 <__multadd+0x84>
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	42b3      	cmp	r3, r6
 8007162:	dc19      	bgt.n	8007198 <__multadd+0x78>
 8007164:	6861      	ldr	r1, [r4, #4]
 8007166:	4638      	mov	r0, r7
 8007168:	3101      	adds	r1, #1
 800716a:	f7ff ff77 	bl	800705c <_Balloc>
 800716e:	4605      	mov	r5, r0
 8007170:	b928      	cbnz	r0, 800717e <__multadd+0x5e>
 8007172:	4602      	mov	r2, r0
 8007174:	21b5      	movs	r1, #181	; 0xb5
 8007176:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <__multadd+0x8c>)
 8007178:	480d      	ldr	r0, [pc, #52]	; (80071b0 <__multadd+0x90>)
 800717a:	f000 fd11 	bl	8007ba0 <__assert_func>
 800717e:	6922      	ldr	r2, [r4, #16]
 8007180:	f104 010c 	add.w	r1, r4, #12
 8007184:	3202      	adds	r2, #2
 8007186:	0092      	lsls	r2, r2, #2
 8007188:	300c      	adds	r0, #12
 800718a:	f7ff ff59 	bl	8007040 <memcpy>
 800718e:	4621      	mov	r1, r4
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff ffa3 	bl	80070dc <_Bfree>
 8007196:	462c      	mov	r4, r5
 8007198:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800719c:	3601      	adds	r6, #1
 800719e:	f8c3 8014 	str.w	r8, [r3, #20]
 80071a2:	6126      	str	r6, [r4, #16]
 80071a4:	4620      	mov	r0, r4
 80071a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071aa:	bf00      	nop
 80071ac:	08008e63 	.word	0x08008e63
 80071b0:	08008e74 	.word	0x08008e74

080071b4 <__hi0bits>:
 80071b4:	0c02      	lsrs	r2, r0, #16
 80071b6:	0412      	lsls	r2, r2, #16
 80071b8:	4603      	mov	r3, r0
 80071ba:	b9ca      	cbnz	r2, 80071f0 <__hi0bits+0x3c>
 80071bc:	0403      	lsls	r3, r0, #16
 80071be:	2010      	movs	r0, #16
 80071c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071c4:	bf04      	itt	eq
 80071c6:	021b      	lsleq	r3, r3, #8
 80071c8:	3008      	addeq	r0, #8
 80071ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071ce:	bf04      	itt	eq
 80071d0:	011b      	lsleq	r3, r3, #4
 80071d2:	3004      	addeq	r0, #4
 80071d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071d8:	bf04      	itt	eq
 80071da:	009b      	lsleq	r3, r3, #2
 80071dc:	3002      	addeq	r0, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	db05      	blt.n	80071ee <__hi0bits+0x3a>
 80071e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80071e6:	f100 0001 	add.w	r0, r0, #1
 80071ea:	bf08      	it	eq
 80071ec:	2020      	moveq	r0, #32
 80071ee:	4770      	bx	lr
 80071f0:	2000      	movs	r0, #0
 80071f2:	e7e5      	b.n	80071c0 <__hi0bits+0xc>

080071f4 <__lo0bits>:
 80071f4:	6803      	ldr	r3, [r0, #0]
 80071f6:	4602      	mov	r2, r0
 80071f8:	f013 0007 	ands.w	r0, r3, #7
 80071fc:	d00b      	beq.n	8007216 <__lo0bits+0x22>
 80071fe:	07d9      	lsls	r1, r3, #31
 8007200:	d422      	bmi.n	8007248 <__lo0bits+0x54>
 8007202:	0798      	lsls	r0, r3, #30
 8007204:	bf49      	itett	mi
 8007206:	085b      	lsrmi	r3, r3, #1
 8007208:	089b      	lsrpl	r3, r3, #2
 800720a:	2001      	movmi	r0, #1
 800720c:	6013      	strmi	r3, [r2, #0]
 800720e:	bf5c      	itt	pl
 8007210:	2002      	movpl	r0, #2
 8007212:	6013      	strpl	r3, [r2, #0]
 8007214:	4770      	bx	lr
 8007216:	b299      	uxth	r1, r3
 8007218:	b909      	cbnz	r1, 800721e <__lo0bits+0x2a>
 800721a:	2010      	movs	r0, #16
 800721c:	0c1b      	lsrs	r3, r3, #16
 800721e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007222:	bf04      	itt	eq
 8007224:	0a1b      	lsreq	r3, r3, #8
 8007226:	3008      	addeq	r0, #8
 8007228:	0719      	lsls	r1, r3, #28
 800722a:	bf04      	itt	eq
 800722c:	091b      	lsreq	r3, r3, #4
 800722e:	3004      	addeq	r0, #4
 8007230:	0799      	lsls	r1, r3, #30
 8007232:	bf04      	itt	eq
 8007234:	089b      	lsreq	r3, r3, #2
 8007236:	3002      	addeq	r0, #2
 8007238:	07d9      	lsls	r1, r3, #31
 800723a:	d403      	bmi.n	8007244 <__lo0bits+0x50>
 800723c:	085b      	lsrs	r3, r3, #1
 800723e:	f100 0001 	add.w	r0, r0, #1
 8007242:	d003      	beq.n	800724c <__lo0bits+0x58>
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4770      	bx	lr
 8007248:	2000      	movs	r0, #0
 800724a:	4770      	bx	lr
 800724c:	2020      	movs	r0, #32
 800724e:	4770      	bx	lr

08007250 <__i2b>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	2101      	movs	r1, #1
 8007256:	f7ff ff01 	bl	800705c <_Balloc>
 800725a:	4602      	mov	r2, r0
 800725c:	b928      	cbnz	r0, 800726a <__i2b+0x1a>
 800725e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007262:	4b04      	ldr	r3, [pc, #16]	; (8007274 <__i2b+0x24>)
 8007264:	4804      	ldr	r0, [pc, #16]	; (8007278 <__i2b+0x28>)
 8007266:	f000 fc9b 	bl	8007ba0 <__assert_func>
 800726a:	2301      	movs	r3, #1
 800726c:	6144      	str	r4, [r0, #20]
 800726e:	6103      	str	r3, [r0, #16]
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	08008e63 	.word	0x08008e63
 8007278:	08008e74 	.word	0x08008e74

0800727c <__multiply>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4614      	mov	r4, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	460d      	mov	r5, r1
 8007288:	429a      	cmp	r2, r3
 800728a:	bfbe      	ittt	lt
 800728c:	460b      	movlt	r3, r1
 800728e:	4625      	movlt	r5, r4
 8007290:	461c      	movlt	r4, r3
 8007292:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007296:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800729a:	68ab      	ldr	r3, [r5, #8]
 800729c:	6869      	ldr	r1, [r5, #4]
 800729e:	eb0a 0709 	add.w	r7, sl, r9
 80072a2:	42bb      	cmp	r3, r7
 80072a4:	b085      	sub	sp, #20
 80072a6:	bfb8      	it	lt
 80072a8:	3101      	addlt	r1, #1
 80072aa:	f7ff fed7 	bl	800705c <_Balloc>
 80072ae:	b930      	cbnz	r0, 80072be <__multiply+0x42>
 80072b0:	4602      	mov	r2, r0
 80072b2:	f240 115d 	movw	r1, #349	; 0x15d
 80072b6:	4b41      	ldr	r3, [pc, #260]	; (80073bc <__multiply+0x140>)
 80072b8:	4841      	ldr	r0, [pc, #260]	; (80073c0 <__multiply+0x144>)
 80072ba:	f000 fc71 	bl	8007ba0 <__assert_func>
 80072be:	f100 0614 	add.w	r6, r0, #20
 80072c2:	4633      	mov	r3, r6
 80072c4:	2200      	movs	r2, #0
 80072c6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80072ca:	4543      	cmp	r3, r8
 80072cc:	d31e      	bcc.n	800730c <__multiply+0x90>
 80072ce:	f105 0c14 	add.w	ip, r5, #20
 80072d2:	f104 0314 	add.w	r3, r4, #20
 80072d6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80072da:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80072de:	9202      	str	r2, [sp, #8]
 80072e0:	ebac 0205 	sub.w	r2, ip, r5
 80072e4:	3a15      	subs	r2, #21
 80072e6:	f022 0203 	bic.w	r2, r2, #3
 80072ea:	3204      	adds	r2, #4
 80072ec:	f105 0115 	add.w	r1, r5, #21
 80072f0:	458c      	cmp	ip, r1
 80072f2:	bf38      	it	cc
 80072f4:	2204      	movcc	r2, #4
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	9a02      	ldr	r2, [sp, #8]
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d808      	bhi.n	8007312 <__multiply+0x96>
 8007300:	2f00      	cmp	r7, #0
 8007302:	dc55      	bgt.n	80073b0 <__multiply+0x134>
 8007304:	6107      	str	r7, [r0, #16]
 8007306:	b005      	add	sp, #20
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	f843 2b04 	str.w	r2, [r3], #4
 8007310:	e7db      	b.n	80072ca <__multiply+0x4e>
 8007312:	f8b3 a000 	ldrh.w	sl, [r3]
 8007316:	f1ba 0f00 	cmp.w	sl, #0
 800731a:	d020      	beq.n	800735e <__multiply+0xe2>
 800731c:	46b1      	mov	r9, r6
 800731e:	2200      	movs	r2, #0
 8007320:	f105 0e14 	add.w	lr, r5, #20
 8007324:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007328:	f8d9 b000 	ldr.w	fp, [r9]
 800732c:	b2a1      	uxth	r1, r4
 800732e:	fa1f fb8b 	uxth.w	fp, fp
 8007332:	fb0a b101 	mla	r1, sl, r1, fp
 8007336:	4411      	add	r1, r2
 8007338:	f8d9 2000 	ldr.w	r2, [r9]
 800733c:	0c24      	lsrs	r4, r4, #16
 800733e:	0c12      	lsrs	r2, r2, #16
 8007340:	fb0a 2404 	mla	r4, sl, r4, r2
 8007344:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007348:	b289      	uxth	r1, r1
 800734a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800734e:	45f4      	cmp	ip, lr
 8007350:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007354:	f849 1b04 	str.w	r1, [r9], #4
 8007358:	d8e4      	bhi.n	8007324 <__multiply+0xa8>
 800735a:	9901      	ldr	r1, [sp, #4]
 800735c:	5072      	str	r2, [r6, r1]
 800735e:	9a03      	ldr	r2, [sp, #12]
 8007360:	3304      	adds	r3, #4
 8007362:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007366:	f1b9 0f00 	cmp.w	r9, #0
 800736a:	d01f      	beq.n	80073ac <__multiply+0x130>
 800736c:	46b6      	mov	lr, r6
 800736e:	f04f 0a00 	mov.w	sl, #0
 8007372:	6834      	ldr	r4, [r6, #0]
 8007374:	f105 0114 	add.w	r1, r5, #20
 8007378:	880a      	ldrh	r2, [r1, #0]
 800737a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800737e:	b2a4      	uxth	r4, r4
 8007380:	fb09 b202 	mla	r2, r9, r2, fp
 8007384:	4492      	add	sl, r2
 8007386:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800738a:	f84e 4b04 	str.w	r4, [lr], #4
 800738e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007392:	f8be 2000 	ldrh.w	r2, [lr]
 8007396:	0c24      	lsrs	r4, r4, #16
 8007398:	fb09 2404 	mla	r4, r9, r4, r2
 800739c:	458c      	cmp	ip, r1
 800739e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073a6:	d8e7      	bhi.n	8007378 <__multiply+0xfc>
 80073a8:	9a01      	ldr	r2, [sp, #4]
 80073aa:	50b4      	str	r4, [r6, r2]
 80073ac:	3604      	adds	r6, #4
 80073ae:	e7a3      	b.n	80072f8 <__multiply+0x7c>
 80073b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1a5      	bne.n	8007304 <__multiply+0x88>
 80073b8:	3f01      	subs	r7, #1
 80073ba:	e7a1      	b.n	8007300 <__multiply+0x84>
 80073bc:	08008e63 	.word	0x08008e63
 80073c0:	08008e74 	.word	0x08008e74

080073c4 <__pow5mult>:
 80073c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c8:	4615      	mov	r5, r2
 80073ca:	f012 0203 	ands.w	r2, r2, #3
 80073ce:	4606      	mov	r6, r0
 80073d0:	460f      	mov	r7, r1
 80073d2:	d007      	beq.n	80073e4 <__pow5mult+0x20>
 80073d4:	4c25      	ldr	r4, [pc, #148]	; (800746c <__pow5mult+0xa8>)
 80073d6:	3a01      	subs	r2, #1
 80073d8:	2300      	movs	r3, #0
 80073da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073de:	f7ff fe9f 	bl	8007120 <__multadd>
 80073e2:	4607      	mov	r7, r0
 80073e4:	10ad      	asrs	r5, r5, #2
 80073e6:	d03d      	beq.n	8007464 <__pow5mult+0xa0>
 80073e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073ea:	b97c      	cbnz	r4, 800740c <__pow5mult+0x48>
 80073ec:	2010      	movs	r0, #16
 80073ee:	f7ff fe11 	bl	8007014 <malloc>
 80073f2:	4602      	mov	r2, r0
 80073f4:	6270      	str	r0, [r6, #36]	; 0x24
 80073f6:	b928      	cbnz	r0, 8007404 <__pow5mult+0x40>
 80073f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073fc:	4b1c      	ldr	r3, [pc, #112]	; (8007470 <__pow5mult+0xac>)
 80073fe:	481d      	ldr	r0, [pc, #116]	; (8007474 <__pow5mult+0xb0>)
 8007400:	f000 fbce 	bl	8007ba0 <__assert_func>
 8007404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007408:	6004      	str	r4, [r0, #0]
 800740a:	60c4      	str	r4, [r0, #12]
 800740c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007414:	b94c      	cbnz	r4, 800742a <__pow5mult+0x66>
 8007416:	f240 2171 	movw	r1, #625	; 0x271
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff ff18 	bl	8007250 <__i2b>
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	f8c8 0008 	str.w	r0, [r8, #8]
 8007428:	6003      	str	r3, [r0, #0]
 800742a:	f04f 0900 	mov.w	r9, #0
 800742e:	07eb      	lsls	r3, r5, #31
 8007430:	d50a      	bpl.n	8007448 <__pow5mult+0x84>
 8007432:	4639      	mov	r1, r7
 8007434:	4622      	mov	r2, r4
 8007436:	4630      	mov	r0, r6
 8007438:	f7ff ff20 	bl	800727c <__multiply>
 800743c:	4680      	mov	r8, r0
 800743e:	4639      	mov	r1, r7
 8007440:	4630      	mov	r0, r6
 8007442:	f7ff fe4b 	bl	80070dc <_Bfree>
 8007446:	4647      	mov	r7, r8
 8007448:	106d      	asrs	r5, r5, #1
 800744a:	d00b      	beq.n	8007464 <__pow5mult+0xa0>
 800744c:	6820      	ldr	r0, [r4, #0]
 800744e:	b938      	cbnz	r0, 8007460 <__pow5mult+0x9c>
 8007450:	4622      	mov	r2, r4
 8007452:	4621      	mov	r1, r4
 8007454:	4630      	mov	r0, r6
 8007456:	f7ff ff11 	bl	800727c <__multiply>
 800745a:	6020      	str	r0, [r4, #0]
 800745c:	f8c0 9000 	str.w	r9, [r0]
 8007460:	4604      	mov	r4, r0
 8007462:	e7e4      	b.n	800742e <__pow5mult+0x6a>
 8007464:	4638      	mov	r0, r7
 8007466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746a:	bf00      	nop
 800746c:	08008fc8 	.word	0x08008fc8
 8007470:	08008ded 	.word	0x08008ded
 8007474:	08008e74 	.word	0x08008e74

08007478 <__lshift>:
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	460c      	mov	r4, r1
 800747e:	4607      	mov	r7, r0
 8007480:	4691      	mov	r9, r2
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	6849      	ldr	r1, [r1, #4]
 8007486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800748a:	68a3      	ldr	r3, [r4, #8]
 800748c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007490:	f108 0601 	add.w	r6, r8, #1
 8007494:	42b3      	cmp	r3, r6
 8007496:	db0b      	blt.n	80074b0 <__lshift+0x38>
 8007498:	4638      	mov	r0, r7
 800749a:	f7ff fddf 	bl	800705c <_Balloc>
 800749e:	4605      	mov	r5, r0
 80074a0:	b948      	cbnz	r0, 80074b6 <__lshift+0x3e>
 80074a2:	4602      	mov	r2, r0
 80074a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074a8:	4b27      	ldr	r3, [pc, #156]	; (8007548 <__lshift+0xd0>)
 80074aa:	4828      	ldr	r0, [pc, #160]	; (800754c <__lshift+0xd4>)
 80074ac:	f000 fb78 	bl	8007ba0 <__assert_func>
 80074b0:	3101      	adds	r1, #1
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	e7ee      	b.n	8007494 <__lshift+0x1c>
 80074b6:	2300      	movs	r3, #0
 80074b8:	f100 0114 	add.w	r1, r0, #20
 80074bc:	f100 0210 	add.w	r2, r0, #16
 80074c0:	4618      	mov	r0, r3
 80074c2:	4553      	cmp	r3, sl
 80074c4:	db33      	blt.n	800752e <__lshift+0xb6>
 80074c6:	6920      	ldr	r0, [r4, #16]
 80074c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074cc:	f104 0314 	add.w	r3, r4, #20
 80074d0:	f019 091f 	ands.w	r9, r9, #31
 80074d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074dc:	d02b      	beq.n	8007536 <__lshift+0xbe>
 80074de:	468a      	mov	sl, r1
 80074e0:	2200      	movs	r2, #0
 80074e2:	f1c9 0e20 	rsb	lr, r9, #32
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	fa00 f009 	lsl.w	r0, r0, r9
 80074ec:	4302      	orrs	r2, r0
 80074ee:	f84a 2b04 	str.w	r2, [sl], #4
 80074f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f6:	459c      	cmp	ip, r3
 80074f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80074fc:	d8f3      	bhi.n	80074e6 <__lshift+0x6e>
 80074fe:	ebac 0304 	sub.w	r3, ip, r4
 8007502:	3b15      	subs	r3, #21
 8007504:	f023 0303 	bic.w	r3, r3, #3
 8007508:	3304      	adds	r3, #4
 800750a:	f104 0015 	add.w	r0, r4, #21
 800750e:	4584      	cmp	ip, r0
 8007510:	bf38      	it	cc
 8007512:	2304      	movcc	r3, #4
 8007514:	50ca      	str	r2, [r1, r3]
 8007516:	b10a      	cbz	r2, 800751c <__lshift+0xa4>
 8007518:	f108 0602 	add.w	r6, r8, #2
 800751c:	3e01      	subs	r6, #1
 800751e:	4638      	mov	r0, r7
 8007520:	4621      	mov	r1, r4
 8007522:	612e      	str	r6, [r5, #16]
 8007524:	f7ff fdda 	bl	80070dc <_Bfree>
 8007528:	4628      	mov	r0, r5
 800752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007532:	3301      	adds	r3, #1
 8007534:	e7c5      	b.n	80074c2 <__lshift+0x4a>
 8007536:	3904      	subs	r1, #4
 8007538:	f853 2b04 	ldr.w	r2, [r3], #4
 800753c:	459c      	cmp	ip, r3
 800753e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007542:	d8f9      	bhi.n	8007538 <__lshift+0xc0>
 8007544:	e7ea      	b.n	800751c <__lshift+0xa4>
 8007546:	bf00      	nop
 8007548:	08008e63 	.word	0x08008e63
 800754c:	08008e74 	.word	0x08008e74

08007550 <__mcmp>:
 8007550:	4603      	mov	r3, r0
 8007552:	690a      	ldr	r2, [r1, #16]
 8007554:	6900      	ldr	r0, [r0, #16]
 8007556:	b530      	push	{r4, r5, lr}
 8007558:	1a80      	subs	r0, r0, r2
 800755a:	d10d      	bne.n	8007578 <__mcmp+0x28>
 800755c:	3314      	adds	r3, #20
 800755e:	3114      	adds	r1, #20
 8007560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800756c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007570:	4295      	cmp	r5, r2
 8007572:	d002      	beq.n	800757a <__mcmp+0x2a>
 8007574:	d304      	bcc.n	8007580 <__mcmp+0x30>
 8007576:	2001      	movs	r0, #1
 8007578:	bd30      	pop	{r4, r5, pc}
 800757a:	42a3      	cmp	r3, r4
 800757c:	d3f4      	bcc.n	8007568 <__mcmp+0x18>
 800757e:	e7fb      	b.n	8007578 <__mcmp+0x28>
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	e7f8      	b.n	8007578 <__mcmp+0x28>
	...

08007588 <__mdiff>:
 8007588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	4606      	mov	r6, r0
 8007590:	4611      	mov	r1, r2
 8007592:	4620      	mov	r0, r4
 8007594:	4692      	mov	sl, r2
 8007596:	f7ff ffdb 	bl	8007550 <__mcmp>
 800759a:	1e05      	subs	r5, r0, #0
 800759c:	d111      	bne.n	80075c2 <__mdiff+0x3a>
 800759e:	4629      	mov	r1, r5
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff fd5b 	bl	800705c <_Balloc>
 80075a6:	4602      	mov	r2, r0
 80075a8:	b928      	cbnz	r0, 80075b6 <__mdiff+0x2e>
 80075aa:	f240 2132 	movw	r1, #562	; 0x232
 80075ae:	4b3c      	ldr	r3, [pc, #240]	; (80076a0 <__mdiff+0x118>)
 80075b0:	483c      	ldr	r0, [pc, #240]	; (80076a4 <__mdiff+0x11c>)
 80075b2:	f000 faf5 	bl	8007ba0 <__assert_func>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075bc:	4610      	mov	r0, r2
 80075be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c2:	bfa4      	itt	ge
 80075c4:	4653      	movge	r3, sl
 80075c6:	46a2      	movge	sl, r4
 80075c8:	4630      	mov	r0, r6
 80075ca:	f8da 1004 	ldr.w	r1, [sl, #4]
 80075ce:	bfa6      	itte	ge
 80075d0:	461c      	movge	r4, r3
 80075d2:	2500      	movge	r5, #0
 80075d4:	2501      	movlt	r5, #1
 80075d6:	f7ff fd41 	bl	800705c <_Balloc>
 80075da:	4602      	mov	r2, r0
 80075dc:	b918      	cbnz	r0, 80075e6 <__mdiff+0x5e>
 80075de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075e2:	4b2f      	ldr	r3, [pc, #188]	; (80076a0 <__mdiff+0x118>)
 80075e4:	e7e4      	b.n	80075b0 <__mdiff+0x28>
 80075e6:	f100 0814 	add.w	r8, r0, #20
 80075ea:	f8da 7010 	ldr.w	r7, [sl, #16]
 80075ee:	60c5      	str	r5, [r0, #12]
 80075f0:	f04f 0c00 	mov.w	ip, #0
 80075f4:	f10a 0514 	add.w	r5, sl, #20
 80075f8:	f10a 0010 	add.w	r0, sl, #16
 80075fc:	46c2      	mov	sl, r8
 80075fe:	6926      	ldr	r6, [r4, #16]
 8007600:	f104 0914 	add.w	r9, r4, #20
 8007604:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800760c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007610:	f859 3b04 	ldr.w	r3, [r9], #4
 8007614:	fa1f f18b 	uxth.w	r1, fp
 8007618:	4461      	add	r1, ip
 800761a:	fa1f fc83 	uxth.w	ip, r3
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	eba1 010c 	sub.w	r1, r1, ip
 8007624:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007628:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800762c:	b289      	uxth	r1, r1
 800762e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007632:	454e      	cmp	r6, r9
 8007634:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007638:	f84a 3b04 	str.w	r3, [sl], #4
 800763c:	d8e6      	bhi.n	800760c <__mdiff+0x84>
 800763e:	1b33      	subs	r3, r6, r4
 8007640:	3b15      	subs	r3, #21
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	3415      	adds	r4, #21
 8007648:	3304      	adds	r3, #4
 800764a:	42a6      	cmp	r6, r4
 800764c:	bf38      	it	cc
 800764e:	2304      	movcc	r3, #4
 8007650:	441d      	add	r5, r3
 8007652:	4443      	add	r3, r8
 8007654:	461e      	mov	r6, r3
 8007656:	462c      	mov	r4, r5
 8007658:	4574      	cmp	r4, lr
 800765a:	d30e      	bcc.n	800767a <__mdiff+0xf2>
 800765c:	f10e 0103 	add.w	r1, lr, #3
 8007660:	1b49      	subs	r1, r1, r5
 8007662:	f021 0103 	bic.w	r1, r1, #3
 8007666:	3d03      	subs	r5, #3
 8007668:	45ae      	cmp	lr, r5
 800766a:	bf38      	it	cc
 800766c:	2100      	movcc	r1, #0
 800766e:	4419      	add	r1, r3
 8007670:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007674:	b18b      	cbz	r3, 800769a <__mdiff+0x112>
 8007676:	6117      	str	r7, [r2, #16]
 8007678:	e7a0      	b.n	80075bc <__mdiff+0x34>
 800767a:	f854 8b04 	ldr.w	r8, [r4], #4
 800767e:	fa1f f188 	uxth.w	r1, r8
 8007682:	4461      	add	r1, ip
 8007684:	1408      	asrs	r0, r1, #16
 8007686:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800768a:	b289      	uxth	r1, r1
 800768c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007690:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007694:	f846 1b04 	str.w	r1, [r6], #4
 8007698:	e7de      	b.n	8007658 <__mdiff+0xd0>
 800769a:	3f01      	subs	r7, #1
 800769c:	e7e8      	b.n	8007670 <__mdiff+0xe8>
 800769e:	bf00      	nop
 80076a0:	08008e63 	.word	0x08008e63
 80076a4:	08008e74 	.word	0x08008e74

080076a8 <__d2b>:
 80076a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076ac:	2101      	movs	r1, #1
 80076ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80076b2:	4690      	mov	r8, r2
 80076b4:	461d      	mov	r5, r3
 80076b6:	f7ff fcd1 	bl	800705c <_Balloc>
 80076ba:	4604      	mov	r4, r0
 80076bc:	b930      	cbnz	r0, 80076cc <__d2b+0x24>
 80076be:	4602      	mov	r2, r0
 80076c0:	f240 310a 	movw	r1, #778	; 0x30a
 80076c4:	4b24      	ldr	r3, [pc, #144]	; (8007758 <__d2b+0xb0>)
 80076c6:	4825      	ldr	r0, [pc, #148]	; (800775c <__d2b+0xb4>)
 80076c8:	f000 fa6a 	bl	8007ba0 <__assert_func>
 80076cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80076d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80076d4:	bb2d      	cbnz	r5, 8007722 <__d2b+0x7a>
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	f1b8 0300 	subs.w	r3, r8, #0
 80076dc:	d026      	beq.n	800772c <__d2b+0x84>
 80076de:	4668      	mov	r0, sp
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	f7ff fd87 	bl	80071f4 <__lo0bits>
 80076e6:	9900      	ldr	r1, [sp, #0]
 80076e8:	b1f0      	cbz	r0, 8007728 <__d2b+0x80>
 80076ea:	9a01      	ldr	r2, [sp, #4]
 80076ec:	f1c0 0320 	rsb	r3, r0, #32
 80076f0:	fa02 f303 	lsl.w	r3, r2, r3
 80076f4:	430b      	orrs	r3, r1
 80076f6:	40c2      	lsrs	r2, r0
 80076f8:	6163      	str	r3, [r4, #20]
 80076fa:	9201      	str	r2, [sp, #4]
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf14      	ite	ne
 8007702:	2102      	movne	r1, #2
 8007704:	2101      	moveq	r1, #1
 8007706:	61a3      	str	r3, [r4, #24]
 8007708:	6121      	str	r1, [r4, #16]
 800770a:	b1c5      	cbz	r5, 800773e <__d2b+0x96>
 800770c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007710:	4405      	add	r5, r0
 8007712:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007716:	603d      	str	r5, [r7, #0]
 8007718:	6030      	str	r0, [r6, #0]
 800771a:	4620      	mov	r0, r4
 800771c:	b002      	add	sp, #8
 800771e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007726:	e7d6      	b.n	80076d6 <__d2b+0x2e>
 8007728:	6161      	str	r1, [r4, #20]
 800772a:	e7e7      	b.n	80076fc <__d2b+0x54>
 800772c:	a801      	add	r0, sp, #4
 800772e:	f7ff fd61 	bl	80071f4 <__lo0bits>
 8007732:	2101      	movs	r1, #1
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	6121      	str	r1, [r4, #16]
 8007738:	6163      	str	r3, [r4, #20]
 800773a:	3020      	adds	r0, #32
 800773c:	e7e5      	b.n	800770a <__d2b+0x62>
 800773e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007742:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007746:	6038      	str	r0, [r7, #0]
 8007748:	6918      	ldr	r0, [r3, #16]
 800774a:	f7ff fd33 	bl	80071b4 <__hi0bits>
 800774e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007752:	6031      	str	r1, [r6, #0]
 8007754:	e7e1      	b.n	800771a <__d2b+0x72>
 8007756:	bf00      	nop
 8007758:	08008e63 	.word	0x08008e63
 800775c:	08008e74 	.word	0x08008e74

08007760 <_calloc_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	fb02 f501 	mul.w	r5, r2, r1
 8007766:	4629      	mov	r1, r5
 8007768:	f000 f854 	bl	8007814 <_malloc_r>
 800776c:	4604      	mov	r4, r0
 800776e:	b118      	cbz	r0, 8007778 <_calloc_r+0x18>
 8007770:	462a      	mov	r2, r5
 8007772:	2100      	movs	r1, #0
 8007774:	f7fe f946 	bl	8005a04 <memset>
 8007778:	4620      	mov	r0, r4
 800777a:	bd38      	pop	{r3, r4, r5, pc}

0800777c <_free_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4605      	mov	r5, r0
 8007780:	2900      	cmp	r1, #0
 8007782:	d043      	beq.n	800780c <_free_r+0x90>
 8007784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007788:	1f0c      	subs	r4, r1, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	bfb8      	it	lt
 800778e:	18e4      	addlt	r4, r4, r3
 8007790:	f000 fa62 	bl	8007c58 <__malloc_lock>
 8007794:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <_free_r+0x94>)
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	4610      	mov	r0, r2
 800779a:	b933      	cbnz	r3, 80077aa <_free_r+0x2e>
 800779c:	6063      	str	r3, [r4, #4]
 800779e:	6014      	str	r4, [r2, #0]
 80077a0:	4628      	mov	r0, r5
 80077a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077a6:	f000 ba5d 	b.w	8007c64 <__malloc_unlock>
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	d90a      	bls.n	80077c4 <_free_r+0x48>
 80077ae:	6821      	ldr	r1, [r4, #0]
 80077b0:	1862      	adds	r2, r4, r1
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bf01      	itttt	eq
 80077b6:	681a      	ldreq	r2, [r3, #0]
 80077b8:	685b      	ldreq	r3, [r3, #4]
 80077ba:	1852      	addeq	r2, r2, r1
 80077bc:	6022      	streq	r2, [r4, #0]
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6004      	str	r4, [r0, #0]
 80077c2:	e7ed      	b.n	80077a0 <_free_r+0x24>
 80077c4:	461a      	mov	r2, r3
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	b10b      	cbz	r3, 80077ce <_free_r+0x52>
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	d9fa      	bls.n	80077c4 <_free_r+0x48>
 80077ce:	6811      	ldr	r1, [r2, #0]
 80077d0:	1850      	adds	r0, r2, r1
 80077d2:	42a0      	cmp	r0, r4
 80077d4:	d10b      	bne.n	80077ee <_free_r+0x72>
 80077d6:	6820      	ldr	r0, [r4, #0]
 80077d8:	4401      	add	r1, r0
 80077da:	1850      	adds	r0, r2, r1
 80077dc:	4283      	cmp	r3, r0
 80077de:	6011      	str	r1, [r2, #0]
 80077e0:	d1de      	bne.n	80077a0 <_free_r+0x24>
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	4401      	add	r1, r0
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	6053      	str	r3, [r2, #4]
 80077ec:	e7d8      	b.n	80077a0 <_free_r+0x24>
 80077ee:	d902      	bls.n	80077f6 <_free_r+0x7a>
 80077f0:	230c      	movs	r3, #12
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	e7d4      	b.n	80077a0 <_free_r+0x24>
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	1821      	adds	r1, r4, r0
 80077fa:	428b      	cmp	r3, r1
 80077fc:	bf01      	itttt	eq
 80077fe:	6819      	ldreq	r1, [r3, #0]
 8007800:	685b      	ldreq	r3, [r3, #4]
 8007802:	1809      	addeq	r1, r1, r0
 8007804:	6021      	streq	r1, [r4, #0]
 8007806:	6063      	str	r3, [r4, #4]
 8007808:	6054      	str	r4, [r2, #4]
 800780a:	e7c9      	b.n	80077a0 <_free_r+0x24>
 800780c:	bd38      	pop	{r3, r4, r5, pc}
 800780e:	bf00      	nop
 8007810:	2000020c 	.word	0x2000020c

08007814 <_malloc_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	1ccd      	adds	r5, r1, #3
 8007818:	f025 0503 	bic.w	r5, r5, #3
 800781c:	3508      	adds	r5, #8
 800781e:	2d0c      	cmp	r5, #12
 8007820:	bf38      	it	cc
 8007822:	250c      	movcc	r5, #12
 8007824:	2d00      	cmp	r5, #0
 8007826:	4606      	mov	r6, r0
 8007828:	db01      	blt.n	800782e <_malloc_r+0x1a>
 800782a:	42a9      	cmp	r1, r5
 800782c:	d903      	bls.n	8007836 <_malloc_r+0x22>
 800782e:	230c      	movs	r3, #12
 8007830:	6033      	str	r3, [r6, #0]
 8007832:	2000      	movs	r0, #0
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	f000 fa0f 	bl	8007c58 <__malloc_lock>
 800783a:	4921      	ldr	r1, [pc, #132]	; (80078c0 <_malloc_r+0xac>)
 800783c:	680a      	ldr	r2, [r1, #0]
 800783e:	4614      	mov	r4, r2
 8007840:	b99c      	cbnz	r4, 800786a <_malloc_r+0x56>
 8007842:	4f20      	ldr	r7, [pc, #128]	; (80078c4 <_malloc_r+0xb0>)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	b923      	cbnz	r3, 8007852 <_malloc_r+0x3e>
 8007848:	4621      	mov	r1, r4
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f998 	bl	8007b80 <_sbrk_r>
 8007850:	6038      	str	r0, [r7, #0]
 8007852:	4629      	mov	r1, r5
 8007854:	4630      	mov	r0, r6
 8007856:	f000 f993 	bl	8007b80 <_sbrk_r>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	d123      	bne.n	80078a6 <_malloc_r+0x92>
 800785e:	230c      	movs	r3, #12
 8007860:	4630      	mov	r0, r6
 8007862:	6033      	str	r3, [r6, #0]
 8007864:	f000 f9fe 	bl	8007c64 <__malloc_unlock>
 8007868:	e7e3      	b.n	8007832 <_malloc_r+0x1e>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	1b5b      	subs	r3, r3, r5
 800786e:	d417      	bmi.n	80078a0 <_malloc_r+0x8c>
 8007870:	2b0b      	cmp	r3, #11
 8007872:	d903      	bls.n	800787c <_malloc_r+0x68>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	441c      	add	r4, r3
 8007878:	6025      	str	r5, [r4, #0]
 800787a:	e004      	b.n	8007886 <_malloc_r+0x72>
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	42a2      	cmp	r2, r4
 8007880:	bf0c      	ite	eq
 8007882:	600b      	streq	r3, [r1, #0]
 8007884:	6053      	strne	r3, [r2, #4]
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f9ec 	bl	8007c64 <__malloc_unlock>
 800788c:	f104 000b 	add.w	r0, r4, #11
 8007890:	1d23      	adds	r3, r4, #4
 8007892:	f020 0007 	bic.w	r0, r0, #7
 8007896:	1ac2      	subs	r2, r0, r3
 8007898:	d0cc      	beq.n	8007834 <_malloc_r+0x20>
 800789a:	1a1b      	subs	r3, r3, r0
 800789c:	50a3      	str	r3, [r4, r2]
 800789e:	e7c9      	b.n	8007834 <_malloc_r+0x20>
 80078a0:	4622      	mov	r2, r4
 80078a2:	6864      	ldr	r4, [r4, #4]
 80078a4:	e7cc      	b.n	8007840 <_malloc_r+0x2c>
 80078a6:	1cc4      	adds	r4, r0, #3
 80078a8:	f024 0403 	bic.w	r4, r4, #3
 80078ac:	42a0      	cmp	r0, r4
 80078ae:	d0e3      	beq.n	8007878 <_malloc_r+0x64>
 80078b0:	1a21      	subs	r1, r4, r0
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 f964 	bl	8007b80 <_sbrk_r>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d1dd      	bne.n	8007878 <_malloc_r+0x64>
 80078bc:	e7cf      	b.n	800785e <_malloc_r+0x4a>
 80078be:	bf00      	nop
 80078c0:	2000020c 	.word	0x2000020c
 80078c4:	20000210 	.word	0x20000210

080078c8 <__ssputs_r>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	688e      	ldr	r6, [r1, #8]
 80078ce:	4682      	mov	sl, r0
 80078d0:	429e      	cmp	r6, r3
 80078d2:	460c      	mov	r4, r1
 80078d4:	4690      	mov	r8, r2
 80078d6:	461f      	mov	r7, r3
 80078d8:	d838      	bhi.n	800794c <__ssputs_r+0x84>
 80078da:	898a      	ldrh	r2, [r1, #12]
 80078dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078e0:	d032      	beq.n	8007948 <__ssputs_r+0x80>
 80078e2:	6825      	ldr	r5, [r4, #0]
 80078e4:	6909      	ldr	r1, [r1, #16]
 80078e6:	3301      	adds	r3, #1
 80078e8:	eba5 0901 	sub.w	r9, r5, r1
 80078ec:	6965      	ldr	r5, [r4, #20]
 80078ee:	444b      	add	r3, r9
 80078f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f8:	106d      	asrs	r5, r5, #1
 80078fa:	429d      	cmp	r5, r3
 80078fc:	bf38      	it	cc
 80078fe:	461d      	movcc	r5, r3
 8007900:	0553      	lsls	r3, r2, #21
 8007902:	d531      	bpl.n	8007968 <__ssputs_r+0xa0>
 8007904:	4629      	mov	r1, r5
 8007906:	f7ff ff85 	bl	8007814 <_malloc_r>
 800790a:	4606      	mov	r6, r0
 800790c:	b950      	cbnz	r0, 8007924 <__ssputs_r+0x5c>
 800790e:	230c      	movs	r3, #12
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	f8ca 3000 	str.w	r3, [sl]
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007924:	464a      	mov	r2, r9
 8007926:	6921      	ldr	r1, [r4, #16]
 8007928:	f7ff fb8a 	bl	8007040 <memcpy>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	6126      	str	r6, [r4, #16]
 800793a:	444e      	add	r6, r9
 800793c:	6026      	str	r6, [r4, #0]
 800793e:	463e      	mov	r6, r7
 8007940:	6165      	str	r5, [r4, #20]
 8007942:	eba5 0509 	sub.w	r5, r5, r9
 8007946:	60a5      	str	r5, [r4, #8]
 8007948:	42be      	cmp	r6, r7
 800794a:	d900      	bls.n	800794e <__ssputs_r+0x86>
 800794c:	463e      	mov	r6, r7
 800794e:	4632      	mov	r2, r6
 8007950:	4641      	mov	r1, r8
 8007952:	6820      	ldr	r0, [r4, #0]
 8007954:	f000 f966 	bl	8007c24 <memmove>
 8007958:	68a3      	ldr	r3, [r4, #8]
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	1b9b      	subs	r3, r3, r6
 800795e:	4432      	add	r2, r6
 8007960:	2000      	movs	r0, #0
 8007962:	60a3      	str	r3, [r4, #8]
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	e7db      	b.n	8007920 <__ssputs_r+0x58>
 8007968:	462a      	mov	r2, r5
 800796a:	f000 f981 	bl	8007c70 <_realloc_r>
 800796e:	4606      	mov	r6, r0
 8007970:	2800      	cmp	r0, #0
 8007972:	d1e1      	bne.n	8007938 <__ssputs_r+0x70>
 8007974:	4650      	mov	r0, sl
 8007976:	6921      	ldr	r1, [r4, #16]
 8007978:	f7ff ff00 	bl	800777c <_free_r>
 800797c:	e7c7      	b.n	800790e <__ssputs_r+0x46>
	...

08007980 <_svfiprintf_r>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	4698      	mov	r8, r3
 8007986:	898b      	ldrh	r3, [r1, #12]
 8007988:	4607      	mov	r7, r0
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	460d      	mov	r5, r1
 800798e:	4614      	mov	r4, r2
 8007990:	b09d      	sub	sp, #116	; 0x74
 8007992:	d50e      	bpl.n	80079b2 <_svfiprintf_r+0x32>
 8007994:	690b      	ldr	r3, [r1, #16]
 8007996:	b963      	cbnz	r3, 80079b2 <_svfiprintf_r+0x32>
 8007998:	2140      	movs	r1, #64	; 0x40
 800799a:	f7ff ff3b 	bl	8007814 <_malloc_r>
 800799e:	6028      	str	r0, [r5, #0]
 80079a0:	6128      	str	r0, [r5, #16]
 80079a2:	b920      	cbnz	r0, 80079ae <_svfiprintf_r+0x2e>
 80079a4:	230c      	movs	r3, #12
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	e0d1      	b.n	8007b52 <_svfiprintf_r+0x1d2>
 80079ae:	2340      	movs	r3, #64	; 0x40
 80079b0:	616b      	str	r3, [r5, #20]
 80079b2:	2300      	movs	r3, #0
 80079b4:	9309      	str	r3, [sp, #36]	; 0x24
 80079b6:	2320      	movs	r3, #32
 80079b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079bc:	2330      	movs	r3, #48	; 0x30
 80079be:	f04f 0901 	mov.w	r9, #1
 80079c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b6c <_svfiprintf_r+0x1ec>
 80079ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ce:	4623      	mov	r3, r4
 80079d0:	469a      	mov	sl, r3
 80079d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d6:	b10a      	cbz	r2, 80079dc <_svfiprintf_r+0x5c>
 80079d8:	2a25      	cmp	r2, #37	; 0x25
 80079da:	d1f9      	bne.n	80079d0 <_svfiprintf_r+0x50>
 80079dc:	ebba 0b04 	subs.w	fp, sl, r4
 80079e0:	d00b      	beq.n	80079fa <_svfiprintf_r+0x7a>
 80079e2:	465b      	mov	r3, fp
 80079e4:	4622      	mov	r2, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ff6d 	bl	80078c8 <__ssputs_r>
 80079ee:	3001      	adds	r0, #1
 80079f0:	f000 80aa 	beq.w	8007b48 <_svfiprintf_r+0x1c8>
 80079f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f6:	445a      	add	r2, fp
 80079f8:	9209      	str	r2, [sp, #36]	; 0x24
 80079fa:	f89a 3000 	ldrb.w	r3, [sl]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 80a2 	beq.w	8007b48 <_svfiprintf_r+0x1c8>
 8007a04:	2300      	movs	r3, #0
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0e:	f10a 0a01 	add.w	sl, sl, #1
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	9307      	str	r3, [sp, #28]
 8007a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a1c:	4654      	mov	r4, sl
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a24:	4851      	ldr	r0, [pc, #324]	; (8007b6c <_svfiprintf_r+0x1ec>)
 8007a26:	f7ff fafd 	bl	8007024 <memchr>
 8007a2a:	9a04      	ldr	r2, [sp, #16]
 8007a2c:	b9d8      	cbnz	r0, 8007a66 <_svfiprintf_r+0xe6>
 8007a2e:	06d0      	lsls	r0, r2, #27
 8007a30:	bf44      	itt	mi
 8007a32:	2320      	movmi	r3, #32
 8007a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a38:	0711      	lsls	r1, r2, #28
 8007a3a:	bf44      	itt	mi
 8007a3c:	232b      	movmi	r3, #43	; 0x2b
 8007a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a42:	f89a 3000 	ldrb.w	r3, [sl]
 8007a46:	2b2a      	cmp	r3, #42	; 0x2a
 8007a48:	d015      	beq.n	8007a76 <_svfiprintf_r+0xf6>
 8007a4a:	4654      	mov	r4, sl
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f04f 0c0a 	mov.w	ip, #10
 8007a52:	9a07      	ldr	r2, [sp, #28]
 8007a54:	4621      	mov	r1, r4
 8007a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5a:	3b30      	subs	r3, #48	; 0x30
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d94e      	bls.n	8007afe <_svfiprintf_r+0x17e>
 8007a60:	b1b0      	cbz	r0, 8007a90 <_svfiprintf_r+0x110>
 8007a62:	9207      	str	r2, [sp, #28]
 8007a64:	e014      	b.n	8007a90 <_svfiprintf_r+0x110>
 8007a66:	eba0 0308 	sub.w	r3, r0, r8
 8007a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	46a2      	mov	sl, r4
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	e7d2      	b.n	8007a1c <_svfiprintf_r+0x9c>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9103      	str	r1, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfbb      	ittet	lt
 8007a82:	425b      	neglt	r3, r3
 8007a84:	f042 0202 	orrlt.w	r2, r2, #2
 8007a88:	9307      	strge	r3, [sp, #28]
 8007a8a:	9307      	strlt	r3, [sp, #28]
 8007a8c:	bfb8      	it	lt
 8007a8e:	9204      	strlt	r2, [sp, #16]
 8007a90:	7823      	ldrb	r3, [r4, #0]
 8007a92:	2b2e      	cmp	r3, #46	; 0x2e
 8007a94:	d10c      	bne.n	8007ab0 <_svfiprintf_r+0x130>
 8007a96:	7863      	ldrb	r3, [r4, #1]
 8007a98:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9a:	d135      	bne.n	8007b08 <_svfiprintf_r+0x188>
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	3402      	adds	r4, #2
 8007aa0:	1d1a      	adds	r2, r3, #4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	9203      	str	r2, [sp, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bfb8      	it	lt
 8007aaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aae:	9305      	str	r3, [sp, #20]
 8007ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b7c <_svfiprintf_r+0x1fc>
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	4650      	mov	r0, sl
 8007ab8:	7821      	ldrb	r1, [r4, #0]
 8007aba:	f7ff fab3 	bl	8007024 <memchr>
 8007abe:	b140      	cbz	r0, 8007ad2 <_svfiprintf_r+0x152>
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	eba0 000a 	sub.w	r0, r0, sl
 8007ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8007aca:	9b04      	ldr	r3, [sp, #16]
 8007acc:	3401      	adds	r4, #1
 8007ace:	4303      	orrs	r3, r0
 8007ad0:	9304      	str	r3, [sp, #16]
 8007ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad6:	2206      	movs	r2, #6
 8007ad8:	4825      	ldr	r0, [pc, #148]	; (8007b70 <_svfiprintf_r+0x1f0>)
 8007ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ade:	f7ff faa1 	bl	8007024 <memchr>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d038      	beq.n	8007b58 <_svfiprintf_r+0x1d8>
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <_svfiprintf_r+0x1f4>)
 8007ae8:	bb1b      	cbnz	r3, 8007b32 <_svfiprintf_r+0x1b2>
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	3307      	adds	r3, #7
 8007aee:	f023 0307 	bic.w	r3, r3, #7
 8007af2:	3308      	adds	r3, #8
 8007af4:	9303      	str	r3, [sp, #12]
 8007af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af8:	4433      	add	r3, r6
 8007afa:	9309      	str	r3, [sp, #36]	; 0x24
 8007afc:	e767      	b.n	80079ce <_svfiprintf_r+0x4e>
 8007afe:	460c      	mov	r4, r1
 8007b00:	2001      	movs	r0, #1
 8007b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b06:	e7a5      	b.n	8007a54 <_svfiprintf_r+0xd4>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f04f 0c0a 	mov.w	ip, #10
 8007b0e:	4619      	mov	r1, r3
 8007b10:	3401      	adds	r4, #1
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	4620      	mov	r0, r4
 8007b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1a:	3a30      	subs	r2, #48	; 0x30
 8007b1c:	2a09      	cmp	r2, #9
 8007b1e:	d903      	bls.n	8007b28 <_svfiprintf_r+0x1a8>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0c5      	beq.n	8007ab0 <_svfiprintf_r+0x130>
 8007b24:	9105      	str	r1, [sp, #20]
 8007b26:	e7c3      	b.n	8007ab0 <_svfiprintf_r+0x130>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b30:	e7f0      	b.n	8007b14 <_svfiprintf_r+0x194>
 8007b32:	ab03      	add	r3, sp, #12
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	462a      	mov	r2, r5
 8007b38:	4638      	mov	r0, r7
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <_svfiprintf_r+0x1f8>)
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	f7fe f807 	bl	8005b50 <_printf_float>
 8007b42:	1c42      	adds	r2, r0, #1
 8007b44:	4606      	mov	r6, r0
 8007b46:	d1d6      	bne.n	8007af6 <_svfiprintf_r+0x176>
 8007b48:	89ab      	ldrh	r3, [r5, #12]
 8007b4a:	065b      	lsls	r3, r3, #25
 8007b4c:	f53f af2c 	bmi.w	80079a8 <_svfiprintf_r+0x28>
 8007b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b52:	b01d      	add	sp, #116	; 0x74
 8007b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b58:	ab03      	add	r3, sp, #12
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	4638      	mov	r0, r7
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <_svfiprintf_r+0x1f8>)
 8007b62:	a904      	add	r1, sp, #16
 8007b64:	f7fe fa90 	bl	8006088 <_printf_i>
 8007b68:	e7eb      	b.n	8007b42 <_svfiprintf_r+0x1c2>
 8007b6a:	bf00      	nop
 8007b6c:	08008fd4 	.word	0x08008fd4
 8007b70:	08008fde 	.word	0x08008fde
 8007b74:	08005b51 	.word	0x08005b51
 8007b78:	080078c9 	.word	0x080078c9
 8007b7c:	08008fda 	.word	0x08008fda

08007b80 <_sbrk_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	2300      	movs	r3, #0
 8007b84:	4d05      	ldr	r5, [pc, #20]	; (8007b9c <_sbrk_r+0x1c>)
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7fa fa04 	bl	8001f98 <_sbrk>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_sbrk_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_sbrk_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	2000045c 	.word	0x2000045c

08007ba0 <__assert_func>:
 8007ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ba2:	4614      	mov	r4, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <__assert_func+0x2c>)
 8007ba8:	4605      	mov	r5, r0
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68d8      	ldr	r0, [r3, #12]
 8007bae:	b14c      	cbz	r4, 8007bc4 <__assert_func+0x24>
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <__assert_func+0x30>)
 8007bb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bb6:	9100      	str	r1, [sp, #0]
 8007bb8:	462b      	mov	r3, r5
 8007bba:	4906      	ldr	r1, [pc, #24]	; (8007bd4 <__assert_func+0x34>)
 8007bbc:	f000 f80e 	bl	8007bdc <fiprintf>
 8007bc0:	f000 faa2 	bl	8008108 <abort>
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <__assert_func+0x38>)
 8007bc6:	461c      	mov	r4, r3
 8007bc8:	e7f3      	b.n	8007bb2 <__assert_func+0x12>
 8007bca:	bf00      	nop
 8007bcc:	20000018 	.word	0x20000018
 8007bd0:	08008fe5 	.word	0x08008fe5
 8007bd4:	08008ff2 	.word	0x08008ff2
 8007bd8:	08009020 	.word	0x08009020

08007bdc <fiprintf>:
 8007bdc:	b40e      	push	{r1, r2, r3}
 8007bde:	b503      	push	{r0, r1, lr}
 8007be0:	4601      	mov	r1, r0
 8007be2:	ab03      	add	r3, sp, #12
 8007be4:	4805      	ldr	r0, [pc, #20]	; (8007bfc <fiprintf+0x20>)
 8007be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f000 f88d 	bl	8007d0c <_vfiprintf_r>
 8007bf2:	b002      	add	sp, #8
 8007bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf8:	b003      	add	sp, #12
 8007bfa:	4770      	bx	lr
 8007bfc:	20000018 	.word	0x20000018

08007c00 <__ascii_mbtowc>:
 8007c00:	b082      	sub	sp, #8
 8007c02:	b901      	cbnz	r1, 8007c06 <__ascii_mbtowc+0x6>
 8007c04:	a901      	add	r1, sp, #4
 8007c06:	b142      	cbz	r2, 8007c1a <__ascii_mbtowc+0x1a>
 8007c08:	b14b      	cbz	r3, 8007c1e <__ascii_mbtowc+0x1e>
 8007c0a:	7813      	ldrb	r3, [r2, #0]
 8007c0c:	600b      	str	r3, [r1, #0]
 8007c0e:	7812      	ldrb	r2, [r2, #0]
 8007c10:	1e10      	subs	r0, r2, #0
 8007c12:	bf18      	it	ne
 8007c14:	2001      	movne	r0, #1
 8007c16:	b002      	add	sp, #8
 8007c18:	4770      	bx	lr
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	e7fb      	b.n	8007c16 <__ascii_mbtowc+0x16>
 8007c1e:	f06f 0001 	mvn.w	r0, #1
 8007c22:	e7f8      	b.n	8007c16 <__ascii_mbtowc+0x16>

08007c24 <memmove>:
 8007c24:	4288      	cmp	r0, r1
 8007c26:	b510      	push	{r4, lr}
 8007c28:	eb01 0402 	add.w	r4, r1, r2
 8007c2c:	d902      	bls.n	8007c34 <memmove+0x10>
 8007c2e:	4284      	cmp	r4, r0
 8007c30:	4623      	mov	r3, r4
 8007c32:	d807      	bhi.n	8007c44 <memmove+0x20>
 8007c34:	1e43      	subs	r3, r0, #1
 8007c36:	42a1      	cmp	r1, r4
 8007c38:	d008      	beq.n	8007c4c <memmove+0x28>
 8007c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c42:	e7f8      	b.n	8007c36 <memmove+0x12>
 8007c44:	4601      	mov	r1, r0
 8007c46:	4402      	add	r2, r0
 8007c48:	428a      	cmp	r2, r1
 8007c4a:	d100      	bne.n	8007c4e <memmove+0x2a>
 8007c4c:	bd10      	pop	{r4, pc}
 8007c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c56:	e7f7      	b.n	8007c48 <memmove+0x24>

08007c58 <__malloc_lock>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__malloc_lock+0x8>)
 8007c5a:	f000 bc15 	b.w	8008488 <__retarget_lock_acquire_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20000464 	.word	0x20000464

08007c64 <__malloc_unlock>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__malloc_unlock+0x8>)
 8007c66:	f000 bc10 	b.w	800848a <__retarget_lock_release_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	20000464 	.word	0x20000464

08007c70 <_realloc_r>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	4607      	mov	r7, r0
 8007c74:	4614      	mov	r4, r2
 8007c76:	460e      	mov	r6, r1
 8007c78:	b921      	cbnz	r1, 8007c84 <_realloc_r+0x14>
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c80:	f7ff bdc8 	b.w	8007814 <_malloc_r>
 8007c84:	b922      	cbnz	r2, 8007c90 <_realloc_r+0x20>
 8007c86:	f7ff fd79 	bl	800777c <_free_r>
 8007c8a:	4625      	mov	r5, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c90:	f000 fc60 	bl	8008554 <_malloc_usable_size_r>
 8007c94:	42a0      	cmp	r0, r4
 8007c96:	d20f      	bcs.n	8007cb8 <_realloc_r+0x48>
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f7ff fdba 	bl	8007814 <_malloc_r>
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d0f2      	beq.n	8007c8c <_realloc_r+0x1c>
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4622      	mov	r2, r4
 8007caa:	f7ff f9c9 	bl	8007040 <memcpy>
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f7ff fd63 	bl	800777c <_free_r>
 8007cb6:	e7e9      	b.n	8007c8c <_realloc_r+0x1c>
 8007cb8:	4635      	mov	r5, r6
 8007cba:	e7e7      	b.n	8007c8c <_realloc_r+0x1c>

08007cbc <__sfputc_r>:
 8007cbc:	6893      	ldr	r3, [r2, #8]
 8007cbe:	b410      	push	{r4}
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	6093      	str	r3, [r2, #8]
 8007cc6:	da07      	bge.n	8007cd8 <__sfputc_r+0x1c>
 8007cc8:	6994      	ldr	r4, [r2, #24]
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	db01      	blt.n	8007cd2 <__sfputc_r+0x16>
 8007cce:	290a      	cmp	r1, #10
 8007cd0:	d102      	bne.n	8007cd8 <__sfputc_r+0x1c>
 8007cd2:	bc10      	pop	{r4}
 8007cd4:	f000 b94a 	b.w	8007f6c <__swbuf_r>
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	1c58      	adds	r0, r3, #1
 8007cdc:	6010      	str	r0, [r2, #0]
 8007cde:	7019      	strb	r1, [r3, #0]
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	bc10      	pop	{r4}
 8007ce4:	4770      	bx	lr

08007ce6 <__sfputs_r>:
 8007ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce8:	4606      	mov	r6, r0
 8007cea:	460f      	mov	r7, r1
 8007cec:	4614      	mov	r4, r2
 8007cee:	18d5      	adds	r5, r2, r3
 8007cf0:	42ac      	cmp	r4, r5
 8007cf2:	d101      	bne.n	8007cf8 <__sfputs_r+0x12>
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e007      	b.n	8007d08 <__sfputs_r+0x22>
 8007cf8:	463a      	mov	r2, r7
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	f7ff ffdc 	bl	8007cbc <__sfputc_r>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d1f3      	bne.n	8007cf0 <__sfputs_r+0xa>
 8007d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d0c <_vfiprintf_r>:
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	460d      	mov	r5, r1
 8007d12:	4614      	mov	r4, r2
 8007d14:	4698      	mov	r8, r3
 8007d16:	4606      	mov	r6, r0
 8007d18:	b09d      	sub	sp, #116	; 0x74
 8007d1a:	b118      	cbz	r0, 8007d24 <_vfiprintf_r+0x18>
 8007d1c:	6983      	ldr	r3, [r0, #24]
 8007d1e:	b90b      	cbnz	r3, 8007d24 <_vfiprintf_r+0x18>
 8007d20:	f000 fb14 	bl	800834c <__sinit>
 8007d24:	4b89      	ldr	r3, [pc, #548]	; (8007f4c <_vfiprintf_r+0x240>)
 8007d26:	429d      	cmp	r5, r3
 8007d28:	d11b      	bne.n	8007d62 <_vfiprintf_r+0x56>
 8007d2a:	6875      	ldr	r5, [r6, #4]
 8007d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d2e:	07d9      	lsls	r1, r3, #31
 8007d30:	d405      	bmi.n	8007d3e <_vfiprintf_r+0x32>
 8007d32:	89ab      	ldrh	r3, [r5, #12]
 8007d34:	059a      	lsls	r2, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_vfiprintf_r+0x32>
 8007d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3a:	f000 fba5 	bl	8008488 <__retarget_lock_acquire_recursive>
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	071b      	lsls	r3, r3, #28
 8007d42:	d501      	bpl.n	8007d48 <_vfiprintf_r+0x3c>
 8007d44:	692b      	ldr	r3, [r5, #16]
 8007d46:	b9eb      	cbnz	r3, 8007d84 <_vfiprintf_r+0x78>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f000 f96e 	bl	800802c <__swsetup_r>
 8007d50:	b1c0      	cbz	r0, 8007d84 <_vfiprintf_r+0x78>
 8007d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d54:	07dc      	lsls	r4, r3, #31
 8007d56:	d50e      	bpl.n	8007d76 <_vfiprintf_r+0x6a>
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	b01d      	add	sp, #116	; 0x74
 8007d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d62:	4b7b      	ldr	r3, [pc, #492]	; (8007f50 <_vfiprintf_r+0x244>)
 8007d64:	429d      	cmp	r5, r3
 8007d66:	d101      	bne.n	8007d6c <_vfiprintf_r+0x60>
 8007d68:	68b5      	ldr	r5, [r6, #8]
 8007d6a:	e7df      	b.n	8007d2c <_vfiprintf_r+0x20>
 8007d6c:	4b79      	ldr	r3, [pc, #484]	; (8007f54 <_vfiprintf_r+0x248>)
 8007d6e:	429d      	cmp	r5, r3
 8007d70:	bf08      	it	eq
 8007d72:	68f5      	ldreq	r5, [r6, #12]
 8007d74:	e7da      	b.n	8007d2c <_vfiprintf_r+0x20>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	0598      	lsls	r0, r3, #22
 8007d7a:	d4ed      	bmi.n	8007d58 <_vfiprintf_r+0x4c>
 8007d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7e:	f000 fb84 	bl	800848a <__retarget_lock_release_recursive>
 8007d82:	e7e9      	b.n	8007d58 <_vfiprintf_r+0x4c>
 8007d84:	2300      	movs	r3, #0
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	2320      	movs	r3, #32
 8007d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d8e:	2330      	movs	r3, #48	; 0x30
 8007d90:	f04f 0901 	mov.w	r9, #1
 8007d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f58 <_vfiprintf_r+0x24c>
 8007d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da0:	4623      	mov	r3, r4
 8007da2:	469a      	mov	sl, r3
 8007da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da8:	b10a      	cbz	r2, 8007dae <_vfiprintf_r+0xa2>
 8007daa:	2a25      	cmp	r2, #37	; 0x25
 8007dac:	d1f9      	bne.n	8007da2 <_vfiprintf_r+0x96>
 8007dae:	ebba 0b04 	subs.w	fp, sl, r4
 8007db2:	d00b      	beq.n	8007dcc <_vfiprintf_r+0xc0>
 8007db4:	465b      	mov	r3, fp
 8007db6:	4622      	mov	r2, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ff93 	bl	8007ce6 <__sfputs_r>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f000 80aa 	beq.w	8007f1a <_vfiprintf_r+0x20e>
 8007dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc8:	445a      	add	r2, fp
 8007dca:	9209      	str	r2, [sp, #36]	; 0x24
 8007dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80a2 	beq.w	8007f1a <_vfiprintf_r+0x20e>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de0:	f10a 0a01 	add.w	sl, sl, #1
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dec:	931a      	str	r3, [sp, #104]	; 0x68
 8007dee:	4654      	mov	r4, sl
 8007df0:	2205      	movs	r2, #5
 8007df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df6:	4858      	ldr	r0, [pc, #352]	; (8007f58 <_vfiprintf_r+0x24c>)
 8007df8:	f7ff f914 	bl	8007024 <memchr>
 8007dfc:	9a04      	ldr	r2, [sp, #16]
 8007dfe:	b9d8      	cbnz	r0, 8007e38 <_vfiprintf_r+0x12c>
 8007e00:	06d1      	lsls	r1, r2, #27
 8007e02:	bf44      	itt	mi
 8007e04:	2320      	movmi	r3, #32
 8007e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0a:	0713      	lsls	r3, r2, #28
 8007e0c:	bf44      	itt	mi
 8007e0e:	232b      	movmi	r3, #43	; 0x2b
 8007e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e14:	f89a 3000 	ldrb.w	r3, [sl]
 8007e18:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1a:	d015      	beq.n	8007e48 <_vfiprintf_r+0x13c>
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f04f 0c0a 	mov.w	ip, #10
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4621      	mov	r1, r4
 8007e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2c:	3b30      	subs	r3, #48	; 0x30
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d94e      	bls.n	8007ed0 <_vfiprintf_r+0x1c4>
 8007e32:	b1b0      	cbz	r0, 8007e62 <_vfiprintf_r+0x156>
 8007e34:	9207      	str	r2, [sp, #28]
 8007e36:	e014      	b.n	8007e62 <_vfiprintf_r+0x156>
 8007e38:	eba0 0308 	sub.w	r3, r0, r8
 8007e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	46a2      	mov	sl, r4
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	e7d2      	b.n	8007dee <_vfiprintf_r+0xe2>
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	1d19      	adds	r1, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	9103      	str	r1, [sp, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bfbb      	ittet	lt
 8007e54:	425b      	neglt	r3, r3
 8007e56:	f042 0202 	orrlt.w	r2, r2, #2
 8007e5a:	9307      	strge	r3, [sp, #28]
 8007e5c:	9307      	strlt	r3, [sp, #28]
 8007e5e:	bfb8      	it	lt
 8007e60:	9204      	strlt	r2, [sp, #16]
 8007e62:	7823      	ldrb	r3, [r4, #0]
 8007e64:	2b2e      	cmp	r3, #46	; 0x2e
 8007e66:	d10c      	bne.n	8007e82 <_vfiprintf_r+0x176>
 8007e68:	7863      	ldrb	r3, [r4, #1]
 8007e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6c:	d135      	bne.n	8007eda <_vfiprintf_r+0x1ce>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	3402      	adds	r4, #2
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9203      	str	r2, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfb8      	it	lt
 8007e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f68 <_vfiprintf_r+0x25c>
 8007e86:	2203      	movs	r2, #3
 8007e88:	4650      	mov	r0, sl
 8007e8a:	7821      	ldrb	r1, [r4, #0]
 8007e8c:	f7ff f8ca 	bl	8007024 <memchr>
 8007e90:	b140      	cbz	r0, 8007ea4 <_vfiprintf_r+0x198>
 8007e92:	2340      	movs	r3, #64	; 0x40
 8007e94:	eba0 000a 	sub.w	r0, r0, sl
 8007e98:	fa03 f000 	lsl.w	r0, r3, r0
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	4303      	orrs	r3, r0
 8007ea2:	9304      	str	r3, [sp, #16]
 8007ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	482c      	ldr	r0, [pc, #176]	; (8007f5c <_vfiprintf_r+0x250>)
 8007eac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eb0:	f7ff f8b8 	bl	8007024 <memchr>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d03f      	beq.n	8007f38 <_vfiprintf_r+0x22c>
 8007eb8:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <_vfiprintf_r+0x254>)
 8007eba:	bb1b      	cbnz	r3, 8007f04 <_vfiprintf_r+0x1f8>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	3307      	adds	r3, #7
 8007ec0:	f023 0307 	bic.w	r3, r3, #7
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	443b      	add	r3, r7
 8007ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ece:	e767      	b.n	8007da0 <_vfiprintf_r+0x94>
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed8:	e7a5      	b.n	8007e26 <_vfiprintf_r+0x11a>
 8007eda:	2300      	movs	r3, #0
 8007edc:	f04f 0c0a 	mov.w	ip, #10
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	3401      	adds	r4, #1
 8007ee4:	9305      	str	r3, [sp, #20]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eec:	3a30      	subs	r2, #48	; 0x30
 8007eee:	2a09      	cmp	r2, #9
 8007ef0:	d903      	bls.n	8007efa <_vfiprintf_r+0x1ee>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0c5      	beq.n	8007e82 <_vfiprintf_r+0x176>
 8007ef6:	9105      	str	r1, [sp, #20]
 8007ef8:	e7c3      	b.n	8007e82 <_vfiprintf_r+0x176>
 8007efa:	4604      	mov	r4, r0
 8007efc:	2301      	movs	r3, #1
 8007efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f02:	e7f0      	b.n	8007ee6 <_vfiprintf_r+0x1da>
 8007f04:	ab03      	add	r3, sp, #12
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <_vfiprintf_r+0x258>)
 8007f0e:	a904      	add	r1, sp, #16
 8007f10:	f7fd fe1e 	bl	8005b50 <_printf_float>
 8007f14:	4607      	mov	r7, r0
 8007f16:	1c78      	adds	r0, r7, #1
 8007f18:	d1d6      	bne.n	8007ec8 <_vfiprintf_r+0x1bc>
 8007f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f1c:	07d9      	lsls	r1, r3, #31
 8007f1e:	d405      	bmi.n	8007f2c <_vfiprintf_r+0x220>
 8007f20:	89ab      	ldrh	r3, [r5, #12]
 8007f22:	059a      	lsls	r2, r3, #22
 8007f24:	d402      	bmi.n	8007f2c <_vfiprintf_r+0x220>
 8007f26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f28:	f000 faaf 	bl	800848a <__retarget_lock_release_recursive>
 8007f2c:	89ab      	ldrh	r3, [r5, #12]
 8007f2e:	065b      	lsls	r3, r3, #25
 8007f30:	f53f af12 	bmi.w	8007d58 <_vfiprintf_r+0x4c>
 8007f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f36:	e711      	b.n	8007d5c <_vfiprintf_r+0x50>
 8007f38:	ab03      	add	r3, sp, #12
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	462a      	mov	r2, r5
 8007f3e:	4630      	mov	r0, r6
 8007f40:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <_vfiprintf_r+0x258>)
 8007f42:	a904      	add	r1, sp, #16
 8007f44:	f7fe f8a0 	bl	8006088 <_printf_i>
 8007f48:	e7e4      	b.n	8007f14 <_vfiprintf_r+0x208>
 8007f4a:	bf00      	nop
 8007f4c:	0800914c 	.word	0x0800914c
 8007f50:	0800916c 	.word	0x0800916c
 8007f54:	0800912c 	.word	0x0800912c
 8007f58:	08008fd4 	.word	0x08008fd4
 8007f5c:	08008fde 	.word	0x08008fde
 8007f60:	08005b51 	.word	0x08005b51
 8007f64:	08007ce7 	.word	0x08007ce7
 8007f68:	08008fda 	.word	0x08008fda

08007f6c <__swbuf_r>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	460e      	mov	r6, r1
 8007f70:	4614      	mov	r4, r2
 8007f72:	4605      	mov	r5, r0
 8007f74:	b118      	cbz	r0, 8007f7e <__swbuf_r+0x12>
 8007f76:	6983      	ldr	r3, [r0, #24]
 8007f78:	b90b      	cbnz	r3, 8007f7e <__swbuf_r+0x12>
 8007f7a:	f000 f9e7 	bl	800834c <__sinit>
 8007f7e:	4b21      	ldr	r3, [pc, #132]	; (8008004 <__swbuf_r+0x98>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	d12b      	bne.n	8007fdc <__swbuf_r+0x70>
 8007f84:	686c      	ldr	r4, [r5, #4]
 8007f86:	69a3      	ldr	r3, [r4, #24]
 8007f88:	60a3      	str	r3, [r4, #8]
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	071a      	lsls	r2, r3, #28
 8007f8e:	d52f      	bpl.n	8007ff0 <__swbuf_r+0x84>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	b36b      	cbz	r3, 8007ff0 <__swbuf_r+0x84>
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	b2f6      	uxtb	r6, r6
 8007f9a:	1ac0      	subs	r0, r0, r3
 8007f9c:	6963      	ldr	r3, [r4, #20]
 8007f9e:	4637      	mov	r7, r6
 8007fa0:	4283      	cmp	r3, r0
 8007fa2:	dc04      	bgt.n	8007fae <__swbuf_r+0x42>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f93c 	bl	8008224 <_fflush_r>
 8007fac:	bb30      	cbnz	r0, 8007ffc <__swbuf_r+0x90>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	60a3      	str	r3, [r4, #8]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	6022      	str	r2, [r4, #0]
 8007fbc:	701e      	strb	r6, [r3, #0]
 8007fbe:	6963      	ldr	r3, [r4, #20]
 8007fc0:	4283      	cmp	r3, r0
 8007fc2:	d004      	beq.n	8007fce <__swbuf_r+0x62>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d506      	bpl.n	8007fd8 <__swbuf_r+0x6c>
 8007fca:	2e0a      	cmp	r6, #10
 8007fcc:	d104      	bne.n	8007fd8 <__swbuf_r+0x6c>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 f927 	bl	8008224 <_fflush_r>
 8007fd6:	b988      	cbnz	r0, 8007ffc <__swbuf_r+0x90>
 8007fd8:	4638      	mov	r0, r7
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <__swbuf_r+0x9c>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d101      	bne.n	8007fe6 <__swbuf_r+0x7a>
 8007fe2:	68ac      	ldr	r4, [r5, #8]
 8007fe4:	e7cf      	b.n	8007f86 <__swbuf_r+0x1a>
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <__swbuf_r+0xa0>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	bf08      	it	eq
 8007fec:	68ec      	ldreq	r4, [r5, #12]
 8007fee:	e7ca      	b.n	8007f86 <__swbuf_r+0x1a>
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f81a 	bl	800802c <__swsetup_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0cb      	beq.n	8007f94 <__swbuf_r+0x28>
 8007ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8008000:	e7ea      	b.n	8007fd8 <__swbuf_r+0x6c>
 8008002:	bf00      	nop
 8008004:	0800914c 	.word	0x0800914c
 8008008:	0800916c 	.word	0x0800916c
 800800c:	0800912c 	.word	0x0800912c

08008010 <__ascii_wctomb>:
 8008010:	4603      	mov	r3, r0
 8008012:	4608      	mov	r0, r1
 8008014:	b141      	cbz	r1, 8008028 <__ascii_wctomb+0x18>
 8008016:	2aff      	cmp	r2, #255	; 0xff
 8008018:	d904      	bls.n	8008024 <__ascii_wctomb+0x14>
 800801a:	228a      	movs	r2, #138	; 0x8a
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	4770      	bx	lr
 8008024:	2001      	movs	r0, #1
 8008026:	700a      	strb	r2, [r1, #0]
 8008028:	4770      	bx	lr
	...

0800802c <__swsetup_r>:
 800802c:	4b32      	ldr	r3, [pc, #200]	; (80080f8 <__swsetup_r+0xcc>)
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	681d      	ldr	r5, [r3, #0]
 8008032:	4606      	mov	r6, r0
 8008034:	460c      	mov	r4, r1
 8008036:	b125      	cbz	r5, 8008042 <__swsetup_r+0x16>
 8008038:	69ab      	ldr	r3, [r5, #24]
 800803a:	b913      	cbnz	r3, 8008042 <__swsetup_r+0x16>
 800803c:	4628      	mov	r0, r5
 800803e:	f000 f985 	bl	800834c <__sinit>
 8008042:	4b2e      	ldr	r3, [pc, #184]	; (80080fc <__swsetup_r+0xd0>)
 8008044:	429c      	cmp	r4, r3
 8008046:	d10f      	bne.n	8008068 <__swsetup_r+0x3c>
 8008048:	686c      	ldr	r4, [r5, #4]
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008050:	0719      	lsls	r1, r3, #28
 8008052:	d42c      	bmi.n	80080ae <__swsetup_r+0x82>
 8008054:	06dd      	lsls	r5, r3, #27
 8008056:	d411      	bmi.n	800807c <__swsetup_r+0x50>
 8008058:	2309      	movs	r3, #9
 800805a:	6033      	str	r3, [r6, #0]
 800805c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e03e      	b.n	80080e6 <__swsetup_r+0xba>
 8008068:	4b25      	ldr	r3, [pc, #148]	; (8008100 <__swsetup_r+0xd4>)
 800806a:	429c      	cmp	r4, r3
 800806c:	d101      	bne.n	8008072 <__swsetup_r+0x46>
 800806e:	68ac      	ldr	r4, [r5, #8]
 8008070:	e7eb      	b.n	800804a <__swsetup_r+0x1e>
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <__swsetup_r+0xd8>)
 8008074:	429c      	cmp	r4, r3
 8008076:	bf08      	it	eq
 8008078:	68ec      	ldreq	r4, [r5, #12]
 800807a:	e7e6      	b.n	800804a <__swsetup_r+0x1e>
 800807c:	0758      	lsls	r0, r3, #29
 800807e:	d512      	bpl.n	80080a6 <__swsetup_r+0x7a>
 8008080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008082:	b141      	cbz	r1, 8008096 <__swsetup_r+0x6a>
 8008084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008088:	4299      	cmp	r1, r3
 800808a:	d002      	beq.n	8008092 <__swsetup_r+0x66>
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff fb75 	bl	800777c <_free_r>
 8008092:	2300      	movs	r3, #0
 8008094:	6363      	str	r3, [r4, #52]	; 0x34
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	2300      	movs	r3, #0
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f043 0308 	orr.w	r3, r3, #8
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	6923      	ldr	r3, [r4, #16]
 80080b0:	b94b      	cbnz	r3, 80080c6 <__swsetup_r+0x9a>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d003      	beq.n	80080c6 <__swsetup_r+0x9a>
 80080be:	4621      	mov	r1, r4
 80080c0:	4630      	mov	r0, r6
 80080c2:	f000 fa07 	bl	80084d4 <__smakebuf_r>
 80080c6:	89a0      	ldrh	r0, [r4, #12]
 80080c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080cc:	f010 0301 	ands.w	r3, r0, #1
 80080d0:	d00a      	beq.n	80080e8 <__swsetup_r+0xbc>
 80080d2:	2300      	movs	r3, #0
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	425b      	negs	r3, r3
 80080da:	61a3      	str	r3, [r4, #24]
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b943      	cbnz	r3, 80080f2 <__swsetup_r+0xc6>
 80080e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080e4:	d1ba      	bne.n	800805c <__swsetup_r+0x30>
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	0781      	lsls	r1, r0, #30
 80080ea:	bf58      	it	pl
 80080ec:	6963      	ldrpl	r3, [r4, #20]
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	e7f4      	b.n	80080dc <__swsetup_r+0xb0>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7f7      	b.n	80080e6 <__swsetup_r+0xba>
 80080f6:	bf00      	nop
 80080f8:	20000018 	.word	0x20000018
 80080fc:	0800914c 	.word	0x0800914c
 8008100:	0800916c 	.word	0x0800916c
 8008104:	0800912c 	.word	0x0800912c

08008108 <abort>:
 8008108:	2006      	movs	r0, #6
 800810a:	b508      	push	{r3, lr}
 800810c:	f000 fa52 	bl	80085b4 <raise>
 8008110:	2001      	movs	r0, #1
 8008112:	f7f9 fece 	bl	8001eb2 <_exit>
	...

08008118 <__sflush_r>:
 8008118:	898a      	ldrh	r2, [r1, #12]
 800811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	4605      	mov	r5, r0
 8008120:	0710      	lsls	r0, r2, #28
 8008122:	460c      	mov	r4, r1
 8008124:	d458      	bmi.n	80081d8 <__sflush_r+0xc0>
 8008126:	684b      	ldr	r3, [r1, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	dc05      	bgt.n	8008138 <__sflush_r+0x20>
 800812c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	dc02      	bgt.n	8008138 <__sflush_r+0x20>
 8008132:	2000      	movs	r0, #0
 8008134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800813a:	2e00      	cmp	r6, #0
 800813c:	d0f9      	beq.n	8008132 <__sflush_r+0x1a>
 800813e:	2300      	movs	r3, #0
 8008140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008144:	682f      	ldr	r7, [r5, #0]
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	d032      	beq.n	80081b0 <__sflush_r+0x98>
 800814a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	075a      	lsls	r2, r3, #29
 8008150:	d505      	bpl.n	800815e <__sflush_r+0x46>
 8008152:	6863      	ldr	r3, [r4, #4]
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008158:	b10b      	cbz	r3, 800815e <__sflush_r+0x46>
 800815a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800815c:	1ac0      	subs	r0, r0, r3
 800815e:	2300      	movs	r3, #0
 8008160:	4602      	mov	r2, r0
 8008162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008164:	4628      	mov	r0, r5
 8008166:	6a21      	ldr	r1, [r4, #32]
 8008168:	47b0      	blx	r6
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	d106      	bne.n	800817e <__sflush_r+0x66>
 8008170:	6829      	ldr	r1, [r5, #0]
 8008172:	291d      	cmp	r1, #29
 8008174:	d82c      	bhi.n	80081d0 <__sflush_r+0xb8>
 8008176:	4a2a      	ldr	r2, [pc, #168]	; (8008220 <__sflush_r+0x108>)
 8008178:	40ca      	lsrs	r2, r1
 800817a:	07d6      	lsls	r6, r2, #31
 800817c:	d528      	bpl.n	80081d0 <__sflush_r+0xb8>
 800817e:	2200      	movs	r2, #0
 8008180:	6062      	str	r2, [r4, #4]
 8008182:	6922      	ldr	r2, [r4, #16]
 8008184:	04d9      	lsls	r1, r3, #19
 8008186:	6022      	str	r2, [r4, #0]
 8008188:	d504      	bpl.n	8008194 <__sflush_r+0x7c>
 800818a:	1c42      	adds	r2, r0, #1
 800818c:	d101      	bne.n	8008192 <__sflush_r+0x7a>
 800818e:	682b      	ldr	r3, [r5, #0]
 8008190:	b903      	cbnz	r3, 8008194 <__sflush_r+0x7c>
 8008192:	6560      	str	r0, [r4, #84]	; 0x54
 8008194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008196:	602f      	str	r7, [r5, #0]
 8008198:	2900      	cmp	r1, #0
 800819a:	d0ca      	beq.n	8008132 <__sflush_r+0x1a>
 800819c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081a0:	4299      	cmp	r1, r3
 80081a2:	d002      	beq.n	80081aa <__sflush_r+0x92>
 80081a4:	4628      	mov	r0, r5
 80081a6:	f7ff fae9 	bl	800777c <_free_r>
 80081aa:	2000      	movs	r0, #0
 80081ac:	6360      	str	r0, [r4, #52]	; 0x34
 80081ae:	e7c1      	b.n	8008134 <__sflush_r+0x1c>
 80081b0:	6a21      	ldr	r1, [r4, #32]
 80081b2:	2301      	movs	r3, #1
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b0      	blx	r6
 80081b8:	1c41      	adds	r1, r0, #1
 80081ba:	d1c7      	bne.n	800814c <__sflush_r+0x34>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0c4      	beq.n	800814c <__sflush_r+0x34>
 80081c2:	2b1d      	cmp	r3, #29
 80081c4:	d001      	beq.n	80081ca <__sflush_r+0xb2>
 80081c6:	2b16      	cmp	r3, #22
 80081c8:	d101      	bne.n	80081ce <__sflush_r+0xb6>
 80081ca:	602f      	str	r7, [r5, #0]
 80081cc:	e7b1      	b.n	8008132 <__sflush_r+0x1a>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	e7ad      	b.n	8008134 <__sflush_r+0x1c>
 80081d8:	690f      	ldr	r7, [r1, #16]
 80081da:	2f00      	cmp	r7, #0
 80081dc:	d0a9      	beq.n	8008132 <__sflush_r+0x1a>
 80081de:	0793      	lsls	r3, r2, #30
 80081e0:	bf18      	it	ne
 80081e2:	2300      	movne	r3, #0
 80081e4:	680e      	ldr	r6, [r1, #0]
 80081e6:	bf08      	it	eq
 80081e8:	694b      	ldreq	r3, [r1, #20]
 80081ea:	eba6 0807 	sub.w	r8, r6, r7
 80081ee:	600f      	str	r7, [r1, #0]
 80081f0:	608b      	str	r3, [r1, #8]
 80081f2:	f1b8 0f00 	cmp.w	r8, #0
 80081f6:	dd9c      	ble.n	8008132 <__sflush_r+0x1a>
 80081f8:	4643      	mov	r3, r8
 80081fa:	463a      	mov	r2, r7
 80081fc:	4628      	mov	r0, r5
 80081fe:	6a21      	ldr	r1, [r4, #32]
 8008200:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008202:	47b0      	blx	r6
 8008204:	2800      	cmp	r0, #0
 8008206:	dc06      	bgt.n	8008216 <__sflush_r+0xfe>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	e78e      	b.n	8008134 <__sflush_r+0x1c>
 8008216:	4407      	add	r7, r0
 8008218:	eba8 0800 	sub.w	r8, r8, r0
 800821c:	e7e9      	b.n	80081f2 <__sflush_r+0xda>
 800821e:	bf00      	nop
 8008220:	20400001 	.word	0x20400001

08008224 <_fflush_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	690b      	ldr	r3, [r1, #16]
 8008228:	4605      	mov	r5, r0
 800822a:	460c      	mov	r4, r1
 800822c:	b913      	cbnz	r3, 8008234 <_fflush_r+0x10>
 800822e:	2500      	movs	r5, #0
 8008230:	4628      	mov	r0, r5
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	b118      	cbz	r0, 800823e <_fflush_r+0x1a>
 8008236:	6983      	ldr	r3, [r0, #24]
 8008238:	b90b      	cbnz	r3, 800823e <_fflush_r+0x1a>
 800823a:	f000 f887 	bl	800834c <__sinit>
 800823e:	4b14      	ldr	r3, [pc, #80]	; (8008290 <_fflush_r+0x6c>)
 8008240:	429c      	cmp	r4, r3
 8008242:	d11b      	bne.n	800827c <_fflush_r+0x58>
 8008244:	686c      	ldr	r4, [r5, #4]
 8008246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0ef      	beq.n	800822e <_fflush_r+0xa>
 800824e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008250:	07d0      	lsls	r0, r2, #31
 8008252:	d404      	bmi.n	800825e <_fflush_r+0x3a>
 8008254:	0599      	lsls	r1, r3, #22
 8008256:	d402      	bmi.n	800825e <_fflush_r+0x3a>
 8008258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825a:	f000 f915 	bl	8008488 <__retarget_lock_acquire_recursive>
 800825e:	4628      	mov	r0, r5
 8008260:	4621      	mov	r1, r4
 8008262:	f7ff ff59 	bl	8008118 <__sflush_r>
 8008266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008268:	4605      	mov	r5, r0
 800826a:	07da      	lsls	r2, r3, #31
 800826c:	d4e0      	bmi.n	8008230 <_fflush_r+0xc>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	059b      	lsls	r3, r3, #22
 8008272:	d4dd      	bmi.n	8008230 <_fflush_r+0xc>
 8008274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008276:	f000 f908 	bl	800848a <__retarget_lock_release_recursive>
 800827a:	e7d9      	b.n	8008230 <_fflush_r+0xc>
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <_fflush_r+0x70>)
 800827e:	429c      	cmp	r4, r3
 8008280:	d101      	bne.n	8008286 <_fflush_r+0x62>
 8008282:	68ac      	ldr	r4, [r5, #8]
 8008284:	e7df      	b.n	8008246 <_fflush_r+0x22>
 8008286:	4b04      	ldr	r3, [pc, #16]	; (8008298 <_fflush_r+0x74>)
 8008288:	429c      	cmp	r4, r3
 800828a:	bf08      	it	eq
 800828c:	68ec      	ldreq	r4, [r5, #12]
 800828e:	e7da      	b.n	8008246 <_fflush_r+0x22>
 8008290:	0800914c 	.word	0x0800914c
 8008294:	0800916c 	.word	0x0800916c
 8008298:	0800912c 	.word	0x0800912c

0800829c <std>:
 800829c:	2300      	movs	r3, #0
 800829e:	b510      	push	{r4, lr}
 80082a0:	4604      	mov	r4, r0
 80082a2:	e9c0 3300 	strd	r3, r3, [r0]
 80082a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082aa:	6083      	str	r3, [r0, #8]
 80082ac:	8181      	strh	r1, [r0, #12]
 80082ae:	6643      	str	r3, [r0, #100]	; 0x64
 80082b0:	81c2      	strh	r2, [r0, #14]
 80082b2:	6183      	str	r3, [r0, #24]
 80082b4:	4619      	mov	r1, r3
 80082b6:	2208      	movs	r2, #8
 80082b8:	305c      	adds	r0, #92	; 0x5c
 80082ba:	f7fd fba3 	bl	8005a04 <memset>
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x38>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	6263      	str	r3, [r4, #36]	; 0x24
 80082c4:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <std+0x3c>)
 80082c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80082c8:	4b04      	ldr	r3, [pc, #16]	; (80082dc <std+0x40>)
 80082ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <std+0x44>)
 80082ce:	6323      	str	r3, [r4, #48]	; 0x30
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	bf00      	nop
 80082d4:	080085ed 	.word	0x080085ed
 80082d8:	0800860f 	.word	0x0800860f
 80082dc:	08008647 	.word	0x08008647
 80082e0:	0800866b 	.word	0x0800866b

080082e4 <_cleanup_r>:
 80082e4:	4901      	ldr	r1, [pc, #4]	; (80082ec <_cleanup_r+0x8>)
 80082e6:	f000 b8af 	b.w	8008448 <_fwalk_reent>
 80082ea:	bf00      	nop
 80082ec:	08008225 	.word	0x08008225

080082f0 <__sfmoreglue>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	2568      	movs	r5, #104	; 0x68
 80082f4:	1e4a      	subs	r2, r1, #1
 80082f6:	4355      	muls	r5, r2
 80082f8:	460e      	mov	r6, r1
 80082fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082fe:	f7ff fa89 	bl	8007814 <_malloc_r>
 8008302:	4604      	mov	r4, r0
 8008304:	b140      	cbz	r0, 8008318 <__sfmoreglue+0x28>
 8008306:	2100      	movs	r1, #0
 8008308:	e9c0 1600 	strd	r1, r6, [r0]
 800830c:	300c      	adds	r0, #12
 800830e:	60a0      	str	r0, [r4, #8]
 8008310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008314:	f7fd fb76 	bl	8005a04 <memset>
 8008318:	4620      	mov	r0, r4
 800831a:	bd70      	pop	{r4, r5, r6, pc}

0800831c <__sfp_lock_acquire>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sfp_lock_acquire+0x8>)
 800831e:	f000 b8b3 	b.w	8008488 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20000468 	.word	0x20000468

08008328 <__sfp_lock_release>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sfp_lock_release+0x8>)
 800832a:	f000 b8ae 	b.w	800848a <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20000468 	.word	0x20000468

08008334 <__sinit_lock_acquire>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sinit_lock_acquire+0x8>)
 8008336:	f000 b8a7 	b.w	8008488 <__retarget_lock_acquire_recursive>
 800833a:	bf00      	nop
 800833c:	20000463 	.word	0x20000463

08008340 <__sinit_lock_release>:
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__sinit_lock_release+0x8>)
 8008342:	f000 b8a2 	b.w	800848a <__retarget_lock_release_recursive>
 8008346:	bf00      	nop
 8008348:	20000463 	.word	0x20000463

0800834c <__sinit>:
 800834c:	b510      	push	{r4, lr}
 800834e:	4604      	mov	r4, r0
 8008350:	f7ff fff0 	bl	8008334 <__sinit_lock_acquire>
 8008354:	69a3      	ldr	r3, [r4, #24]
 8008356:	b11b      	cbz	r3, 8008360 <__sinit+0x14>
 8008358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800835c:	f7ff bff0 	b.w	8008340 <__sinit_lock_release>
 8008360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008364:	6523      	str	r3, [r4, #80]	; 0x50
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <__sinit+0x68>)
 8008368:	4a13      	ldr	r2, [pc, #76]	; (80083b8 <__sinit+0x6c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	62a2      	str	r2, [r4, #40]	; 0x28
 800836e:	42a3      	cmp	r3, r4
 8008370:	bf08      	it	eq
 8008372:	2301      	moveq	r3, #1
 8008374:	4620      	mov	r0, r4
 8008376:	bf08      	it	eq
 8008378:	61a3      	streq	r3, [r4, #24]
 800837a:	f000 f81f 	bl	80083bc <__sfp>
 800837e:	6060      	str	r0, [r4, #4]
 8008380:	4620      	mov	r0, r4
 8008382:	f000 f81b 	bl	80083bc <__sfp>
 8008386:	60a0      	str	r0, [r4, #8]
 8008388:	4620      	mov	r0, r4
 800838a:	f000 f817 	bl	80083bc <__sfp>
 800838e:	2200      	movs	r2, #0
 8008390:	2104      	movs	r1, #4
 8008392:	60e0      	str	r0, [r4, #12]
 8008394:	6860      	ldr	r0, [r4, #4]
 8008396:	f7ff ff81 	bl	800829c <std>
 800839a:	2201      	movs	r2, #1
 800839c:	2109      	movs	r1, #9
 800839e:	68a0      	ldr	r0, [r4, #8]
 80083a0:	f7ff ff7c 	bl	800829c <std>
 80083a4:	2202      	movs	r2, #2
 80083a6:	2112      	movs	r1, #18
 80083a8:	68e0      	ldr	r0, [r4, #12]
 80083aa:	f7ff ff77 	bl	800829c <std>
 80083ae:	2301      	movs	r3, #1
 80083b0:	61a3      	str	r3, [r4, #24]
 80083b2:	e7d1      	b.n	8008358 <__sinit+0xc>
 80083b4:	08008da8 	.word	0x08008da8
 80083b8:	080082e5 	.word	0x080082e5

080083bc <__sfp>:
 80083bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083be:	4607      	mov	r7, r0
 80083c0:	f7ff ffac 	bl	800831c <__sfp_lock_acquire>
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <__sfp+0x84>)
 80083c6:	681e      	ldr	r6, [r3, #0]
 80083c8:	69b3      	ldr	r3, [r6, #24]
 80083ca:	b913      	cbnz	r3, 80083d2 <__sfp+0x16>
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff ffbd 	bl	800834c <__sinit>
 80083d2:	3648      	adds	r6, #72	; 0x48
 80083d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083d8:	3b01      	subs	r3, #1
 80083da:	d503      	bpl.n	80083e4 <__sfp+0x28>
 80083dc:	6833      	ldr	r3, [r6, #0]
 80083de:	b30b      	cbz	r3, 8008424 <__sfp+0x68>
 80083e0:	6836      	ldr	r6, [r6, #0]
 80083e2:	e7f7      	b.n	80083d4 <__sfp+0x18>
 80083e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083e8:	b9d5      	cbnz	r5, 8008420 <__sfp+0x64>
 80083ea:	4b16      	ldr	r3, [pc, #88]	; (8008444 <__sfp+0x88>)
 80083ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083f0:	60e3      	str	r3, [r4, #12]
 80083f2:	6665      	str	r5, [r4, #100]	; 0x64
 80083f4:	f000 f847 	bl	8008486 <__retarget_lock_init_recursive>
 80083f8:	f7ff ff96 	bl	8008328 <__sfp_lock_release>
 80083fc:	2208      	movs	r2, #8
 80083fe:	4629      	mov	r1, r5
 8008400:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008404:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008408:	6025      	str	r5, [r4, #0]
 800840a:	61a5      	str	r5, [r4, #24]
 800840c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008410:	f7fd faf8 	bl	8005a04 <memset>
 8008414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800841c:	4620      	mov	r0, r4
 800841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008420:	3468      	adds	r4, #104	; 0x68
 8008422:	e7d9      	b.n	80083d8 <__sfp+0x1c>
 8008424:	2104      	movs	r1, #4
 8008426:	4638      	mov	r0, r7
 8008428:	f7ff ff62 	bl	80082f0 <__sfmoreglue>
 800842c:	4604      	mov	r4, r0
 800842e:	6030      	str	r0, [r6, #0]
 8008430:	2800      	cmp	r0, #0
 8008432:	d1d5      	bne.n	80083e0 <__sfp+0x24>
 8008434:	f7ff ff78 	bl	8008328 <__sfp_lock_release>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	e7ee      	b.n	800841c <__sfp+0x60>
 800843e:	bf00      	nop
 8008440:	08008da8 	.word	0x08008da8
 8008444:	ffff0001 	.word	0xffff0001

08008448 <_fwalk_reent>:
 8008448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800844c:	4606      	mov	r6, r0
 800844e:	4688      	mov	r8, r1
 8008450:	2700      	movs	r7, #0
 8008452:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800845a:	f1b9 0901 	subs.w	r9, r9, #1
 800845e:	d505      	bpl.n	800846c <_fwalk_reent+0x24>
 8008460:	6824      	ldr	r4, [r4, #0]
 8008462:	2c00      	cmp	r4, #0
 8008464:	d1f7      	bne.n	8008456 <_fwalk_reent+0xe>
 8008466:	4638      	mov	r0, r7
 8008468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846c:	89ab      	ldrh	r3, [r5, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d907      	bls.n	8008482 <_fwalk_reent+0x3a>
 8008472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008476:	3301      	adds	r3, #1
 8008478:	d003      	beq.n	8008482 <_fwalk_reent+0x3a>
 800847a:	4629      	mov	r1, r5
 800847c:	4630      	mov	r0, r6
 800847e:	47c0      	blx	r8
 8008480:	4307      	orrs	r7, r0
 8008482:	3568      	adds	r5, #104	; 0x68
 8008484:	e7e9      	b.n	800845a <_fwalk_reent+0x12>

08008486 <__retarget_lock_init_recursive>:
 8008486:	4770      	bx	lr

08008488 <__retarget_lock_acquire_recursive>:
 8008488:	4770      	bx	lr

0800848a <__retarget_lock_release_recursive>:
 800848a:	4770      	bx	lr

0800848c <__swhatbuf_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	460e      	mov	r6, r1
 8008490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008494:	4614      	mov	r4, r2
 8008496:	2900      	cmp	r1, #0
 8008498:	461d      	mov	r5, r3
 800849a:	b096      	sub	sp, #88	; 0x58
 800849c:	da07      	bge.n	80084ae <__swhatbuf_r+0x22>
 800849e:	2300      	movs	r3, #0
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	89b3      	ldrh	r3, [r6, #12]
 80084a4:	061a      	lsls	r2, r3, #24
 80084a6:	d410      	bmi.n	80084ca <__swhatbuf_r+0x3e>
 80084a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ac:	e00e      	b.n	80084cc <__swhatbuf_r+0x40>
 80084ae:	466a      	mov	r2, sp
 80084b0:	f000 f902 	bl	80086b8 <_fstat_r>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dbf2      	blt.n	800849e <__swhatbuf_r+0x12>
 80084b8:	9a01      	ldr	r2, [sp, #4]
 80084ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084c2:	425a      	negs	r2, r3
 80084c4:	415a      	adcs	r2, r3
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	e7ee      	b.n	80084a8 <__swhatbuf_r+0x1c>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	2000      	movs	r0, #0
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	b016      	add	sp, #88	; 0x58
 80084d2:	bd70      	pop	{r4, r5, r6, pc}

080084d4 <__smakebuf_r>:
 80084d4:	898b      	ldrh	r3, [r1, #12]
 80084d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084d8:	079d      	lsls	r5, r3, #30
 80084da:	4606      	mov	r6, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	d507      	bpl.n	80084f0 <__smakebuf_r+0x1c>
 80084e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	6123      	str	r3, [r4, #16]
 80084e8:	2301      	movs	r3, #1
 80084ea:	6163      	str	r3, [r4, #20]
 80084ec:	b002      	add	sp, #8
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	466a      	mov	r2, sp
 80084f2:	ab01      	add	r3, sp, #4
 80084f4:	f7ff ffca 	bl	800848c <__swhatbuf_r>
 80084f8:	9900      	ldr	r1, [sp, #0]
 80084fa:	4605      	mov	r5, r0
 80084fc:	4630      	mov	r0, r6
 80084fe:	f7ff f989 	bl	8007814 <_malloc_r>
 8008502:	b948      	cbnz	r0, 8008518 <__smakebuf_r+0x44>
 8008504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008508:	059a      	lsls	r2, r3, #22
 800850a:	d4ef      	bmi.n	80084ec <__smakebuf_r+0x18>
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	f043 0302 	orr.w	r3, r3, #2
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	e7e3      	b.n	80084e0 <__smakebuf_r+0xc>
 8008518:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <__smakebuf_r+0x7c>)
 800851a:	62b3      	str	r3, [r6, #40]	; 0x28
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	6120      	str	r0, [r4, #16]
 800852a:	6163      	str	r3, [r4, #20]
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	b15b      	cbz	r3, 8008548 <__smakebuf_r+0x74>
 8008530:	4630      	mov	r0, r6
 8008532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008536:	f000 f8d1 	bl	80086dc <_isatty_r>
 800853a:	b128      	cbz	r0, 8008548 <__smakebuf_r+0x74>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	89a0      	ldrh	r0, [r4, #12]
 800854a:	4305      	orrs	r5, r0
 800854c:	81a5      	strh	r5, [r4, #12]
 800854e:	e7cd      	b.n	80084ec <__smakebuf_r+0x18>
 8008550:	080082e5 	.word	0x080082e5

08008554 <_malloc_usable_size_r>:
 8008554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008558:	1f18      	subs	r0, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfbc      	itt	lt
 800855e:	580b      	ldrlt	r3, [r1, r0]
 8008560:	18c0      	addlt	r0, r0, r3
 8008562:	4770      	bx	lr

08008564 <_raise_r>:
 8008564:	291f      	cmp	r1, #31
 8008566:	b538      	push	{r3, r4, r5, lr}
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	d904      	bls.n	8008578 <_raise_r+0x14>
 800856e:	2316      	movs	r3, #22
 8008570:	6003      	str	r3, [r0, #0]
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800857a:	b112      	cbz	r2, 8008582 <_raise_r+0x1e>
 800857c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008580:	b94b      	cbnz	r3, 8008596 <_raise_r+0x32>
 8008582:	4620      	mov	r0, r4
 8008584:	f000 f830 	bl	80085e8 <_getpid_r>
 8008588:	462a      	mov	r2, r5
 800858a:	4601      	mov	r1, r0
 800858c:	4620      	mov	r0, r4
 800858e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008592:	f000 b817 	b.w	80085c4 <_kill_r>
 8008596:	2b01      	cmp	r3, #1
 8008598:	d00a      	beq.n	80085b0 <_raise_r+0x4c>
 800859a:	1c59      	adds	r1, r3, #1
 800859c:	d103      	bne.n	80085a6 <_raise_r+0x42>
 800859e:	2316      	movs	r3, #22
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	2001      	movs	r0, #1
 80085a4:	e7e7      	b.n	8008576 <_raise_r+0x12>
 80085a6:	2400      	movs	r4, #0
 80085a8:	4628      	mov	r0, r5
 80085aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085ae:	4798      	blx	r3
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7e0      	b.n	8008576 <_raise_r+0x12>

080085b4 <raise>:
 80085b4:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <raise+0xc>)
 80085b6:	4601      	mov	r1, r0
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	f7ff bfd3 	b.w	8008564 <_raise_r>
 80085be:	bf00      	nop
 80085c0:	20000018 	.word	0x20000018

080085c4 <_kill_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	2300      	movs	r3, #0
 80085c8:	4d06      	ldr	r5, [pc, #24]	; (80085e4 <_kill_r+0x20>)
 80085ca:	4604      	mov	r4, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	4611      	mov	r1, r2
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	f7f9 fc5e 	bl	8001e92 <_kill>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	d102      	bne.n	80085e0 <_kill_r+0x1c>
 80085da:	682b      	ldr	r3, [r5, #0]
 80085dc:	b103      	cbz	r3, 80085e0 <_kill_r+0x1c>
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	bd38      	pop	{r3, r4, r5, pc}
 80085e2:	bf00      	nop
 80085e4:	2000045c 	.word	0x2000045c

080085e8 <_getpid_r>:
 80085e8:	f7f9 bc4c 	b.w	8001e84 <_getpid>

080085ec <__sread>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	460c      	mov	r4, r1
 80085f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f4:	f000 f894 	bl	8008720 <_read_r>
 80085f8:	2800      	cmp	r0, #0
 80085fa:	bfab      	itete	ge
 80085fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008600:	181b      	addge	r3, r3, r0
 8008602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008606:	bfac      	ite	ge
 8008608:	6563      	strge	r3, [r4, #84]	; 0x54
 800860a:	81a3      	strhlt	r3, [r4, #12]
 800860c:	bd10      	pop	{r4, pc}

0800860e <__swrite>:
 800860e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008612:	461f      	mov	r7, r3
 8008614:	898b      	ldrh	r3, [r1, #12]
 8008616:	4605      	mov	r5, r0
 8008618:	05db      	lsls	r3, r3, #23
 800861a:	460c      	mov	r4, r1
 800861c:	4616      	mov	r6, r2
 800861e:	d505      	bpl.n	800862c <__swrite+0x1e>
 8008620:	2302      	movs	r3, #2
 8008622:	2200      	movs	r2, #0
 8008624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008628:	f000 f868 	bl	80086fc <_lseek_r>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	4632      	mov	r2, r6
 8008630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	4628      	mov	r0, r5
 8008638:	463b      	mov	r3, r7
 800863a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800863e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	f000 b817 	b.w	8008674 <_write_r>

08008646 <__sseek>:
 8008646:	b510      	push	{r4, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864e:	f000 f855 	bl	80086fc <_lseek_r>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	bf15      	itete	ne
 8008658:	6560      	strne	r0, [r4, #84]	; 0x54
 800865a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800865e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008662:	81a3      	strheq	r3, [r4, #12]
 8008664:	bf18      	it	ne
 8008666:	81a3      	strhne	r3, [r4, #12]
 8008668:	bd10      	pop	{r4, pc}

0800866a <__sclose>:
 800866a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866e:	f000 b813 	b.w	8008698 <_close_r>
	...

08008674 <_write_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	2200      	movs	r2, #0
 800867e:	4d05      	ldr	r5, [pc, #20]	; (8008694 <_write_r+0x20>)
 8008680:	602a      	str	r2, [r5, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	f7f9 fc3c 	bl	8001f00 <_write>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_write_r+0x1e>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_write_r+0x1e>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	2000045c 	.word	0x2000045c

08008698 <_close_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	2300      	movs	r3, #0
 800869c:	4d05      	ldr	r5, [pc, #20]	; (80086b4 <_close_r+0x1c>)
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	f7f9 fc48 	bl	8001f38 <_close>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_close_r+0x1a>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_close_r+0x1a>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	2000045c 	.word	0x2000045c

080086b8 <_fstat_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	2300      	movs	r3, #0
 80086bc:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_fstat_r+0x20>)
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7f9 fc42 	bl	8001f4e <_fstat>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_fstat_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_fstat_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	2000045c 	.word	0x2000045c

080086dc <_isatty_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	2300      	movs	r3, #0
 80086e0:	4d05      	ldr	r5, [pc, #20]	; (80086f8 <_isatty_r+0x1c>)
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7f9 fc40 	bl	8001f6c <_isatty>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_isatty_r+0x1a>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_isatty_r+0x1a>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	2000045c 	.word	0x2000045c

080086fc <_lseek_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	4611      	mov	r1, r2
 8008704:	2200      	movs	r2, #0
 8008706:	4d05      	ldr	r5, [pc, #20]	; (800871c <_lseek_r+0x20>)
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7f9 fc38 	bl	8001f80 <_lseek>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_lseek_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_lseek_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	2000045c 	.word	0x2000045c

08008720 <_read_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	4608      	mov	r0, r1
 8008726:	4611      	mov	r1, r2
 8008728:	2200      	movs	r2, #0
 800872a:	4d05      	ldr	r5, [pc, #20]	; (8008740 <_read_r+0x20>)
 800872c:	602a      	str	r2, [r5, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f7f9 fbc9 	bl	8001ec6 <_read>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_read_r+0x1e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_read_r+0x1e>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	2000045c 	.word	0x2000045c

08008744 <asin>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	4604      	mov	r4, r0
 8008748:	460d      	mov	r5, r1
 800874a:	f000 f855 	bl	80087f8 <__ieee754_asin>
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <asin+0x50>)
 8008750:	4606      	mov	r6, r0
 8008752:	f993 3000 	ldrsb.w	r3, [r3]
 8008756:	460f      	mov	r7, r1
 8008758:	3301      	adds	r3, #1
 800875a:	d018      	beq.n	800878e <asin+0x4a>
 800875c:	4622      	mov	r2, r4
 800875e:	462b      	mov	r3, r5
 8008760:	4620      	mov	r0, r4
 8008762:	4629      	mov	r1, r5
 8008764:	f7f8 f952 	bl	8000a0c <__aeabi_dcmpun>
 8008768:	b988      	cbnz	r0, 800878e <asin+0x4a>
 800876a:	4620      	mov	r0, r4
 800876c:	4629      	mov	r1, r5
 800876e:	f000 faeb 	bl	8008d48 <fabs>
 8008772:	2200      	movs	r2, #0
 8008774:	4b08      	ldr	r3, [pc, #32]	; (8008798 <asin+0x54>)
 8008776:	f7f8 f93f 	bl	80009f8 <__aeabi_dcmpgt>
 800877a:	b140      	cbz	r0, 800878e <asin+0x4a>
 800877c:	f7fd f918 	bl	80059b0 <__errno>
 8008780:	2321      	movs	r3, #33	; 0x21
 8008782:	6003      	str	r3, [r0, #0]
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <asin+0x58>)
 8008786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800878a:	f000 bae1 	b.w	8008d50 <nan>
 800878e:	4630      	mov	r0, r6
 8008790:	4639      	mov	r1, r7
 8008792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008794:	200001e8 	.word	0x200001e8
 8008798:	3ff00000 	.word	0x3ff00000
 800879c:	08009020 	.word	0x08009020

080087a0 <sqrt>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f000 fa23 	bl	8008bf0 <__ieee754_sqrt>
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <sqrt+0x54>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	f993 3000 	ldrsb.w	r3, [r3]
 80087b2:	460d      	mov	r5, r1
 80087b4:	3301      	adds	r3, #1
 80087b6:	d019      	beq.n	80087ec <sqrt+0x4c>
 80087b8:	4632      	mov	r2, r6
 80087ba:	463b      	mov	r3, r7
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f8 f924 	bl	8000a0c <__aeabi_dcmpun>
 80087c4:	b990      	cbnz	r0, 80087ec <sqrt+0x4c>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f8 f8f5 	bl	80009bc <__aeabi_dcmplt>
 80087d2:	b158      	cbz	r0, 80087ec <sqrt+0x4c>
 80087d4:	f7fd f8ec 	bl	80059b0 <__errno>
 80087d8:	2321      	movs	r3, #33	; 0x21
 80087da:	2200      	movs	r2, #0
 80087dc:	6003      	str	r3, [r0, #0]
 80087de:	2300      	movs	r3, #0
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	f7f7 ffa2 	bl	800072c <__aeabi_ddiv>
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200001e8 	.word	0x200001e8

080087f8 <__ieee754_asin>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4bc4      	ldr	r3, [pc, #784]	; (8008b10 <__ieee754_asin+0x318>)
 80087fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008802:	b087      	sub	sp, #28
 8008804:	429e      	cmp	r6, r3
 8008806:	4602      	mov	r2, r0
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	dd29      	ble.n	8008864 <__ieee754_asin+0x6c>
 8008810:	4603      	mov	r3, r0
 8008812:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8008816:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800881a:	4333      	orrs	r3, r6
 800881c:	d114      	bne.n	8008848 <__ieee754_asin+0x50>
 800881e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008aa8 <__ieee754_asin+0x2b0>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f7f7 fe58 	bl	80004d8 <__aeabi_dmul>
 8008828:	a3a1      	add	r3, pc, #644	; (adr r3, 8008ab0 <__ieee754_asin+0x2b8>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	4620      	mov	r0, r4
 8008834:	4629      	mov	r1, r5
 8008836:	f7f7 fe4f 	bl	80004d8 <__aeabi_dmul>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4630      	mov	r0, r6
 8008840:	4639      	mov	r1, r7
 8008842:	f7f7 fc93 	bl	800016c <__adddf3>
 8008846:	e006      	b.n	8008856 <__ieee754_asin+0x5e>
 8008848:	460b      	mov	r3, r1
 800884a:	f7f7 fc8d 	bl	8000168 <__aeabi_dsub>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	f7f7 ff6b 	bl	800072c <__aeabi_ddiv>
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	b007      	add	sp, #28
 8008860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008864:	4bab      	ldr	r3, [pc, #684]	; (8008b14 <__ieee754_asin+0x31c>)
 8008866:	429e      	cmp	r6, r3
 8008868:	dc0e      	bgt.n	8008888 <__ieee754_asin+0x90>
 800886a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800886e:	f280 80ab 	bge.w	80089c8 <__ieee754_asin+0x1d0>
 8008872:	a391      	add	r3, pc, #580	; (adr r3, 8008ab8 <__ieee754_asin+0x2c0>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 fc78 	bl	800016c <__adddf3>
 800887c:	2200      	movs	r2, #0
 800887e:	4ba6      	ldr	r3, [pc, #664]	; (8008b18 <__ieee754_asin+0x320>)
 8008880:	f7f8 f8ba 	bl	80009f8 <__aeabi_dcmpgt>
 8008884:	2800      	cmp	r0, #0
 8008886:	d1e8      	bne.n	800885a <__ieee754_asin+0x62>
 8008888:	4620      	mov	r0, r4
 800888a:	4629      	mov	r1, r5
 800888c:	f000 fa5c 	bl	8008d48 <fabs>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	2000      	movs	r0, #0
 8008896:	49a0      	ldr	r1, [pc, #640]	; (8008b18 <__ieee754_asin+0x320>)
 8008898:	f7f7 fc66 	bl	8000168 <__aeabi_dsub>
 800889c:	2200      	movs	r2, #0
 800889e:	4b9f      	ldr	r3, [pc, #636]	; (8008b1c <__ieee754_asin+0x324>)
 80088a0:	f7f7 fe1a 	bl	80004d8 <__aeabi_dmul>
 80088a4:	a386      	add	r3, pc, #536	; (adr r3, 8008ac0 <__ieee754_asin+0x2c8>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	4604      	mov	r4, r0
 80088ac:	460d      	mov	r5, r1
 80088ae:	f7f7 fe13 	bl	80004d8 <__aeabi_dmul>
 80088b2:	a385      	add	r3, pc, #532	; (adr r3, 8008ac8 <__ieee754_asin+0x2d0>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f7f7 fc58 	bl	800016c <__adddf3>
 80088bc:	4622      	mov	r2, r4
 80088be:	462b      	mov	r3, r5
 80088c0:	f7f7 fe0a 	bl	80004d8 <__aeabi_dmul>
 80088c4:	a382      	add	r3, pc, #520	; (adr r3, 8008ad0 <__ieee754_asin+0x2d8>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fc4d 	bl	8000168 <__aeabi_dsub>
 80088ce:	4622      	mov	r2, r4
 80088d0:	462b      	mov	r3, r5
 80088d2:	f7f7 fe01 	bl	80004d8 <__aeabi_dmul>
 80088d6:	a380      	add	r3, pc, #512	; (adr r3, 8008ad8 <__ieee754_asin+0x2e0>)
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f7f7 fc46 	bl	800016c <__adddf3>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	f7f7 fdf8 	bl	80004d8 <__aeabi_dmul>
 80088e8:	a37d      	add	r3, pc, #500	; (adr r3, 8008ae0 <__ieee754_asin+0x2e8>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	f7f7 fc3b 	bl	8000168 <__aeabi_dsub>
 80088f2:	4622      	mov	r2, r4
 80088f4:	462b      	mov	r3, r5
 80088f6:	f7f7 fdef 	bl	80004d8 <__aeabi_dmul>
 80088fa:	a37b      	add	r3, pc, #492	; (adr r3, 8008ae8 <__ieee754_asin+0x2f0>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 fc34 	bl	800016c <__adddf3>
 8008904:	4622      	mov	r2, r4
 8008906:	462b      	mov	r3, r5
 8008908:	f7f7 fde6 	bl	80004d8 <__aeabi_dmul>
 800890c:	a378      	add	r3, pc, #480	; (adr r3, 8008af0 <__ieee754_asin+0x2f8>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	e9cd 0100 	strd	r0, r1, [sp]
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f7 fddd 	bl	80004d8 <__aeabi_dmul>
 800891e:	a376      	add	r3, pc, #472	; (adr r3, 8008af8 <__ieee754_asin+0x300>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fc20 	bl	8000168 <__aeabi_dsub>
 8008928:	4622      	mov	r2, r4
 800892a:	462b      	mov	r3, r5
 800892c:	f7f7 fdd4 	bl	80004d8 <__aeabi_dmul>
 8008930:	a373      	add	r3, pc, #460	; (adr r3, 8008b00 <__ieee754_asin+0x308>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fc19 	bl	800016c <__adddf3>
 800893a:	4622      	mov	r2, r4
 800893c:	462b      	mov	r3, r5
 800893e:	f7f7 fdcb 	bl	80004d8 <__aeabi_dmul>
 8008942:	a371      	add	r3, pc, #452	; (adr r3, 8008b08 <__ieee754_asin+0x310>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fc0e 	bl	8000168 <__aeabi_dsub>
 800894c:	4622      	mov	r2, r4
 800894e:	462b      	mov	r3, r5
 8008950:	f7f7 fdc2 	bl	80004d8 <__aeabi_dmul>
 8008954:	4b70      	ldr	r3, [pc, #448]	; (8008b18 <__ieee754_asin+0x320>)
 8008956:	2200      	movs	r2, #0
 8008958:	f7f7 fc08 	bl	800016c <__adddf3>
 800895c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008960:	4620      	mov	r0, r4
 8008962:	4629      	mov	r1, r5
 8008964:	f000 f944 	bl	8008bf0 <__ieee754_sqrt>
 8008968:	4b6d      	ldr	r3, [pc, #436]	; (8008b20 <__ieee754_asin+0x328>)
 800896a:	4682      	mov	sl, r0
 800896c:	429e      	cmp	r6, r3
 800896e:	468b      	mov	fp, r1
 8008970:	f340 80d8 	ble.w	8008b24 <__ieee754_asin+0x32c>
 8008974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800897c:	f7f7 fed6 	bl	800072c <__aeabi_ddiv>
 8008980:	4652      	mov	r2, sl
 8008982:	465b      	mov	r3, fp
 8008984:	f7f7 fda8 	bl	80004d8 <__aeabi_dmul>
 8008988:	4652      	mov	r2, sl
 800898a:	465b      	mov	r3, fp
 800898c:	f7f7 fbee 	bl	800016c <__adddf3>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	f7f7 fbea 	bl	800016c <__adddf3>
 8008998:	a345      	add	r3, pc, #276	; (adr r3, 8008ab0 <__ieee754_asin+0x2b8>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fbe3 	bl	8000168 <__aeabi_dsub>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	a140      	add	r1, pc, #256	; (adr r1, 8008aa8 <__ieee754_asin+0x2b0>)
 80089a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ac:	f7f7 fbdc 	bl	8000168 <__aeabi_dsub>
 80089b0:	9b05      	ldr	r3, [sp, #20]
 80089b2:	4604      	mov	r4, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bfdc      	itt	le
 80089b8:	4602      	movle	r2, r0
 80089ba:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80089be:	460d      	mov	r5, r1
 80089c0:	bfdc      	itt	le
 80089c2:	4614      	movle	r4, r2
 80089c4:	461d      	movle	r5, r3
 80089c6:	e748      	b.n	800885a <__ieee754_asin+0x62>
 80089c8:	460b      	mov	r3, r1
 80089ca:	f7f7 fd85 	bl	80004d8 <__aeabi_dmul>
 80089ce:	a33c      	add	r3, pc, #240	; (adr r3, 8008ac0 <__ieee754_asin+0x2c8>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	f7f7 fd7e 	bl	80004d8 <__aeabi_dmul>
 80089dc:	a33a      	add	r3, pc, #232	; (adr r3, 8008ac8 <__ieee754_asin+0x2d0>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f7f7 fbc3 	bl	800016c <__adddf3>
 80089e6:	4632      	mov	r2, r6
 80089e8:	463b      	mov	r3, r7
 80089ea:	f7f7 fd75 	bl	80004d8 <__aeabi_dmul>
 80089ee:	a338      	add	r3, pc, #224	; (adr r3, 8008ad0 <__ieee754_asin+0x2d8>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f7f7 fbb8 	bl	8000168 <__aeabi_dsub>
 80089f8:	4632      	mov	r2, r6
 80089fa:	463b      	mov	r3, r7
 80089fc:	f7f7 fd6c 	bl	80004d8 <__aeabi_dmul>
 8008a00:	a335      	add	r3, pc, #212	; (adr r3, 8008ad8 <__ieee754_asin+0x2e0>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fbb1 	bl	800016c <__adddf3>
 8008a0a:	4632      	mov	r2, r6
 8008a0c:	463b      	mov	r3, r7
 8008a0e:	f7f7 fd63 	bl	80004d8 <__aeabi_dmul>
 8008a12:	a333      	add	r3, pc, #204	; (adr r3, 8008ae0 <__ieee754_asin+0x2e8>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fba6 	bl	8000168 <__aeabi_dsub>
 8008a1c:	4632      	mov	r2, r6
 8008a1e:	463b      	mov	r3, r7
 8008a20:	f7f7 fd5a 	bl	80004d8 <__aeabi_dmul>
 8008a24:	a330      	add	r3, pc, #192	; (adr r3, 8008ae8 <__ieee754_asin+0x2f0>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f7f7 fb9f 	bl	800016c <__adddf3>
 8008a2e:	4632      	mov	r2, r6
 8008a30:	463b      	mov	r3, r7
 8008a32:	f7f7 fd51 	bl	80004d8 <__aeabi_dmul>
 8008a36:	a32e      	add	r3, pc, #184	; (adr r3, 8008af0 <__ieee754_asin+0x2f8>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	4680      	mov	r8, r0
 8008a3e:	4689      	mov	r9, r1
 8008a40:	4630      	mov	r0, r6
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f7 fd48 	bl	80004d8 <__aeabi_dmul>
 8008a48:	a32b      	add	r3, pc, #172	; (adr r3, 8008af8 <__ieee754_asin+0x300>)
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f7f7 fb8b 	bl	8000168 <__aeabi_dsub>
 8008a52:	4632      	mov	r2, r6
 8008a54:	463b      	mov	r3, r7
 8008a56:	f7f7 fd3f 	bl	80004d8 <__aeabi_dmul>
 8008a5a:	a329      	add	r3, pc, #164	; (adr r3, 8008b00 <__ieee754_asin+0x308>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fb84 	bl	800016c <__adddf3>
 8008a64:	4632      	mov	r2, r6
 8008a66:	463b      	mov	r3, r7
 8008a68:	f7f7 fd36 	bl	80004d8 <__aeabi_dmul>
 8008a6c:	a326      	add	r3, pc, #152	; (adr r3, 8008b08 <__ieee754_asin+0x310>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fb79 	bl	8000168 <__aeabi_dsub>
 8008a76:	4632      	mov	r2, r6
 8008a78:	463b      	mov	r3, r7
 8008a7a:	f7f7 fd2d 	bl	80004d8 <__aeabi_dmul>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4b25      	ldr	r3, [pc, #148]	; (8008b18 <__ieee754_asin+0x320>)
 8008a82:	f7f7 fb73 	bl	800016c <__adddf3>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f7 fe4d 	bl	800072c <__aeabi_ddiv>
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	f7f7 fd1f 	bl	80004d8 <__aeabi_dmul>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	e6ce      	b.n	8008842 <__ieee754_asin+0x4a>
 8008aa4:	f3af 8000 	nop.w
 8008aa8:	54442d18 	.word	0x54442d18
 8008aac:	3ff921fb 	.word	0x3ff921fb
 8008ab0:	33145c07 	.word	0x33145c07
 8008ab4:	3c91a626 	.word	0x3c91a626
 8008ab8:	8800759c 	.word	0x8800759c
 8008abc:	7e37e43c 	.word	0x7e37e43c
 8008ac0:	0dfdf709 	.word	0x0dfdf709
 8008ac4:	3f023de1 	.word	0x3f023de1
 8008ac8:	7501b288 	.word	0x7501b288
 8008acc:	3f49efe0 	.word	0x3f49efe0
 8008ad0:	b5688f3b 	.word	0xb5688f3b
 8008ad4:	3fa48228 	.word	0x3fa48228
 8008ad8:	0e884455 	.word	0x0e884455
 8008adc:	3fc9c155 	.word	0x3fc9c155
 8008ae0:	03eb6f7d 	.word	0x03eb6f7d
 8008ae4:	3fd4d612 	.word	0x3fd4d612
 8008ae8:	55555555 	.word	0x55555555
 8008aec:	3fc55555 	.word	0x3fc55555
 8008af0:	b12e9282 	.word	0xb12e9282
 8008af4:	3fb3b8c5 	.word	0x3fb3b8c5
 8008af8:	1b8d0159 	.word	0x1b8d0159
 8008afc:	3fe6066c 	.word	0x3fe6066c
 8008b00:	9c598ac8 	.word	0x9c598ac8
 8008b04:	40002ae5 	.word	0x40002ae5
 8008b08:	1c8a2d4b 	.word	0x1c8a2d4b
 8008b0c:	40033a27 	.word	0x40033a27
 8008b10:	3fefffff 	.word	0x3fefffff
 8008b14:	3fdfffff 	.word	0x3fdfffff
 8008b18:	3ff00000 	.word	0x3ff00000
 8008b1c:	3fe00000 	.word	0x3fe00000
 8008b20:	3fef3332 	.word	0x3fef3332
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	f7f7 fb20 	bl	800016c <__adddf3>
 8008b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b30:	4606      	mov	r6, r0
 8008b32:	460f      	mov	r7, r1
 8008b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b38:	f7f7 fdf8 	bl	800072c <__aeabi_ddiv>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4630      	mov	r0, r6
 8008b42:	4639      	mov	r1, r7
 8008b44:	f7f7 fcc8 	bl	80004d8 <__aeabi_dmul>
 8008b48:	f04f 0800 	mov.w	r8, #0
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	4642      	mov	r2, r8
 8008b52:	465b      	mov	r3, fp
 8008b54:	4640      	mov	r0, r8
 8008b56:	4659      	mov	r1, fp
 8008b58:	f7f7 fcbe 	bl	80004d8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4620      	mov	r0, r4
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7f7 fb00 	bl	8000168 <__aeabi_dsub>
 8008b68:	4642      	mov	r2, r8
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	465b      	mov	r3, fp
 8008b70:	4650      	mov	r0, sl
 8008b72:	4659      	mov	r1, fp
 8008b74:	f7f7 fafa 	bl	800016c <__adddf3>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	4629      	mov	r1, r5
 8008b80:	f7f7 fdd4 	bl	800072c <__aeabi_ddiv>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	f7f7 faf0 	bl	800016c <__adddf3>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	a113      	add	r1, pc, #76	; (adr r1, 8008be0 <__ieee754_asin+0x3e8>)
 8008b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b96:	f7f7 fae7 	bl	8000168 <__aeabi_dsub>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	f7f7 fae1 	bl	8000168 <__aeabi_dsub>
 8008ba6:	4642      	mov	r2, r8
 8008ba8:	4604      	mov	r4, r0
 8008baa:	460d      	mov	r5, r1
 8008bac:	465b      	mov	r3, fp
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	f7f7 fadb 	bl	800016c <__adddf3>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	a10b      	add	r1, pc, #44	; (adr r1, 8008be8 <__ieee754_asin+0x3f0>)
 8008bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bc0:	f7f7 fad2 	bl	8000168 <__aeabi_dsub>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7f7 facc 	bl	8000168 <__aeabi_dsub>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	a104      	add	r1, pc, #16	; (adr r1, 8008be8 <__ieee754_asin+0x3f0>)
 8008bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bda:	e6e7      	b.n	80089ac <__ieee754_asin+0x1b4>
 8008bdc:	f3af 8000 	nop.w
 8008be0:	33145c07 	.word	0x33145c07
 8008be4:	3c91a626 	.word	0x3c91a626
 8008be8:	54442d18 	.word	0x54442d18
 8008bec:	3fe921fb 	.word	0x3fe921fb

08008bf0 <__ieee754_sqrt>:
 8008bf0:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008d44 <__ieee754_sqrt+0x154>
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	ea3c 0c01 	bics.w	ip, ip, r1
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4606      	mov	r6, r0
 8008c00:	460d      	mov	r5, r1
 8008c02:	460a      	mov	r2, r1
 8008c04:	4607      	mov	r7, r0
 8008c06:	4604      	mov	r4, r0
 8008c08:	d10e      	bne.n	8008c28 <__ieee754_sqrt+0x38>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	f7f7 fc64 	bl	80004d8 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4630      	mov	r0, r6
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f7 faa8 	bl	800016c <__adddf3>
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4629      	mov	r1, r5
 8008c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	dc0d      	bgt.n	8008c48 <__ieee754_sqrt+0x58>
 8008c2c:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008c30:	ea5c 0707 	orrs.w	r7, ip, r7
 8008c34:	d0f4      	beq.n	8008c20 <__ieee754_sqrt+0x30>
 8008c36:	b139      	cbz	r1, 8008c48 <__ieee754_sqrt+0x58>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	f7f7 fa95 	bl	8000168 <__aeabi_dsub>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	f7f7 fd73 	bl	800072c <__aeabi_ddiv>
 8008c46:	e7e9      	b.n	8008c1c <__ieee754_sqrt+0x2c>
 8008c48:	1512      	asrs	r2, r2, #20
 8008c4a:	d074      	beq.n	8008d36 <__ieee754_sqrt+0x146>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	07d5      	lsls	r5, r2, #31
 8008c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c54:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008c58:	bf5e      	ittt	pl
 8008c5a:	0fe3      	lsrpl	r3, r4, #31
 8008c5c:	0064      	lslpl	r4, r4, #1
 8008c5e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8008c62:	0fe3      	lsrs	r3, r4, #31
 8008c64:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008c68:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008c6c:	2516      	movs	r5, #22
 8008c6e:	4601      	mov	r1, r0
 8008c70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008c74:	1076      	asrs	r6, r6, #1
 8008c76:	0064      	lsls	r4, r4, #1
 8008c78:	188f      	adds	r7, r1, r2
 8008c7a:	429f      	cmp	r7, r3
 8008c7c:	bfde      	ittt	le
 8008c7e:	1bdb      	suble	r3, r3, r7
 8008c80:	18b9      	addle	r1, r7, r2
 8008c82:	1880      	addle	r0, r0, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	3d01      	subs	r5, #1
 8008c88:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008c8c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008c90:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008c94:	d1f0      	bne.n	8008c78 <__ieee754_sqrt+0x88>
 8008c96:	462a      	mov	r2, r5
 8008c98:	f04f 0e20 	mov.w	lr, #32
 8008c9c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8008ca0:	428b      	cmp	r3, r1
 8008ca2:	eb07 0c05 	add.w	ip, r7, r5
 8008ca6:	dc02      	bgt.n	8008cae <__ieee754_sqrt+0xbe>
 8008ca8:	d113      	bne.n	8008cd2 <__ieee754_sqrt+0xe2>
 8008caa:	45a4      	cmp	ip, r4
 8008cac:	d811      	bhi.n	8008cd2 <__ieee754_sqrt+0xe2>
 8008cae:	f1bc 0f00 	cmp.w	ip, #0
 8008cb2:	eb0c 0507 	add.w	r5, ip, r7
 8008cb6:	da43      	bge.n	8008d40 <__ieee754_sqrt+0x150>
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	db41      	blt.n	8008d40 <__ieee754_sqrt+0x150>
 8008cbc:	f101 0801 	add.w	r8, r1, #1
 8008cc0:	1a5b      	subs	r3, r3, r1
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	45a4      	cmp	ip, r4
 8008cc6:	bf88      	it	hi
 8008cc8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008ccc:	eba4 040c 	sub.w	r4, r4, ip
 8008cd0:	443a      	add	r2, r7
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	f1be 0e01 	subs.w	lr, lr, #1
 8008cd8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008cdc:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008ce0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008ce4:	d1dc      	bne.n	8008ca0 <__ieee754_sqrt+0xb0>
 8008ce6:	4323      	orrs	r3, r4
 8008ce8:	d006      	beq.n	8008cf8 <__ieee754_sqrt+0x108>
 8008cea:	1c54      	adds	r4, r2, #1
 8008cec:	bf0b      	itete	eq
 8008cee:	4672      	moveq	r2, lr
 8008cf0:	3201      	addne	r2, #1
 8008cf2:	3001      	addeq	r0, #1
 8008cf4:	f022 0201 	bicne.w	r2, r2, #1
 8008cf8:	1043      	asrs	r3, r0, #1
 8008cfa:	07c1      	lsls	r1, r0, #31
 8008cfc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008d00:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d08:	bf48      	it	mi
 8008d0a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008d0e:	4610      	mov	r0, r2
 8008d10:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008d14:	e782      	b.n	8008c1c <__ieee754_sqrt+0x2c>
 8008d16:	0ae3      	lsrs	r3, r4, #11
 8008d18:	3915      	subs	r1, #21
 8008d1a:	0564      	lsls	r4, r4, #21
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0fa      	beq.n	8008d16 <__ieee754_sqrt+0x126>
 8008d20:	02de      	lsls	r6, r3, #11
 8008d22:	d50a      	bpl.n	8008d3a <__ieee754_sqrt+0x14a>
 8008d24:	f1c2 0020 	rsb	r0, r2, #32
 8008d28:	fa24 f000 	lsr.w	r0, r4, r0
 8008d2c:	1e55      	subs	r5, r2, #1
 8008d2e:	4094      	lsls	r4, r2
 8008d30:	4303      	orrs	r3, r0
 8008d32:	1b4a      	subs	r2, r1, r5
 8008d34:	e78a      	b.n	8008c4c <__ieee754_sqrt+0x5c>
 8008d36:	4611      	mov	r1, r2
 8008d38:	e7f0      	b.n	8008d1c <__ieee754_sqrt+0x12c>
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	3201      	adds	r2, #1
 8008d3e:	e7ef      	b.n	8008d20 <__ieee754_sqrt+0x130>
 8008d40:	4688      	mov	r8, r1
 8008d42:	e7bd      	b.n	8008cc0 <__ieee754_sqrt+0xd0>
 8008d44:	7ff00000 	.word	0x7ff00000

08008d48 <fabs>:
 8008d48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008d4c:	4770      	bx	lr
	...

08008d50 <nan>:
 8008d50:	2000      	movs	r0, #0
 8008d52:	4901      	ldr	r1, [pc, #4]	; (8008d58 <nan+0x8>)
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	7ff80000 	.word	0x7ff80000

08008d5c <_init>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr

08008d68 <_fini>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr
